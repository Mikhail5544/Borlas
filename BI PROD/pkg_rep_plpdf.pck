CREATE OR REPLACE PACKAGE pkg_rep_plpdf AS
  -- Author  : Пиядин А., Капля П
  -- Created : 05.02.2014 13:12
  -- Purpose : Пакет процедур, формирующих отчеты в виде BLOB с помощью пакета PLPDF

  SUBTYPE t_style_brief IS VARCHAR2(2);
  SUBTYPE t_font_family_name IS VARCHAR2(255);

  gc_pdf_content_type           CONSTANT VARCHAR2(255) := 'application/pdf';
  gc_times_font_family          CONSTANT t_font_family_name := 'Times';
  gc_arial_font_family          CONSTANT t_font_family_name := 'Arial';
  gc_barcode_font_family_code39 CONSTANT t_font_family_name := 'Code39';

  gc_style_bold        CONSTANT t_style_brief := 'B';
  gc_style_bold_italic CONSTANT t_style_brief := 'BI';
  gc_style_italic      CONSTANT t_style_brief := 'I';
  gc_style_regular     CONSTANT t_style_brief := NULL;

  gc_color_light_grey CONSTANT plpdf_type.t_color := plpdf_const.light_grey; --Светло серый
  gc_color_black      CONSTANT plpdf_type.t_color := plpdf_const.black; --Черный
  gc_color_orange     CONSTANT plpdf_type.t_color := plpdf_util.set_color(255, 128, 0);

  gv_datas    plpdf_type.t_row_datas; -- Array of datas
  gv_borders  plpdf_type.t_row_borders; -- Array of borders
  gv_widths   plpdf_type.t_row_widths; -- Array of widths
  gv_aligns   plpdf_type.t_row_aligns; -- Array of aligns
  gv_styles   plpdf_type.t_row_styles; -- Array of styles
  gv_maxlines plpdf_type.t_row_maxlines; -- Array of max lines

  gc_new_line CONSTANT CHAR(1) := chr(13);

  gc_rect_marked   CONSTANT VARCHAR2(2) := 'DF';
  gc_rect_unmarked CONSTANT VARCHAR2(2) := 'D';

  gc_default_line_height /*CONSTANT*/
  NUMBER := 3;
  gc_default_no_clipping CONSTANT NUMBER := 0;

  TYPE t_contact_summary IS RECORD(
     contact_id                 contact.contact_id%TYPE
    ,fio                        contact.obj_name_orig%TYPE
    ,NAME                       contact.name%TYPE
    ,first_name                 contact.first_name%TYPE
    ,middle_name                contact.middle_name%TYPE
    ,fio_initials               contact.obj_name_orig%TYPE
    ,date_of_birth              cn_person.date_of_birth%TYPE
    ,is_public_contact          contact.is_public_contact%TYPE
    ,is_rpdl                    cn_person.is_in_list%TYPE
    ,gender                     t_gender.brief%TYPE
    ,gender_desc                t_gender.description%TYPE
    ,country_birth_name         t_country.description%TYPE
    ,has_additional_citizenship cn_person.has_additional_citizenship%TYPE
    ,has_foreign_residency      cn_person.has_foreign_residency%TYPE
    ,genitive                   contact.genitive%TYPE);

  TYPE t_policy_summary IS RECORD(
     policy_header_id      p_pol_header.policy_header_id%TYPE
    ,ids                   p_pol_header.ids%TYPE
    ,start_date            p_pol_header.start_date%TYPE
    ,end_date              p_policy.end_date%TYPE
    ,sign_date             p_policy.sign_date%TYPE
    ,agent_num             ven_ag_contract_header.num%TYPE
    ,discount              discount_f.name%TYPE
    ,discount_brief        discount_f.brief%TYPE
    ,premium               p_policy.premium%TYPE
    ,ins_amount            p_policy.ins_amount%TYPE
    ,adm_cost              p_policy.admin_cost%TYPE
    ,pol_num               p_policy.pol_num%TYPE
    ,ser_num               p_policy.pol_ser%TYPE
    ,policy_start_date     p_policy.start_date%TYPE
    ,notice_num            p_policy.notice_num%TYPE
    ,fist_payment_date     p_policy.first_pay_date%TYPE
    ,product_id            t_product.product_id%TYPE
    ,product_name          t_product.description%TYPE
    ,product_public_name   t_product.public_description%TYPE
    ,product_brief         t_product.brief%TYPE
    ,payment_terms         t_payment_terms.description%TYPE
    ,payment_terms_brief   t_payment_terms.brief%TYPE
    ,fund_id               fund.fund_id%TYPE
    ,fund_brief            fund.brief%TYPE
    ,fund_short_name       fund.spell_short_whole%TYPE
    ,fund_name             fund.name%TYPE
    ,insuree_contact_id    contact.contact_id%TYPE
    ,credit_account_number as_assured.credit_account_number%TYPE
    ,assured_array         t_number_type
    ,base_sum              p_policy.base_sum%TYPE
    ,policy_status_desc    doc_status_ref.name%TYPE
    ,policy_status_breif   doc_status_ref.brief%TYPE
    ,policy_period_desc    t_period.description%TYPE
    ,version_order_num     p_policy.version_order_num%TYPE);

  SUBTYPE t_barcode_string IS VARCHAR2(50);

  CURSOR cur_tmp_bso(par_number_of_copies INTEGER) IS
    SELECT /*+ ORDERED USE_NL(t,b)*/
     t.bso_id
    ,bs.proposal_valid_days
    ,pkg_xx_pol_ids.cre_new_ids(bs.series_num, b.num) ids
      FROM tmp_bso_to_print t
          ,bso b
          ,bso_series bs
          ,(SELECT LEVEL copy_num FROM dual CONNECT BY LEVEL <= par_number_of_copies)
     WHERE t.bso_id = b.bso_id
       AND b.bso_series_id = bs.bso_series_id
     ORDER BY b.num;

  /*
    Процедура инициализации киррилической кодировки и шрифтов
  */
  PROCEDURE font_init;

  /*
    Инициализация отчета
  */
  PROCEDURE init
  (
    par_default_font_size NUMBER DEFAULT 9
   ,par_top_margin        NUMBER DEFAULT NULL
   ,par_bottom_margin     NUMBER DEFAULT NULL
  );

  /*
    Капля П.
    Процедура установки текущего шрифта печати
  */
  PROCEDURE set_font
  (
    par_size        NUMBER DEFAULT NULL
   ,par_style       VARCHAR2 DEFAULT NULL
   ,par_color       plpdf_type.t_color DEFAULT gc_color_black
   ,par_font_family VARCHAR2 DEFAULT gc_times_font_family
  );

  PROCEDURE delete_row_print_cache;

  PROCEDURE row_print2
  (
    par_datas    plpdf_type.t_row_datas DEFAULT gv_datas
   ,par_borders  plpdf_type.t_row_borders DEFAULT gv_borders
   ,par_widths   plpdf_type.t_row_widths DEFAULT gv_widths
   ,par_aligns   plpdf_type.t_row_aligns DEFAULT gv_aligns
   ,par_styles   plpdf_type.t_row_styles DEFAULT gv_styles
   ,par_maxlines plpdf_type.t_row_maxlines DEFAULT gv_maxlines
   ,par_clipping NUMBER DEFAULT 0
   ,par_h        NUMBER DEFAULT 5
  );

  FUNCTION get_policy_summary(par_policy_id p_policy.policy_id%TYPE) RETURN t_policy_summary;

  /*
    Получение базовой инфы контакта (ФИО, ДР, ИПДЛ и т.п.)
  */
  FUNCTION get_contact_summary(par_contact_id contact.contact_id%TYPE) RETURN t_contact_summary;

  FUNCTION get_additional_citizenships(par_contact_id NUMBER) RETURN VARCHAR2;

  FUNCTION get_foreign_residencies(par_contact_id NUMBER) RETURN VARCHAR2;

  /*
    Процедура печатает надпись Черновик для статусов Ожидает подтверждение из B2B и Проект
  */
  PROCEDURE print_draft(par_status doc_status_ref.name%TYPE);

  /*
    Печать штрихкода в правом верхнем углу полиса
  */
  PROCEDURE print_barcode(par_policy_id NUMBER);

  /*
    Капля П.
    Получение текстового представления штрихкода для версии ДС
  */
  FUNCTION get_barcode_for_policy(par_policy_id p_policy.policy_id%TYPE) RETURN t_barcode_string;

  /*
    Процедура формирования полиса по продукту Шесть континентов - Кредитка
  */
  PROCEDURE rep_rolf_credit
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продукту Шесть континентов - Уверенный старт
  */
  PROCEDURE rep_rolf_strong_start
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продуктам Жизни
    Гармония жизни_2, Дети_2, Семья_2, Будущее_2
    по новым ПУ серии 414
  */
  PROCEDURE policy_life_414
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  PROCEDURE footer_414;

  /*
    Пиядин А.
    Анкета финмониторинг по 301732 ТЗ Финмониторинг
  */
  PROCEDURE rep_anketa_finmon
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Капля П.С.
    Универсальная печатная форма для кредитных продуктов
  */
  PROCEDURE rep_credit_policy
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Капля П.С.
    Печатная форма для продукта "Семейная защита"
    Также реализуется пустая печатная форма
  */
  PROCEDURE rep_family_protection_policy
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  PROCEDURE footer_family_protection;

  /*
    Пиядин А.
    223809 Проект ФТ по договорам кредитного страхования
  */
  PROCEDURE rep_universal_loader
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Печатная форма по продукту Platinum Life
  */
  PROCEDURE rep_platinum_life
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  PROCEDURE footer_best_doctors;

  /*
    Пиядин А.
    323482 Более 1 ошибки(ТЗ по кредитным договорам)
    Строки файла загрузки с состоянием и диагностикой
  */
  PROCEDURE rep_universal_loader_log
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Пиядин А.
    323482 Более 1 ошибки(ТЗ по кредитным договорам)
    Строки файла загрузки с состоянием и диагностикой
  */
  PROCEDURE rep_universal_loader_log_short
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
   ,par_status       IN VARCHAR2 DEFAULT NULL
  );

  /*
  Доброхотова И.
  328575: Создать загрузочный файл для импорта в BI ДИД.
  Строки файла загрузки с состоянием и диагностикой, не прошедшие проверку
  */
  PROCEDURE rep_universal_loader_log_error
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Пиядин А.
    222780 Формирование письма об окончании периода оценки риска
    Письмо об истечении ВП за 14 дней
  */
  PROCEDURE rep_letter_14vp
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
  Печать полисов по продуктам ХКФ Банк
  18.04.2014 Черных М.
  */
  PROCEDURE rep_hkf_credit
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
   ,par_period_type  VARCHAR2
  );
  /*
  Печать полиса со сроком действия договора "С ДАТЫ СПИСАНИЯ"
  Черных М.Г. 19.05.2014
  */
  PROCEDURE rep_hkf_credit_write_off
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );
  /*
  Печать полиса со сроком действия договора "С ДАТЫ ОПЛАТЫ СТРАХОВАТЕЛЕМ"
  Черных М.Г. 19.05.2014
  */
  PROCEDURE rep_hkf_credit_pay
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Пиядин А.
    239416 ФТ по штрих-кодированию
  */
  PROCEDURE rep_barcode_scan_hist
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продукту Инвестор Партнер с ед.ф.опл. АкБарс
  */
  PROCEDURE rep_investor_lump_akbars
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  -- Процедура формирования полиса Уверенный старт 2014
  -- 374307 FW настройка продукта Уверенный старт
  -- Доброхотова И., ноябрь, 2014
  PROCEDURE rep_strong_start_2014
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Печатная форма по продукту Platinum Life с программами МБГ
    378726 Заявка на настройку продукта Platinum Life
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_platinum_life_mbg
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продукту Инвестор Плюс
    376782 Инвестор плюс, серия 688
    Доброхотова И., ноябрь, 2014
  */
  PROCEDURE rep_investor_plus
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продуктам Investor и INVESTOR_LUMP
    379978: Инвестор (единовр и регулрная форма)
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_investor_new_2014
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продуктам Наследия
    385734 Настройка продукта Наследие
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_nasledie
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования Заявление по продукту Наследия
    385734 Настройка продукта Наследие
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_nasledie_notice
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продуктам Жизни
    Гармония жизни_2,Семья_2, Будущее_2
    по новым ПУ серии 415
    
    385161 FW Гармония жизни, серия 415
    Доброхотова И., январь, 2015
  */
  PROCEDURE policy_life_415
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  -- Процедура формирования полиса по продукту Достояние
  -- 384116 Достояние_ГПБ
  -- Доброхотова И., январь, 2015
  PROCEDURE rep_dostoyanie
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  -- Процедура формирования заявления по продукту Достояние
  -- 384116 Достояние_ГПБ
  -- Доброхотова И., январь, 2015  
  PROCEDURE rep_dostoyanie_notice
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    392447 Григорьев Ю.
    Печать полиса Медицины без границ с укороченной (для Ренкап) и полной (для остальных) декларациями 
  */

  PROCEDURE rep_best_doctors_is_full_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  PROCEDURE rep_best_doctors_is_short_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  PROCEDURE rep_best_doctors_is_short_dec2
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    396087 Григорьев Ю.
    Процедура формирования заявления на перевод денежных средств Медицина без границ 
  */

  PROCEDURE rep_best_doctors_payment_order
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  /*
    Процедура формирования полиса по продукту Семейный депозит
    385995 Сем.депозит, новое бсо
    Доброхотова И., январь, 2015
  */
  PROCEDURE rep_famaly_dep
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  PROCEDURE rep_invest_lump_is_no_orig_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

  PROCEDURE rep_invest_lump_is_orig_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  );

END pkg_rep_plpdf;
/
CREATE OR REPLACE PACKAGE BODY pkg_rep_plpdf AS

  gc_pkg_name CONSTANT pkg_trace.t_object_name := 'pkg_rep_plpdf';

  SUBTYPE t_style_brief IS VARCHAR2(2);

  gc_font_times_normal CONSTANT VARCHAR2(50) := 'Normal';
  gc_font_times_bold   CONSTANT VARCHAR2(50) := 'Bold';
  gc_font_color_black  CONSTANT VARCHAR2(50) := 'Black';
  gc_font_color_white  CONSTANT VARCHAR2(50) := 'White';
  gc_font_color_orange CONSTANT VARCHAR2(50) := 'Orange';

  gv_default_elem_header_width NUMBER;

  -- Используется для печати пачек пустых БСО
  gv_current_copy      INTEGER;
  gv_chapter_num       PLS_INTEGER := 0;
  gv_default_font_size NUMBER;

  /*
    Выводить только вопросы 
  */
  gc_contact_info_ver1 CONSTANT PLS_INTEGER := 1;
  gc_contact_info_ver2 CONSTANT PLS_INTEGER := 2;

  TYPE typ_cach_surr_rec IS RECORD(
     period_start     DATE
    ,period_end       DATE
    ,ins_year_formula NUMBER
    ,cash_surr_value  NUMBER
    ,reserve_proc     NUMBER
    ,reserve_value    NUMBER
    ,period_number    NUMBER);

  TYPE typ_cur_cash_surr_table IS REF CURSOR RETURN typ_cach_surr_rec;

  TYPE typ_signer IS RECORD(
     id                    t_signer.t_signer_id%TYPE
    ,NAME                  t_signer.contact_name%TYPE
    ,genitive_name         contact.genitive%TYPE
    ,procuratory           t_signer.procuratory_num%TYPE
    ,job_position          t_job_position.position_name%TYPE
    ,genitive_job_position t_job_position.genitive_position_name%TYPE
    ,image_sign            t_signer.image_sign_jpg%TYPE
    ,procuratory_num       t_signer.procuratory_num%TYPE
    ,short_name            t_signer.contact_name%TYPE);

  FUNCTION get_product_line_exists
  (
    par_policy_id              NUMBER
   ,par_prod_line_option_brief VARCHAR2
  ) RETURN BOOLEAN IS
    v_exists NUMBER(1);
  BEGIN
    SELECT COUNT(*)
      INTO v_exists
      FROM dual
     WHERE EXISTS (SELECT NULL
              FROM as_asset           aa
                  ,p_cover            pc
                  ,t_prod_line_option plo
             WHERE aa.p_policy_id = par_policy_id
               AND aa.as_asset_id = pc.as_asset_id
               AND pc.t_prod_line_option_id = plo.id
               AND plo.brief = par_prod_line_option_brief
               AND aa.status_hist_id != pkg_asset.status_hist_id_del
               AND pc.status_hist_id != pkg_cover.status_hist_id_del);
    RETURN v_exists > 0;
  END get_product_line_exists;

  -- Город подписания Договора
  FUNCTION get_city_name RETURN VARCHAR2 IS
    v_city_name VARCHAR2(255);
  BEGIN
    SELECT a.province_type || '. ' || a.province_name
      INTO v_city_name
      FROM contact            c
          ,cn_contact_address ca
          ,cn_address         a
          ,t_address_type     tat
     WHERE 1 = 1
       AND ca.contact_id = c.contact_id
       AND a.id = ca.adress_id
       AND tat.id = ca.address_type
       AND c.contact_id = pkg_app_param.get_app_param_u('WHOAMI')
       AND tat.brief = 'LEGAL'
       AND rownum = 1
     ORDER BY nvl(ca.is_default, 0) DESC;
  
    RETURN v_city_name;
  EXCEPTION
    WHEN no_data_found THEN
      RETURN '';
  END get_city_name;

  -- Страховщик
  FUNCTION get_insurer RETURN VARCHAR2 IS
    v_insurer VARCHAR2(2000);
  BEGIN
    v_insurer := pkg_contact_rep_utils.get_insurer_info;
    RETURN v_insurer;
  EXCEPTION
    WHEN no_data_found THEN
      RETURN '';
  END get_insurer;

  -- Выгодоприобретатель
  FUNCTION get_beneficiary(par_policy_id p_policy.policy_id%TYPE) RETURN VARCHAR2 IS
    v_beneficiary contact.obj_name_orig%TYPE;
  BEGIN
    SELECT c.obj_name_orig
      INTO v_beneficiary
      FROM as_asset       aa
          ,as_beneficiary ab
          ,contact        c
     WHERE ab.as_asset_id = aa.as_asset_id
       AND ab.contact_id = c.contact_id
       AND aa.p_policy_id = par_policy_id
       AND rownum = 1;
  
    RETURN v_beneficiary;
  EXCEPTION
    WHEN no_data_found THEN
      RETURN '';
  END get_beneficiary;

  -- Подписант от Страховщика
  FUNCTION get_signer
  (
    par_report_name      rep_report.exe_name%TYPE
   ,par_department_brief t_job_position.dep_brief%TYPE DEFAULT 'ОПЕРУ'
  ) RETURN typ_signer IS
    v_signer typ_signer;
  BEGIN
    SELECT s.t_signer_id
          ,s.contact_name
          ,c.genitive
          ,'по дов. ' || s.procuratory_num
          ,jp.position_name
          ,jp.genitive_position_name
          ,s.image_sign_jpg
          ,s.procuratory_num
          ,pkg_contact.get_fio_fmt(s.contact_name, 4) short_name
      INTO v_signer
      FROM rep_report      r
          ,t_report_signer sg
          ,t_job_position  jp
          ,t_signer        s
          ,contact         c
     WHERE 1 = 1
       AND r.rep_report_id = sg.report_id
       AND s.job_position_id = jp.t_job_position_id
       AND jp.dep_brief = par_department_brief
       AND jp.is_enabled = 1
       AND s.t_signer_id = sg.t_signer_id
       AND s.contact_id = c.contact_id(+)
       AND r.exe_name = par_report_name;
  
    RETURN v_signer;
  EXCEPTION
    WHEN no_data_found THEN
      RETURN NULL;
  END get_signer;

  /*
    Процедура печатает пустую ячейку
  */
  PROCEDURE blank_cell
  (
    par_width  NUMBER DEFAULT 3
   ,par_height NUMBER DEFAULT 3
   ,par_border VARCHAR2 DEFAULT '0'
   ,par_ln     NUMBER DEFAULT 0
  ) IS
  BEGIN
    plpdf.printmultilinecell(p_w      => par_width
                            ,p_h      => par_height
                            ,p_txt    => ''
                            ,p_border => par_border
                            ,p_ln     => par_ln);
  END blank_cell;

  /*
    Процедура инициализации киррилической кодировки и шрифтов
  */
  PROCEDURE font_init IS
    l_ttf plpdf_type.t_addfont;
  BEGIN
    /* Sets Adobe Core character encoding (default code is cp1252)
    or Unicode TTF embending (AL32UTF8 database) with ‘utf16’. */
    plpdf.setencoding(p_enc => plpdf_const.cp1251);
  
    FOR cur IN (SELECT f.id
                      ,t.id file_id
                      ,REPLACE(t.fontfile_name, '.ttf') font_name
                      ,regexp_replace(REPLACE(t.fontfile_name, '.ttf'), '(-BI)|(-B)|(-I)') font_family
                      ,CASE
                         WHEN regexp_like(t.fontfile_name, '(-BI)') THEN
                          'I'
                         WHEN regexp_like(t.fontfile_name, '(-B)') THEN
                          'B'
                         WHEN regexp_like(t.fontfile_name, '(-I)') THEN
                          'BI'
                       END style
                  FROM plpdf_ttf_file t
                      ,plpdf_ttf_add  f
                 WHERE t.id = f.file_id
                --AND t.fontfile_name IN ('Times.ttf', 'Times-B.ttf', 'Times-BI.ttf', 'Times-I.ttf')
                 ORDER BY font_family
                         ,style NULLS FIRST)
    LOOP
      l_ttf := plpdf_ttf.getttf(cur.id);
    
      plpdf.addttf(p_family => cur.font_family, p_style => cur.style, p_data => l_ttf);
    END LOOP;
  
  END font_init;

  PROCEDURE init
  (
    par_default_font_size NUMBER DEFAULT 9
   ,par_top_margin        NUMBER DEFAULT NULL
   ,par_bottom_margin     NUMBER DEFAULT NULL
  ) IS
  BEGIN
  
    gv_default_font_size := par_default_font_size;
    plpdf.init;
    font_init;
    plpdf.setencoding(p_enc => plpdf_const.cp1251);
  
    IF par_top_margin IS NOT NULL
    THEN
      plpdf.settopmargin(par_top_margin);
    END IF;
    IF par_bottom_margin IS NOT NULL
    THEN
      plpdf.setautonewpage(p_auto => TRUE, p_margin => par_bottom_margin);
    END IF;
    plpdf.newpage;
  
    gv_default_elem_header_width := plpdf.getpagespace * 0.45;
  
    gv_chapter_num := 0;
  END;

  PROCEDURE prn
  (
    par_text     VARCHAR2
   ,par_ln       NUMBER DEFAULT 1
   ,par_align    VARCHAR2 DEFAULT 'J'
   ,par_clipping NUMBER DEFAULT 0
   ,par_h        NUMBER DEFAULT 3
   ,par_w        NUMBER DEFAULT 0
  ) IS
  BEGIN
    plpdf.printmultilinecell(p_ln       => par_ln
                            ,p_align    => par_align
                            ,p_clipping => par_clipping
                            ,p_h        => par_h
                            ,p_txt      => par_text
                            ,p_w        => par_w);
  END;

  /*
    Капля П.
    Процедура установки текущего шрифта печати
  */
  PROCEDURE set_font
  (
    par_size        NUMBER DEFAULT NULL
   ,par_style       VARCHAR2 DEFAULT NULL
   ,par_color       plpdf_type.t_color DEFAULT gc_color_black
   ,par_font_family VARCHAR2 DEFAULT gc_times_font_family
  ) IS
  BEGIN
    plpdf.setprintfont(p_family => par_font_family
                      ,p_style  => par_style
                      ,p_size   => nvl(par_size, gv_default_font_size));
    plpdf.setcolor4text(coalesce(par_color, gc_color_black));
  END set_font;

  /*
    Процедура изменения типа / цвета / размера шрифта
    DEPRECATED
  */
  PROCEDURE set_times_font
  (
    par_type  VARCHAR2 DEFAULT gc_font_times_normal
   ,par_color VARCHAR2 DEFAULT gc_font_color_black
   ,par_size  NUMBER DEFAULT 9
  ) IS
  BEGIN
  
    set_font(par_size  => par_size
            ,par_style => CASE par_type
                            WHEN gc_font_times_bold THEN
                             gc_style_bold
                          END
            ,par_color => CASE par_color
                            WHEN gc_font_color_orange THEN
                             gc_color_orange
                            ELSE
                             plpdf_const.black
                          END);
  
  END set_times_font;

  /*
    Очистка глобальных переменных для использования в row_print2
  */
  PROCEDURE delete_row_print_cache IS
  BEGIN
    gv_datas.delete;
    gv_widths.delete;
    gv_aligns.delete;
    gv_borders.delete;
    gv_styles.delete;
    gv_datas.delete;
  END delete_row_print_cache;

  PROCEDURE print_default_title
  (
    par_text VARCHAR2
   ,par_size NUMBER DEFAULT 20
  ) IS
  BEGIN
    set_font(par_size => par_size, par_style => gc_style_bold, par_color => gc_color_orange);
    plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    set_font;
  END print_default_title;

  PROCEDURE print_default_cotitle
  (
    par_text VARCHAR2
   ,par_size NUMBER DEFAULT 15
  ) IS
  BEGIN
    set_font(par_size => par_size, par_style => gc_style_bold, par_color => gc_color_orange);
    plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    set_font;
  END print_default_cotitle;

  PROCEDURE print_default_chapter
  (
    par_title VARCHAR2
   ,par_ln    INTEGER DEFAULT 1
  ) IS
    v_width NUMBER;
    v_text  VARCHAR2(500);
  BEGIN
    gv_chapter_num := gv_chapter_num + 1;
  
    set_font(par_size  => gv_default_font_size + 1
            ,par_style => gc_style_bold
            ,par_color => gc_color_orange);
  
    v_text := gv_chapter_num || '. ' || par_title;
  
    IF par_ln != 1
    THEN
      v_width := plpdf.gettextwidth(v_text) + 5;
    ELSE
      v_width := 0;
    END IF;
  
    --plpdf.linebreak;
    plpdf.printmultilinecell(p_txt   => v_text
                            ,p_align => 'L'
                            ,p_w     => v_width
                            ,p_h     => -1
                            ,p_ln    => par_ln);
    set_font;
    --plpdf.linebreak;
  END print_default_chapter;

  PROCEDURE print_default_subchapter
  (
    par_title VARCHAR2
   ,par_ln    INTEGER DEFAULT 1
  ) IS
  BEGIN
    set_font(par_size  => gv_default_font_size + 1
            ,par_style => gc_style_bold
            ,par_color => gc_color_orange);
  
    plpdf.printmultilinecell(p_txt => par_title, p_align => 'L', p_w => 0, p_h => -1, p_ln => par_ln);
    set_font;
  END print_default_subchapter;

  PROCEDURE print_default_insurer_info IS
  BEGIN
    print_default_chapter(upper('СТРАХОВЩИК'));
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_txt      => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_def_info)
                            ,p_h        => 3
                            ,p_clipping => 0
                            ,p_ln       => 1);
  END print_default_insurer_info;

  FUNCTION get_policy_summary(par_policy_id p_policy.policy_id%TYPE) RETURN t_policy_summary IS
    v_policy_summary t_policy_summary;
  BEGIN
    SELECT ph.policy_header_id
          ,ph.ids
          ,ph.start_date
          ,pp.end_date
          ,pp.sign_date
          ,(SELECT num
             FROM document d
            WHERE d.document_id = pkg_agn_control.get_current_policy_agent(ph.policy_header_id))
          ,(SELECT dc.name FROM discount_f dc WHERE dc.discount_f_id = pp.discount_f_id)
          ,(SELECT dc.brief FROM discount_f dc WHERE dc.discount_f_id = pp.discount_f_id)
          ,pp.premium
          ,pp.ins_amount
          ,pp.admin_cost
          ,pp.pol_num
          ,pp.pol_ser
          ,pp.start_date
          ,pp.notice_num
          ,pp.first_pay_date
          ,p.product_id
          ,p.description
          ,p.public_description
          ,p.brief
          ,pt.description
          ,pt.brief
          ,f.fund_id
          ,f.brief
          ,f.spell_short_whole
          ,f.name
          ,pi.contact_id
          ,(SELECT aas.credit_account_number
             FROM as_asset   aa
                 ,as_assured aas
            WHERE aa.p_policy_id = pp.policy_id
              AND aa.as_asset_id = aas.as_assured_id
              AND aas.credit_account_number IS NOT NULL
              AND rownum = 1)
          ,CAST(MULTISET (SELECT aas.assured_contact_id
                   FROM as_asset   aa
                       ,as_assured aas
                  WHERE aa.p_policy_id = pp.policy_id
                    AND aa.as_asset_id = aas.as_assured_id
                  ORDER BY aas.as_assured_id) AS t_number_type)
          ,pp.base_sum
          ,doc.get_last_doc_status_name(pp.policy_id) status_desc
          ,doc.get_last_doc_status_brief(pp.policy_id) status_brief
          ,(SELECT per.description FROM t_period per WHERE per.id = pp.period_id)
          ,pp.version_order_num
      INTO v_policy_summary
      FROM p_policy        pp
          ,p_pol_header    ph
          ,t_product       p
          ,t_payment_terms pt
          ,v_pol_issuer    pi
          ,fund            f
     WHERE pp.policy_id = par_policy_id
       AND pp.pol_header_id = ph.policy_header_id
       AND ph.product_id = p.product_id
       AND pp.policy_id = pi.policy_id(+)
       AND pp.payment_term_id = pt.id(+)
       AND ph.fund_id = f.fund_id(+);
  
    RETURN v_policy_summary;
  
  EXCEPTION
    WHEN no_data_found THEN
      raise_application_error(-20001
                             ,'Не удалось сформировать информацию о Договоре страхования.');
  END;

  /*
    Получение базовой инфы контакта (ФИО, ДР, ИПДЛ и т.п.)
  */
  FUNCTION get_contact_summary(par_contact_id contact.contact_id%TYPE) RETURN t_contact_summary IS
    v_contact_summary t_contact_summary;
  BEGIN
    SELECT c.contact_id
          ,c.obj_name_orig
          ,c.name
          ,c.first_name
          ,c.middle_name
          ,pkg_contact.get_fio_fmt(c.obj_name_orig, 4)
          ,cp.date_of_birth
          ,c.is_public_contact
          ,nvl(cp.is_in_list, 0)
          ,(SELECT brief FROM t_gender g WHERE g.id = cp.gender) gender_brief
          ,(SELECT g.description FROM t_gender g WHERE g.id = cp.gender) gender_desc
          ,(SELECT description FROM t_country c WHERE c.id = cp.country_birth) country_name
          ,cp.has_additional_citizenship
          ,cp.has_foreign_residency
          ,c.genitive
      INTO v_contact_summary
      FROM contact   c
          ,cn_person cp
     WHERE c.contact_id = par_contact_id
       AND c.contact_id = cp.contact_id(+);
    RETURN v_contact_summary;
  END get_contact_summary;

  FUNCTION get_underwriting_data
  (
    par_policy_id               p_policy.policy_id%TYPE
   ,par_premium_raised_out      OUT BOOLEAN
   ,par_premium_delta_out       OUT NUMBER
   ,par_premium_raised_date_out OUT DATE
   ,par_addendum_note           OUT VARCHAR2
  ) RETURN BOOLEAN IS
    v_current_premium p_policy.premium%TYPE;
    v_prev_premium    p_policy.premium%TYPE;
  BEGIN
    BEGIN
      SELECT ROUND((SELECT SUM(fee) FROM as_asset aa WHERE aa.p_policy_id = pp.policy_id) -
                   (SELECT SUM(aa.fee) FROM as_asset aa WHERE aa.p_policy_id = pp2.policy_id)
                  ,2) premium_delta
        INTO par_premium_delta_out
        FROM p_policy pp
            ,(SELECT pp2.premium
                    ,pp2.policy_id
                FROM p_policy pp2
               WHERE EXISTS (SELECT NULL
                        FROM doc_status     ds
                            ,doc_status_ref dsr
                       WHERE ds.document_id = pp2.policy_id
                         AND ds.doc_status_ref_id = dsr.doc_status_ref_id
                         AND dsr.brief = 'UNDERWRITING')) pp2
       WHERE pp.policy_id = par_policy_id
         AND pp2.policy_id = pp.prev_ver_id;
    
      par_premium_raised_out := par_premium_delta_out IS NOT NULL AND par_premium_delta_out > 0;
    
      -- Дата окончания оценки риска
      par_premium_raised_date_out := pkg_policy.get_risk_pricing_end_date(par_policy_id => par_policy_id);
    
      BEGIN
        SELECT addendum_note
          INTO par_addendum_note
          FROM as_assured_underwr au
              ,as_asset           aa
              ,as_assured         aas
         WHERE au.as_assured_id = aas.as_assured_id
           AND aa.p_policy_id = par_policy_id
           AND aa.as_asset_id = aas.as_assured_id;
      EXCEPTION
        WHEN no_data_found THEN
          par_addendum_note := NULL;
      END;
    
      RETURN TRUE;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN FALSE;
    END;
  END get_underwriting_data;

  FUNCTION get_barcode_for_policy(par_policy_id p_policy.policy_id%TYPE) RETURN t_barcode_string IS
    v_barcode t_barcode_string;
  BEGIN
  
    SELECT decode(barcode_num, NULL, NULL, '*' || barcode_num || '*')
      INTO v_barcode
      FROM bso
     WHERE bso_id = pkg_barcode.get_bso_id_by_policy_id(par_policy_id);
  
    RETURN v_barcode;
  EXCEPTION
    WHEN no_data_found THEN
      RETURN NULL;
  END get_barcode_for_policy;

  PROCEDURE print_barcode(par_policy_id NUMBER) IS
    v_barcode VARCHAR2(4000);
  BEGIN
    v_barcode := get_barcode_for_policy(par_policy_id => par_policy_id);
  
    IF v_barcode IS NOT NULL
       AND doc.get_last_doc_status_brief(par_policy_id) NOT IN ('B2B_PENDING', 'PROJECT')
    THEN
      set_font(par_size        => 28
              ,par_style       => gc_style_regular
              ,par_font_family => gc_barcode_font_family_code39);
      plpdf.printcell(p_h => -1, p_txt => v_barcode, p_align => 'R', p_ln => 1);
    END IF;
  
  END print_barcode;

  /*
    Процедура печатает надпись Черновик для статусов Ожидает подтверждение из B2B и Проект
  */
  PROCEDURE print_draft(par_status doc_status_ref.name%TYPE) IS
  BEGIN
    IF par_status IN ('Ожидает подтверждения из B2B', 'Проект')
    THEN
      set_font(par_style => gc_style_bold, par_color => gc_color_orange, par_size => 80);
      plpdf.printtext(p_x => 50, p_y => 150, p_txt => 'Черновик');
    END IF;
  END print_draft;

  PROCEDURE print_info_element
  (
    par_element_name  VARCHAR2
   ,par_element_value VARCHAR2
   ,par_height        NUMBER DEFAULT gc_default_line_height
   ,par_clipping      NUMBER DEFAULT gc_default_no_clipping
  ) IS
  BEGIN
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_w        => gv_default_elem_header_width
                            ,p_txt      => upper(par_element_name)
                            ,p_h        => par_height
                            ,p_ln       => 0
                            ,p_clipping => par_clipping);
    set_font;
    plpdf.printmultilinecell(p_txt      => par_element_value
                            ,p_h        => par_height
                            ,p_clipping => par_clipping);
  END print_info_element;

  PROCEDURE print_mark
  (
    par_question_text  VARCHAR2
   ,par_mark_index     INTEGER
   ,par_relative_width NUMBER DEFAULT 0.8
   ,par_variant_texts  tt_one_col DEFAULT tt_one_col('Да', 'Нет')
   ,par_height         INTEGER DEFAULT gc_default_line_height
   ,par_clipping       NUMBER DEFAULT gc_default_no_clipping
   ,par_ln             INTEGER DEFAULT 1
  ) IS
    v_mark_states t_number_type;
  BEGIN
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_txt      => par_question_text
                            ,p_w        => plpdf.getpagespace * par_relative_width
                            ,p_h        => par_height
                            ,p_ln       => 0
                            ,p_clipping => par_clipping);
  
    assert_deprecated(par_variant_texts IS NULL
                     ,'Варианты ответов должны быть заданы');
    blank_cell(par_width => 10);
    FOR i IN 1 .. par_variant_texts.count
    LOOP
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => CASE
                                  WHEN par_mark_index = i THEN
                                   gc_rect_marked
                                  ELSE
                                   gc_rect_unmarked
                                END);
    
      plpdf.printcell(p_w => 5, p_ln => 0, p_h => par_height, p_clipping => par_clipping);
      plpdf.printcell(p_h        => par_height
                     ,p_w        => plpdf.gettextwidth(par_variant_texts(i)) + 5
                     ,p_txt      => par_variant_texts(i)
                     ,p_ln       => CASE
                                      WHEN i = par_variant_texts.count THEN
                                       par_ln
                                      ELSE
                                       0
                                    END
                     ,p_clipping => par_clipping);
    END LOOP;
  
  END print_mark;

  FUNCTION get_passport(par_contact_id NUMBER) RETURN VARCHAR2 IS
    v_passport VARCHAR2(4000);
  BEGIN
    BEGIN
      v_passport := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_active_ident_doc_id(par_contact_id) --get_primary_doc_id
                                                                  ,REPLACE('<#TYPE_DESC>: <#DOC_SERNUM> Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>'
                                                                          ,'Паспорт гражданина РФ'
                                                                          ,'Паспорт'));
    EXCEPTION
      WHEN no_data_found THEN
        NULL;
    END;
    RETURN v_passport;
  END get_passport;

  /*
    Капля П.
    Печать контактной информации в стандартном виде
    используется в формочках с оранживими надписями
  */
  PROCEDURE print_contact_info
  (
    par_contact_info          t_contact_summary
   ,par_print_blanks_for_null BOOLEAN DEFAULT FALSE
   ,par_height                NUMBER DEFAULT gc_default_line_height + 1
   ,par_clipping              NUMBER DEFAULT gc_default_no_clipping
   ,par_print_citizenship_inn BOOLEAN DEFAULT FALSE
  ) IS
    v_fio             VARCHAR2(4000);
    v_birth_date      VARCHAR2(1000);
    v_passport        VARCHAR2(4000);
    v_letters_address cn_address.name%TYPE;
    v_const_address   cn_address.name%TYPE;
    v_phone_number    VARCHAR2(4000);
    v_home_number     VARCHAR2(4000);
    v_mobile_number   VARCHAR2(4000);
  
    c_contact_exists CONSTANT BOOLEAN := par_contact_info.contact_id IS NOT NULL;
  
    v_rpad_length PLS_INTEGER;
    c_phone_length CONSTANT PLS_INTEGER := 29;
    v_inn cn_contact_ident.id_value%TYPE;
  
  BEGIN
  
    IF c_contact_exists
    THEN
      v_fio             := par_contact_info.fio;
      v_birth_date      := to_char(par_contact_info.date_of_birth, 'dd.mm.yyyy" г."');
      v_passport        := get_passport(par_contact_info.contact_id);
      v_letters_address := pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_letters_address_id(par_contact_info.contact_id)
                                                                    ,pkg_contact_rep_utils.gc_address_name);
      v_const_address   := pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_last_active_address_id(par_contact_info.contact_id
                                                                                                                     ,'CONST')
                                                                    ,pkg_contact_rep_utils.gc_address_name);
      v_phone_number    := pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(par_contact_info.contact_id));
      v_home_number     := pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(par_contact_info.contact_id
                                                                                                                      ,'HOME'));
      v_mobile_number   := pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(par_contact_info.contact_id
                                                                                                                      ,'MOBIL'));
    
      v_inn := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_last_doc_by_type(par_contact_info.contact_id
                                                                                                        ,'INN')
                                                             ,'<DOC_NUM>');
    ELSIF par_print_blanks_for_null
    THEN
      set_font;
      v_rpad_length     := trunc((plpdf.getpagespace - gv_default_elem_header_width) /
                                 plpdf.gettextwidth('_')) - 2;
      v_birth_date      := '_____._______________.__________';
      v_fio             := rpad('_', v_rpad_length, '_');
      v_passport        := rpad('_', v_rpad_length, '_') || gc_new_line ||
                           rpad('_', v_rpad_length, '_');
      v_letters_address := rpad('_', v_rpad_length, '_') || gc_new_line ||
                           rpad('_', v_rpad_length, '_');
      v_const_address   := rpad('_', v_rpad_length, '_') || gc_new_line ||
                           rpad('_', v_rpad_length, '_');
      v_phone_number    := rpad('_', v_rpad_length, '_');
      v_home_number     := rpad('_', c_phone_length, '_');
      v_mobile_number   := rpad('_', c_phone_length, '_');
      v_inn             := rpad('_', 20, '_');
    END IF;
  
    print_info_element(par_element_name  => 'Ф.И.О.'
                      ,par_element_value => v_fio
                      ,par_height        => par_height
                      ,par_clipping      => par_clipping);
    print_info_element(par_element_name  => 'ДАТА РОЖДЕНИЯ'
                      ,par_element_value => v_birth_date
                      ,par_height        => par_height
                      ,par_clipping      => par_clipping);
  
    print_mark(par_question_text  => 'ПОЛ'
              ,par_mark_index     => CASE par_contact_info.gender
                                       WHEN 'MALE' THEN
                                        1
                                       WHEN 'FEMALE' THEN
                                        2
                                       ELSE
                                        NULL
                                     END
              ,par_variant_texts  => tt_one_col('мужской', 'женский')
              ,par_relative_width => 0.45
              ,par_height         => par_height
              ,par_clipping       => par_clipping);
  
    print_info_element(par_element_name  => 'ДОКУМЕНТ, УДОСТОВЕРЯЮЩИЙ ЛИЧНОСТЬ'
                      ,par_element_value => v_passport
                      ,par_height        => par_height
                      ,par_clipping      => par_clipping);
  
    print_info_element(par_element_name  => 'АДРЕС ПОЧТОВЫЙ'
                      ,par_element_value => v_letters_address
                      ,par_height        => par_height
                      ,par_clipping      => par_clipping);
    print_info_element(par_element_name  => 'АДРЕС РЕГИСТРАЦИИ'
                      ,par_element_value => v_const_address
                      ,par_height        => par_height
                      ,par_clipping      => par_clipping);
    /*
    print_info_element(par_element_name  => 'КОНТАКТНЫЙ ТЕЛЕФОН'
                      ,par_element_value => v_phone_number
                      ,par_height        => par_height
                      ,par_clipping      => par_clipping);
    */
    set_font(par_style => gc_style_bold);
    plpdf.printcell(p_w        => gv_default_elem_header_width * 0.8
                   ,p_txt      => upper('ТЕЛЕФОНЫ')
                   ,p_h        => par_height
                   ,p_ln       => 0
                   ,p_clipping => par_clipping);
    set_font;
    plpdf.printcell(p_txt      => 'Домашний:'
                   ,p_h        => par_height
                   ,p_clipping => par_clipping
                   ,p_ln       => 0
                   ,p_w        => plpdf.gettextwidth('Домашний:') + 2);
  
    plpdf.printcell(p_txt      => v_home_number
                   ,p_h        => par_height
                   ,p_clipping => par_clipping
                   ,p_ln       => 0
                   ,p_w        => plpdf.gettextwidth(rpad('0', c_phone_length, '0')) + 2);
  
    plpdf.printcell(p_txt      => 'Мобильный:'
                   ,p_h        => par_height
                   ,p_clipping => par_clipping
                   ,p_ln       => 0
                   ,p_w        => plpdf.gettextwidth('Мобильный:') + 2);
  
    plpdf.printcell(p_txt      => v_mobile_number
                   ,p_h        => par_height
                   ,p_clipping => par_clipping
                   ,p_ln       => 1
                   ,p_w        => plpdf.gettextwidth(rpad('0', c_phone_length, '0')));
  
    IF par_print_citizenship_inn
    THEN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w        => gv_default_elem_header_width * 0.8
                     ,p_txt      => upper('ГРАЖДАНСТВО:')
                     ,p_h        => par_height
                     ,p_ln       => 0
                     ,p_clipping => par_clipping);
      set_font;
    
      -- 40 - лдина самого длинного названия страны из справочника
      plpdf.printmultilinecell(p_w        => plpdf.gettextwidth(rpad('0', 40, '0'))
                              ,p_txt      => par_contact_info.country_birth_name
                              ,p_h        => par_height
                              ,p_ln       => 0
                              ,p_clipping => par_clipping);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w        => plpdf.gettextwidth(rpad('0', 10, '0'))
                     ,p_txt      => 'ИНН:'
                     ,p_h        => par_height
                     ,p_ln       => 0
                     ,p_clipping => par_clipping);
      set_font;
    
      plpdf.printcell(p_txt => v_inn, p_h => par_height, p_ln => 1, p_clipping => par_clipping);
    
    END IF;
  
  END print_contact_info;

  FUNCTION get_additional_citizenships(par_contact_id NUMBER) RETURN VARCHAR2 IS
    v_citizenships  pkg_contact_object.tt_contact_country_list;
    v_list          tt_one_col := tt_one_col();
    v_result_string VARCHAR2(4000);
  BEGIN
    v_citizenships := pkg_contact_object.get_contact_add_citizenship(par_contact_id);
    IF v_citizenships IS NOT NULL
       AND v_citizenships.count > 0
    THEN
      FOR i IN 1 .. v_citizenships.count
      LOOP
        v_list.extend;
        v_list(v_list.last) := v_citizenships(i).country_name;
      END LOOP;
      v_result_string := pkg_utils.get_aggregated_string(v_list, ', ');
    END IF;
    RETURN v_result_string;
  END get_additional_citizenships;

  FUNCTION get_foreign_residencies(par_contact_id NUMBER) RETURN VARCHAR2 IS
    v_residencies   pkg_contact_object.tt_contact_country_list;
    v_list          tt_one_col := tt_one_col();
    v_result_string VARCHAR2(4000);
  BEGIN
    v_residencies := pkg_contact_object.get_contact_residency(par_contact_id);
    IF v_residencies IS NOT NULL
       AND v_residencies.count > 0
    THEN
      FOR i IN 1 .. v_residencies.count
      LOOP
        v_list.extend;
        v_list(v_list.last) := v_residencies(i).country_name;
      END LOOP;
      v_result_string := pkg_utils.get_aggregated_string(v_list, ', ');
    END IF;
    RETURN v_result_string;
  END get_foreign_residencies;

  PROCEDURE print_insuree_info
  (
    par_contact_info          t_contact_summary
   ,par_print_blanks_for_null BOOLEAN DEFAULT FALSE
   ,par_version_num           PLS_INTEGER
  ) IS
    v_has_citizenship          NUMBER := NULL;
    v_citizenship_string       VARCHAR2(32767);
    v_has_foreign_residency    NUMBER := NULL;
    v_foreign_residency_string VARCHAR2(32767);
    v_migration_card_info      VARCHAR2(4000);
    v_is_rpdl_flag             NUMBER := NULL;
    v_is_ipdl_flag             NUMBER := NULL;
  BEGIN
    print_default_chapter('СТРАХОВАТЕЛЬ');
  
    IF par_version_num IN (gc_contact_info_ver1)
    THEN
      print_contact_info(par_contact_info, par_print_blanks_for_null);
    
      set_font(par_style => gc_style_bold);
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_public_contact
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END
                ,par_height        => gc_default_line_height + 1);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END
                ,par_height        => gc_default_line_height + 1);
    ELSIF par_version_num IN (gc_contact_info_ver2)
    THEN
      print_contact_info(par_contact_info          => par_contact_info
                        ,par_print_blanks_for_null => par_print_blanks_for_null
                        ,par_print_citizenship_inn => TRUE);
    
      plpdf.linebreak(gc_default_line_height + 1);
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_txt      => 'ДЛЯ СТРАХОВАТЕЛЕЙ – ГРАЖДАН РОССИЙСКОЙ ФЕДЕРАЦИИ:'
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
    
      IF nvl(par_contact_info.country_birth_name, 'Россия') = 'Россия'
      THEN
        v_has_citizenship          := CASE par_contact_info.has_additional_citizenship
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END;
        v_citizenship_string       := get_additional_citizenships(par_contact_info.contact_id);
        v_has_foreign_residency    := CASE par_contact_info.has_foreign_residency
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END;
        v_foreign_residency_string := get_foreign_residencies(par_contact_info.contact_id);
        v_is_rpdl_flag             := CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END;
      
      ELSE
        v_migration_card_info := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_last_doc_by_type(par_contact_info.contact_id
                                                                                                                          ,'MIGRATION_CARD')
                                                                               ,'<#DOC_SERNUM> Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>');
        v_is_ipdl_flag        := CASE par_contact_info.is_public_contact
                                   WHEN 1 THEN
                                    1
                                   WHEN 0 THEN
                                    2
                                   ELSE
                                    2
                                 END;
      END IF;
    
      print_mark(par_question_text  => 'ИМЕЕТ ЛИ СТРАХОВАТЕЛЬ ГРАЖДАНСТВО ИНОГО ГОСУДАРСТВА?'
                ,par_mark_index     => v_has_citizenship
                ,par_height         => gc_default_line_height + 1
                ,par_relative_width => 0.5
                ,par_ln             => 0);
    
      plpdf.printmultilinecell(p_txt      => v_citizenship_string
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      print_mark(par_question_text  => 'ИМЕЕТ ЛИ СТРАХОВАТЕЛЬ ВИД НА ЖИТЕЛЬСТВО В ИНОСТРАННОМ ГОСУДАРСТВЕ?'
                ,par_mark_index     => v_has_foreign_residency
                ,par_height         => gc_default_line_height + 1
                ,par_relative_width => 0.5
                ,par_ln             => 0);
    
      plpdf.printmultilinecell(p_txt      => v_foreign_residency_string
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => v_is_rpdl_flag
                ,par_height        => gc_default_line_height + 1);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_txt      => 'ДЛЯ СТРАХОВАТЕЛЕЙ – ИНОСТРАННЫХ ГРАЖДАН И ЛИЦ БЕЗ ГРАЖДАНСТВА:'
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
    
      print_info_element('СВЕДЕНИЯ О МИГРАЦИОННОЙ КАРТЕ/СВЕДЕНИЯ О ДОКУМЕНТЕ, ПОДТВЕРЖДАЮЩЕМ ПРАВО НА ПРЕБЫВАНИЕ (ПРОЖИВАНИЕ) В РФ:'
                        ,v_migration_card_info);
    
      plpdf.linebreak(p_h => (gc_default_line_height + 1) * 2);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => v_is_ipdl_flag
                ,par_height        => gc_default_line_height + 1);
    
    END IF;
  
  END print_insuree_info;

  PROCEDURE print_assured_info
  (
    par_contact_info          t_contact_summary
   ,par_print_blanks_for_null BOOLEAN DEFAULT FALSE
   ,par_version_num           PLS_INTEGER
  ) IS
    v_has_citizenship          NUMBER := NULL;
    v_citizenship_string       VARCHAR2(32767);
    v_has_foreign_residency    NUMBER := NULL;
    v_foreign_residency_string VARCHAR2(32767);
    v_migration_card_info      VARCHAR2(4000);
    v_is_rpdl_flag             NUMBER := NULL;
    v_is_ipdl_flag             NUMBER := NULL;
  BEGIN
    print_default_chapter(upper('ЗАСТРАХОВАННОЕ ЛИЦО'));
  
    IF par_version_num IN (gc_contact_info_ver1)
    THEN
      print_contact_info(par_contact_info, par_print_blanks_for_null);
    
      set_font(par_style => gc_style_bold);
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_public_contact
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END
                ,par_height        => gc_default_line_height + 1);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END
                ,par_height        => gc_default_line_height + 1);
    ELSIF par_version_num IN (gc_contact_info_ver2)
    THEN
      IF nvl(par_contact_info.country_birth_name, 'Россия') = 'Россия'
      THEN
        v_has_citizenship          := CASE par_contact_info.has_additional_citizenship
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END;
        v_citizenship_string       := get_additional_citizenships(par_contact_info.contact_id);
        v_has_foreign_residency    := CASE par_contact_info.has_foreign_residency
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END;
        v_foreign_residency_string := get_foreign_residencies(par_contact_info.contact_id);
        v_is_rpdl_flag             := CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         2
                                      END;
      
      ELSE
        v_migration_card_info := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_last_doc_by_type(par_contact_info.contact_id
                                                                                                                          ,'MIGRATION_CARD')
                                                                               ,'<#DOC_SERNUM> Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>');
        v_is_ipdl_flag        := CASE par_contact_info.is_public_contact
                                   WHEN 1 THEN
                                    1
                                   WHEN 0 THEN
                                    2
                                   ELSE
                                    2
                                 END;
      END IF;
    
      print_contact_info(par_contact_info          => par_contact_info
                        ,par_print_blanks_for_null => par_print_blanks_for_null
                        ,par_print_citizenship_inn => TRUE);
    
      plpdf.linebreak(gc_default_line_height + 1);
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_txt      => 'ДЛЯ ЗАСТРАХОВАННЫХ – ГРАЖДАН РОССИЙСКОЙ ФЕДЕРАЦИИ:'
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
    
      print_mark(par_question_text  => 'ИМЕЕТ ЛИ ЗАСТРАХОВАННЫЙ ГРАЖДАНСТВО ИНОГО ГОСУДАРСТВА?'
                ,par_mark_index     => v_has_citizenship
                ,par_height         => gc_default_line_height + 1
                ,par_relative_width => 0.5
                ,par_ln             => 0);
    
      plpdf.printmultilinecell(p_txt      => v_citizenship_string
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      print_mark(par_question_text  => 'ИМЕЕТ ЛИ ЗАСТРАХОВАННЫЙ ВИД НА ЖИТЕЛЬСТВО В ИНОСТРАННОМ ГОСУДАРСТВЕ?'
                ,par_mark_index     => v_has_foreign_residency
                ,par_height         => gc_default_line_height + 1
                ,par_relative_width => 0.5
                ,par_ln             => 0);
    
      plpdf.printmultilinecell(p_txt      => v_foreign_residency_string
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => v_is_rpdl_flag
                ,par_height        => gc_default_line_height + 1);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_txt      => 'ДЛЯ ЗАСТРАХОВАННЫХ – ИНОСТРАННЫХ ГРАЖДАН И ЛИЦ БЕЗ ГРАЖДАНСТВА:'
                              ,p_h        => gc_default_line_height + 1
                              ,p_clipping => gc_default_no_clipping
                              ,p_ln       => 1);
    
      print_info_element('СВЕДЕНИЯ О МИГРАЦИОННОЙ КАРТЕ/СВЕДЕНИЯ О ДОКУМЕНТЕ, ПОДТВЕРЖДАЮЩЕМ ПРАВО НА ПРЕБЫВАНИЕ (ПРОЖИВАНИЕ) В РФ:'
                        ,v_migration_card_info);
    
      plpdf.linebreak(p_h => (gc_default_line_height + 1) * 2);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => v_is_ipdl_flag
                ,par_height        => gc_default_line_height + 1);
    
    END IF;
  END print_assured_info;

  PROCEDURE print_benificiary_table
  (
    par_policy_id                NUMBER
   ,par_max_number_of_empty_rows NUMBER DEFAULT 3
  ) IS
  BEGIN
    delete_row_print_cache;
  
    set_font;
  
    gv_widths(1) := plpdf.getpagespace / 6 * 2;
    gv_widths(2) := plpdf.getpagespace / 6;
    gv_widths(3) := plpdf.getpagespace / 6 * 2;
    gv_widths(4) := plpdf.getpagespace / 6;
  
    gv_styles(1) := 'B';
    gv_styles(2) := 'B';
    gv_styles(3) := 'B';
    gv_styles(4) := 'B';
  
    gv_borders(1) := '1';
    gv_borders(2) := '1';
    gv_borders(3) := '1';
    gv_borders(4) := '1';
  
    gv_datas(1) := 'Ф.И.О.';
    gv_datas(2) := 'ДАТА РОЖДЕНИЯ';
    gv_datas(3) := 'РОДСТВЕННЫЕ И/ИЛИ ИНЫЕ ОТНОШЕНИЯ С ЗАСТРАХОВАННЫМ';
    gv_datas(4) := 'ДОЛЯ, %';
  
    gv_aligns(1) := 'C';
    gv_aligns(2) := 'C';
    gv_aligns(3) := 'C';
    gv_aligns(4) := 'C';
  
    row_print2(par_h => 3);
  
    gv_styles(1) := NULL;
    gv_styles(2) := NULL;
    gv_styles(3) := NULL;
    gv_styles(4) := NULL;
  
    gv_aligns(1) := 'L';
  
    FOR rec IN (SELECT *
                  FROM (SELECT c.obj_name_orig
                              ,to_char(cp.date_of_birth, 'dd.mm.yyyy') date_of_birth
                              ,crt.relationship_dsc
                              ,to_char(ab.value) AS VALUE
                              ,rownum AS rn
                          FROM as_asset           aa
                              ,as_beneficiary     ab
                              ,contact            c
                              ,cn_contact_rel     cr
                              ,t_contact_rel_type crt
                              ,cn_person          cp
                         WHERE aa.p_policy_id = par_policy_id
                           AND aa.as_asset_id = ab.as_asset_id
                           AND ab.contact_id = c.contact_id
                           AND ab.cn_contact_rel_id = cr.id
                           AND cr.relationship_type = crt.id
                           AND c.contact_id = cp.contact_id(+)) t
                      ,(SELECT LEVEL AS rn2 FROM dual CONNECT BY LEVEL <= par_max_number_of_empty_rows)
                 WHERE rn2 = rn(+))
    LOOP
      gv_datas(1) := rec.obj_name_orig;
      gv_datas(2) := rec.date_of_birth;
      gv_datas(3) := rec.relationship_dsc;
      gv_datas(4) := rec.value;
    
      row_print2(par_h => 3);
    END LOOP;
  END print_benificiary_table;

  PROCEDURE print_periods
  (
    par_title   VARCHAR2
   ,par_pol_sum t_policy_summary
   ,par_height  NUMBER DEFAULT gc_default_line_height + 1
  ) IS
  BEGIN
    set_font;
  
    delete_row_print_cache;
    gv_widths(1) := plpdf.getpagespace / 3;
    gv_widths(2) := plpdf.getpagespace / 3;
    gv_widths(3) := plpdf.getpagespace / 3;
  
    gv_datas(1) := par_title || ': ' || par_pol_sum.policy_period_desc;
    gv_datas(2) := 'НАЧАЛО: ' || to_char(par_pol_sum.start_date, 'hh24:mi dd.mm.yyyy');
    gv_datas(3) := 'ОКОНЧАНИЕ: ' || to_char(par_pol_sum.end_date, 'hh24:mi dd.mm.yyyy');
  
    row_print2(par_h => par_height);
  
  END print_periods;

  PROCEDURE print_currency
  (
    par_policy_summary pkg_rep_plpdf.t_policy_summary
   ,par_box_size       NUMBER DEFAULT 2
   ,par_box_delta_y    NUMBER DEFAULT 1
  ) IS
    v_text VARCHAR2(500);
  BEGIN
    /*    gv_chapter_num := gv_chapter_num + 1;
        set_font(par_style => pkg_rep_plpdf.gc_style_bold);
        v_text := gv_chapter_num || '. ВАЛЮТА ДОГОВОРА:';
        plpdf.printcell(p_h        => gc_default_line_height
                       ,p_txt      => v_text
                       ,p_w        => plpdf.gettextwidth(v_text) + 5
                       ,p_border   => 'LTB'
                       ,p_clipping => pkg_rep_plpdf.gc_default_no_clipping
                       ,p_ln       => 0);
    */
    gv_chapter_num := gv_chapter_num + 1;
    set_font(par_size  => gv_default_font_size + 1
            ,par_style => gc_style_bold
            ,par_color => gc_color_orange);
    v_text := gv_chapter_num || '. ' || 'ВАЛЮТА ДОГОВОРА:';
    --    v_width := ;
  
    plpdf.printmultilinecell(p_txt   => v_text
                            ,p_align => 'L'
                            ,p_w     => plpdf.gettextwidth(v_text) + 5
                            ,p_h     => -1
                            ,p_ln    => 0);
    set_font;
  
    FOR rec IN (SELECT f.name
                      ,nvl2(lead(1) over(ORDER BY f.fund_id DESC), 0, 1) is_last
                      ,decode(f.brief
                             ,par_policy_summary.fund_brief
                             ,pkg_rep_plpdf.gc_rect_marked
                             ,pkg_rep_plpdf.gc_rect_unmarked) marked
                  FROM t_product       p
                      ,t_prod_currency pc
                      ,fund            f
                 WHERE p.product_id = pc.product_id
                   AND pc.currency_id = f.fund_id
                   AND p.product_id = par_policy_summary.product_id
                 ORDER BY pc.is_default DESC NULLS LAST
                         ,f.fund_id     DESC)
    LOOP
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => rec.marked);
    
      plpdf.printcell(p_border => 0, p_w => 5, p_ln => 0);
    
      plpdf.printcell(p_h      => -1
                     ,p_w      => plpdf.gettextwidth(rec.name) + 5
                     ,p_txt    => rec.name
                     ,p_border => 0
                     ,p_ln     => 0);
    END LOOP;
  
    plpdf.printcell(p_ln       => 1
                   ,p_border   => /*'BTR'*/ 0
                   ,p_clipping => pkg_rep_plpdf.gc_default_no_clipping);
  
  END print_currency;

  /*
    Капля П.
    Печать таблицы выкупных сумм
    Возможно потребует доработки
  */
  PROCEDURE fill_cash_surr_table(par_cursor typ_cur_cash_surr_table) IS
    v_width NUMBER := plpdf.getpagespace / 7;
    rec     typ_cach_surr_rec;
  
    PROCEDURE theader IS
      v_datas_header  plpdf_type.t_row_datas; -- Array of datas
      v_styles_header plpdf_type.t_row_styles; -- Array of styles
    BEGIN
      v_datas_header(1) := upper('ГОД ДЕЙСТВИЯ ДОГОВОРА');
      v_datas_header(2) := upper('НОМЕР ПЕРИОДА');
      v_datas_header(3) := upper('НАЧАЛО');
      v_datas_header(4) := upper('ОКОНЧАНИЕ');
      v_datas_header(5) := upper('РЕЗЕРВ');
      v_datas_header(6) := upper('% от РЕЗЕРВА');
      v_datas_header(7) := upper('ГАРАНТИРОВАННАЯ ВЫКУПНАЯ СУММА, РУБ.');
    
      v_styles_header(1) := gc_style_bold;
      v_styles_header(2) := gc_style_bold;
      v_styles_header(3) := gc_style_bold;
      v_styles_header(4) := gc_style_bold;
      v_styles_header(5) := gc_style_bold;
      v_styles_header(6) := gc_style_bold;
      v_styles_header(7) := gc_style_bold;
    
      plpdf.row_print2(p_data    => v_datas_header
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => v_styles_header
                      ,p_maxline => gv_maxlines);
    END theader;
  BEGIN
  
    delete_row_print_cache;
  
    FOR i IN 1 .. 7
    LOOP
      gv_borders(i) := 1;
      gv_widths(i) := v_width;
      gv_aligns(i) := 'C';
    END LOOP;
  
    theader;
  
    LOOP
      FETCH par_cursor
        INTO rec;
      EXIT WHEN par_cursor%NOTFOUND;
    
      gv_datas(1) := rec.ins_year_formula;
      gv_datas(2) := rec.period_number;
      gv_datas(3) := to_char(rec.period_start, 'dd.mm.yyyy');
      gv_datas(4) := to_char(rec.period_end, 'dd.mm.yyyy');
      gv_datas(5) := pkg_rep_utils.to_money_sep(rec.reserve_value);
      gv_datas(6) := to_char(rec.reserve_proc) || '%';
      gv_datas(7) := pkg_rep_utils.to_money_sep(rec.cash_surr_value);
    
      IF plpdf.checkpagebreak(plpdf.getrowheight(p_data    => gv_datas
                                                ,p_width   => gv_widths
                                                ,p_maxline => gv_maxlines))
      THEN
        theader;
      END IF;
    
      plpdf.row_print2(p_data     => gv_datas
                      ,p_border   => gv_borders
                      ,p_width    => gv_widths
                      ,p_align    => gv_aligns
                      ,p_style    => gv_styles
                      ,p_clipping => 0
                      ,p_h        => 4
                      ,p_maxline  => gv_maxlines);
    END LOOP;
  END fill_cash_surr_table;

  PROCEDURE print_cash_surr_table
  (
    par_policy_id      p_policy.policy_id%TYPE
   ,par_lob_line_brief t_lob_line.brief%TYPE
  ) IS
    v_standard_cur typ_cur_cash_surr_table;
  BEGIN
  
    OPEN v_standard_cur FOR
      SELECT d.start_cash_surr_date AS period_start
            ,d.end_cash_surr_date AS period_end
            ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
            ,d.value AS cash_surr_value
            ,ROUND(d.ft * 100, 2) AS reserve_proc
            ,coalesce(greatest(d.reserve_value, 0), ROUND(d.value / nullif(d.ft, 0), 2), 0) reserve_value
            ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
        FROM policy_cash_surr   p
            ,policy_cash_surr_d d
            ,p_pol_header       ph
            ,t_lob_line         ll
       WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
         AND p.policy_id = par_policy_id
         AND p.pol_header_id = ph.policy_header_id
         AND p.t_lob_line_id = ll.t_lob_line_id
         AND ll.brief = par_lob_line_brief
       ORDER BY d.start_cash_surr_date;
  
    fill_cash_surr_table(v_standard_cur);
  
  END print_cash_surr_table;

  /*
    Функция возвращает ID темплейта по дескрипшену
  */
  FUNCTION get_template_id(par_desc plpdf_template.descr%TYPE) RETURN plpdf_template.id%TYPE IS
    v_id plpdf_template.id%TYPE;
  BEGIN
    SELECT id INTO v_id FROM plpdf_template WHERE descr = par_desc;
  
    RETURN v_id;
  EXCEPTION
    WHEN no_data_found THEN
      raise_application_error(-20001
                             ,'Шаблон отчета ' || par_desc || ' не найден!');
  END get_template_id;

  PROCEDURE row_print2
  (
    par_datas    plpdf_type.t_row_datas DEFAULT gv_datas
   ,par_borders  plpdf_type.t_row_borders DEFAULT gv_borders
   ,par_widths   plpdf_type.t_row_widths DEFAULT gv_widths
   ,par_aligns   plpdf_type.t_row_aligns DEFAULT gv_aligns
   ,par_styles   plpdf_type.t_row_styles DEFAULT gv_styles
   ,par_maxlines plpdf_type.t_row_maxlines DEFAULT gv_maxlines
   ,par_clipping NUMBER DEFAULT 0
   ,par_h        NUMBER DEFAULT 5
  ) IS
    v_elem_count PLS_INTEGER := par_datas.count;
  
    v_borders  plpdf_type.t_row_borders;
    v_aligns   plpdf_type.t_row_aligns;
    v_styles   plpdf_type.t_row_styles;
    v_maxlines plpdf_type.t_row_maxlines;
  BEGIN
  
    IF par_borders.count = 0
    THEN
      FOR i IN 1 .. v_elem_count
      LOOP
        v_borders(i) := NULL;
      END LOOP;
    END IF;
  
    IF par_borders.count = 0
    THEN
      FOR i IN 1 .. v_elem_count
      LOOP
        v_aligns(i) := NULL;
      END LOOP;
    END IF;
  
    IF par_borders.count = 0
    THEN
      FOR i IN 1 .. v_elem_count
      LOOP
        v_styles(i) := NULL;
      END LOOP;
    END IF;
  
    IF par_borders.count = 0
    THEN
      FOR i IN 1 .. v_elem_count
      LOOP
        v_maxlines(i) := NULL;
      END LOOP;
    END IF;
  
    plpdf.row_print2(p_data     => par_datas
                    ,p_border   => nvl(par_borders, v_borders)
                    ,p_width    => par_widths
                    ,p_align    => nvl(par_aligns, v_aligns)
                    ,p_style    => nvl(par_styles, v_styles)
                    ,p_maxline  => nvl(par_maxlines, v_maxlines)
                    ,p_clipping => par_clipping
                    ,p_h        => par_h);
  END row_print2;

  /*
    Процедура формирования полиса по продуктам Жизни
    Гармония жизни_2, Дети_2, Семья_2, Будущее_2
    по новым ПУ серии 414
  */
  PROCEDURE policy_life_414
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  
    v_policy_id    p_policy.policy_id%TYPE;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
    v_signer       typ_signer;
  
    gv_chapter_num PLS_INTEGER := 0;
  
    gv_application_number PLS_INTEGER := 2;
  
    v_text          VARCHAR2(4000);
    v_addendum_note VARCHAR2(2000);
  
    PROCEDURE set_title(par_text VARCHAR2) IS
    BEGIN
    
      set_font(par_size => 20, par_style => gc_style_bold, par_color => gc_color_orange);
      plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    END;
  
    PROCEDURE set_cotitle(par_text VARCHAR2) IS
    BEGIN
      set_font(par_size => 18, par_style => gc_style_bold, par_color => gc_color_orange);
      plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    END;
  
    PROCEDURE set_chapter(par_title VARCHAR2) IS
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
    
      set_font(par_size => 9, par_style => gc_style_bold, par_color => gc_color_orange);
      --plpdf.linebreak;
      plpdf.printcell(p_txt   => gv_chapter_num || '. ' || par_title
                     ,p_align => 'L'
                     ,p_h     => -1
                     ,p_ln    => 1);
      --plpdf.linebreak;
    END;
  
    PROCEDURE print_info_element
    (
      par_element_name  VARCHAR2
     ,par_element_value VARCHAR2
    ) IS
    BEGIN
      set_font(par_size => 8, par_style => gc_style_bold);
      plpdf.printcell(p_w   => trunc(plpdf.getpagewidth * 0.3)
                     ,p_txt => upper(par_element_name)
                     ,p_h   => -1
                     ,p_ln  => 0);
      set_font;
      plpdf.printmultilinecell(p_txt => par_element_value, p_h => -1);
    END print_info_element;
  
    /*
    FUNCTION get_passport(par_contact_id NUMBER) RETURN VARCHAR2 IS
      v_passport VARCHAR2(2000);
    BEGIN
      BEGIN
        v_passport := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(par_contact_id)
                                                                    ,REPLACE('<#TYPE_DESC>: <#DOC_SERNUM> Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>'
                                                                            ,'Паспорт гражданина РФ'
                                                                            ,'Паспорт'));
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
      RETURN v_passport;
    END get_passport;
    */
  
    FUNCTION get_next_payment_dates
    (
      par_start_date          DATE
     ,par_payment_terms_brief VARCHAR2
    ) RETURN VARCHAR2 IS
      v_dates              tt_one_col;
      v_number_of_payments t_payment_terms.number_of_payments%TYPE;
    BEGIN
    
      SELECT pt.number_of_payments
        INTO v_number_of_payments
        FROM t_payment_terms pt
       WHERE pt.brief = par_payment_terms_brief;
    
      SELECT to_char(ADD_MONTHS(par_start_date, (LEVEL - 1) * 12 / v_number_of_payments), 'dd.mm')
        BULK COLLECT
        INTO v_dates
        FROM dual
      CONNECT BY LEVEL <= v_number_of_payments;
    
      RETURN pkg_utils.get_aggregated_string(par_table => v_dates, par_separator => ', ');
    END;
  
    PROCEDURE print_product_lines_info(par_policy_id IN p_policy.policy_id%TYPE) IS
      v_total_premium VARCHAR2(100);
      v_admin_costs   NUMBER;
      vc_ins_amount_width CONSTANT NUMBER := 40;
      vc_fee_width        CONSTANT NUMBER := 40;
      v_text VARCHAR2(4000);
    
    BEGIN
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace - vc_fee_width - vc_ins_amount_width;
      gv_widths(2) := vc_fee_width;
      gv_widths(3) := vc_ins_amount_width;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_borders(1) := 0;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
    
      gv_styles(1) := NULL;
      gv_styles(2) := gc_style_italic;
      gv_styles(3) := gc_style_italic;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Гарантированная страховая сумма, ' || v_pol_sum.fund_short_name;
      gv_datas(3) := 'Страховая премия (страховой взнос), ' || v_pol_sum.fund_short_name;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_align   => gv_aligns
                      ,p_width   => gv_widths
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      -- Основная программа
      gv_datas(1) := upper('Основная программа:');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_borders(1) := 0;
      gv_borders(2) := 0;
      gv_borders(3) := 0;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_align   => gv_aligns
                      ,p_width   => gv_widths
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      -- Данные основной программы
      gv_borders(1) := 0;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      FOR rec IN (SELECT pl.description
                        ,pkg_rep_utils.to_money_sep(pc.fee) fee
                        ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                    FROM as_asset            aa
                        ,p_cover             pc
                        ,t_prod_line_option  plo
                        ,t_product_line      pl
                        ,t_product_line_type plt
                   WHERE aa.p_policy_id = par_policy_id
                     AND aa.as_asset_id = pc.as_asset_id
                     AND pc.t_prod_line_option_id = plo.id
                     AND plo.product_line_id = pl.id
                     AND pl.product_line_type_id = plt.product_line_type_id
                     AND plt.brief = 'RECOMMENDED'
                     AND pc.status_hist_id != pkg_cover.get_status_hist_id_del)
      LOOP
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := rec.fee;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END LOOP;
    
      -- Дополнительные программы
      gv_datas(1) := upper('ДОПОЛНИТЕЛЬНЫЕ ПРОГРАММЫ (СТРАХОВЫЕ РИСКИ):');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_borders(1) := 0;
      gv_borders(2) := 0;
      gv_borders(3) := 0;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_align   => gv_aligns
                      ,p_width   => gv_widths
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      -- Данные дополнительных программ
      gv_borders(1) := 0;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      FOR rec IN (SELECT pl.description
                        ,pkg_rep_utils.to_money_sep(pc.fee) fee
                        ,CASE pl.description
                           WHEN 'Защита страховых взносов рассчитанная по основной программе' THEN
                            'X'
                           ELSE
                            pkg_rep_utils.to_money_sep(pc.ins_amount)
                         END ins_amount
                    FROM as_asset            aa
                        ,p_cover             pc
                        ,t_prod_line_option  plo
                        ,t_product_line      pl
                        ,t_product_line_type plt
                   WHERE aa.p_policy_id = par_policy_id
                     AND aa.as_asset_id = pc.as_asset_id
                     AND pc.t_prod_line_option_id = plo.id
                     AND plo.product_line_id = pl.id
                     AND pl.product_line_type_id = plt.product_line_type_id
                     AND plt.brief != 'RECOMMENDED'
                     AND pc.status_hist_id != pkg_cover.get_status_hist_id_del
                     AND (plo.brief IS NULL OR upper(plo.brief) NOT LIKE 'ADM_C%'))
      LOOP
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := rec.fee;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END LOOP;
    
      /*
      ИТОГО СТРАХОВАЯ ПРЕМИЯ (ВЗНОС) ПО ДОГОВОРУ
      */
      v_text := '(уплачивается ' || v_pol_sum.payment_terms || '):';
      plpdf.printcell(p_align => 'R'
                     ,p_w     => plpdf.getpagespace - vc_ins_amount_width -
                                 plpdf.gettextwidth(p_s => v_text) - 10
                     ,p_txt   => upper('ИТОГО СТРАХОВАЯ ПРЕМИЯ(ВЗНОС) ПО ДОГОВОРУ')
                     ,p_ln    => 0);
    
      plpdf.printcell(p_txt    => v_text
                     ,p_ln     => 0
                     ,p_border => 0
                     ,p_w      => plpdf.gettextwidth(p_s => v_text) + 10);
    
      SELECT pkg_rep_utils.to_money_sep(nvl(SUM(pc.fee), 0)) fee
        INTO v_total_premium
        FROM as_asset            aa
            ,p_cover             pc
            ,t_prod_line_option  plo
            ,t_product_line      pl
            ,t_product_line_type plt
       WHERE aa.p_policy_id = par_policy_id
         AND aa.as_asset_id = pc.as_asset_id
         AND pc.t_prod_line_option_id = plo.id
         AND plo.product_line_id = pl.id
         AND pl.product_line_type_id = plt.product_line_type_id
         AND upper(plo.brief) NOT LIKE 'ADM_C%'
         AND pc.status_hist_id != pkg_cover.get_status_hist_id_del;
    
      set_font;
      plpdf.printcell(p_w      => vc_ins_amount_width
                     ,p_align  => 'C'
                     ,p_txt    => v_total_premium
                     ,p_border => 1
                     ,p_ln     => 1);
    
      /*
      АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ
      */
      IF v_pol_sum.payment_terms_brief = 'Единовременно'
      THEN
        v_text := '(уплачивается единовременно)';
      ELSE
        v_text := '(уплачивается один раз в год)';
      END IF;
    
      plpdf.printcell(p_align => 'R'
                     ,p_w     => plpdf.getpagespace - vc_ins_amount_width -
                                 plpdf.gettextwidth(p_s => v_text) - 10
                     ,p_txt   => upper('АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ')
                     ,p_ln    => 0);
    
      plpdf.printcell(p_txt    => v_text
                     ,p_ln     => 0
                     ,p_border => 0
                     ,p_w      => plpdf.gettextwidth(p_s => v_text) + 10);
    
      SELECT nvl(SUM(pc.fee), 0)
        INTO v_admin_costs
        FROM as_asset            aa
            ,p_cover             pc
            ,t_prod_line_option  plo
            ,t_product_line      pl
            ,t_product_line_type plt
       WHERE aa.p_policy_id = par_policy_id
         AND aa.as_asset_id = pc.as_asset_id
         AND pc.t_prod_line_option_id = plo.id
         AND plo.product_line_id = pl.id
         AND pl.product_line_type_id = plt.product_line_type_id
         AND plt.brief != 'RECOMMENDED'
         AND upper(plo.brief) LIKE 'ADM_C%'
         AND pc.status_hist_id != pkg_cover.get_status_hist_id_del;
    
      set_font;
      plpdf.printcell(p_w      => vc_ins_amount_width
                     ,p_txt    => pkg_rep_utils.to_money_sep(v_admin_costs)
                     ,p_border => 1
                     ,p_align  => 'C'
                     ,p_ln     => 1);
    
      plpdf.linebreak;
      plpdf.printcell(p_txt => 'Все банковские расходы, связанные с оплатой страховой премии (взноса),  оплачиваются Страхователем.'
                     ,p_ln  => 1);
    END print_product_lines_info;
  
    PROCEDURE print_programs_periods(par_policy_id IN p_policy.policy_id%TYPE) IS
      v_text  VARCHAR2(4000);
      v_width NUMBER := plpdf.getpagespace / 8;
    BEGIN
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := v_width * 3;
      gv_widths(2) := v_width;
      gv_widths(3) := v_width * 1.5;
      gv_widths(4) := v_width;
      gv_widths(5) := v_width * 1.5;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'L';
      gv_aligns(5) := 'C';
    
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := NULL;
      gv_styles(4) := gc_style_bold;
      gv_styles(5) := NULL;
    
      FOR rec IN (WITH main AS
                     (SELECT pl.description
                           ,pc.start_date
                           ,pc.end_date
                           ,CASE
                              WHEN plt.brief = 'RECOMMENDED' THEN
                               1
                              WHEN plo.brief = 'PRESENT_LIFE' THEN
                               3
                              ELSE
                               2
                            END AS group_num
                       FROM as_asset            aa
                           ,p_cover             pc
                           ,t_prod_line_option  plo
                           ,t_product_line      pl
                           ,t_product_line_type plt
                           ,t_product_ver_lob   pvl
                           ,t_lob               l
                      WHERE aa.p_policy_id = par_policy_id
                        AND aa.as_asset_id = pc.as_asset_id
                        AND pc.t_prod_line_option_id = plo.id
                        AND plo.product_line_id = pl.id
                        AND pl.product_ver_lob_id = pvl.t_product_ver_lob_id
                        AND pl.product_line_type_id = plt.product_line_type_id
                        AND pvl.lob_id = l.t_lob_id
                        AND plo.brief NOT LIKE 'Adm_Cost%'
                        AND pc.status_hist_id != pkg_cover.get_status_hist_id_del)
                    SELECT to_char(start_date, 'HH24:MI "часов" dd.mm.yyyy') AS start_date
                          ,to_char(end_date, 'HH24:MI "часов" dd.mm.yyyy') AS end_date
                          ,group_num
                          ,CAST(MULTISET (SELECT description
                                   FROM main m1
                                  WHERE m1.group_num = t.group_num
                                    AND m1.start_date = t.start_date
                                    AND m1.end_date = t.end_date
                                  ORDER BY description) AS tt_one_col) programs
                          ,COUNT(*) cn
                      FROM main t
                     GROUP BY group_num
                             ,start_date
                             ,end_date
                     ORDER BY group_num
                             ,MONTHS_BETWEEN(t.end_date, t.start_date) DESC)
      LOOP
        gv_datas(1) := upper('СРОК СТРАХОВАНИЯ');
        gv_datas(2) := upper('НАЧАЛО:');
        gv_datas(3) := rec.start_date;
        gv_datas(4) := upper('ОКОНЧАНИЕ:');
        gv_datas(5) := rec.end_date;
      
        gv_styles(1) := gc_style_bold;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
        IF rec.group_num = 1
        THEN
          IF rec.cn = 1
          THEN
            v_text := '(Основная программа:';
          ELSE
            v_text := '(Основные программы:';
          END IF;
        ELSE
          IF rec.cn = 1
          THEN
            v_text := '(Дополнительная программа:';
          ELSE
            v_text := '(Дополнительные программы:';
          END IF;
        END IF;
        gv_datas(1) := v_text || pkg_utils.get_aggregated_string(par_table     => rec.programs
                                                                ,par_separator => ', ') || ')';
      
        gv_datas(2) := NULL;
        gv_datas(3) := NULL;
        gv_datas(4) := NULL;
        gv_datas(5) := NULL;
      
        gv_styles(1) := NULL;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
      END LOOP;
    
    END print_programs_periods;
  
    PROCEDURE print_benificiaries(par_policy_id p_policy.policy_id%TYPE) IS
      v_width NUMBER := plpdf.getpagespace / 6;
    BEGIN
      set_font;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'Ф.И.О.';
      gv_datas(2) := 'ДАТА РОЖДЕНИЯ';
      gv_datas(3) := 'РОДСТВЕННЫЕ ОТНОШЕНИЯ';
      gv_datas(4) := 'ДОЛЯ';
    
      gv_widths(1) := 2 * v_width;
      gv_widths(2) := v_width;
      gv_widths(3) := 2 * v_width;
      gv_widths(4) := v_width;
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
      gv_borders(4) := 1;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := gc_style_bold;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
      FOR rec IN (SELECT c.contact_id
                        ,c.obj_name_orig
                        ,crt.relationship_dsc
                        ,to_char(cp.date_of_birth, 'dd.mm.yyyy') date_of_birth
                        ,pkg_rep_utils.to_money_sep(ROUND(ab.value, 2)) || '%' val
                    FROM as_asset           aa
                        ,as_assured         aas
                        ,as_beneficiary     ab
                        ,contact            c
                        ,cn_person          cp
                        ,cn_contact_rel     ccr
                        ,t_contact_rel_type crt
                   WHERE aa.p_policy_id = par_policy_id
                     AND aa.as_asset_id = aas.as_assured_id
                     AND ab.as_asset_id = aa.as_asset_id
                     AND ab.contact_id = c.contact_id
                     AND c.contact_id = cp.contact_id(+)
                     AND ab.cn_contact_rel_id = ccr.id
                     AND ccr.relationship_type = crt.id)
      LOOP
      
        gv_styles(1) := NULL;
        gv_styles(2) := NULL;
        gv_styles(3) := NULL;
        gv_styles(4) := NULL;
      
        gv_datas(1) := rec.obj_name_orig;
        gv_datas(2) := rec.date_of_birth;
        gv_datas(3) := rec.relationship_dsc;
        gv_datas(4) := rec.val;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END LOOP;
    END print_benificiaries;
  
    FUNCTION get_main_cash_surr(par_policy_id p_policy.policy_id%TYPE) RETURN BOOLEAN IS
      v_main_exists NUMBER(1);
    BEGIN
      SELECT COUNT(*)
        INTO v_main_exists
        FROM dual
       WHERE EXISTS (SELECT NULL
                FROM as_asset            aa
                    ,p_cover             pc
                    ,t_prod_line_option  plo
                    ,t_product_line      pl
                    ,t_product_line_type plt
                    ,policy_cash_surr    pcs
               WHERE aa.p_policy_id = par_policy_id
                 AND aa.as_asset_id = pc.as_asset_id
                 AND pc.t_prod_line_option_id = plo.id
                 AND plo.product_line_id = pl.id
                 AND pl.product_line_type_id = plt.product_line_type_id
                 AND plt.brief = 'RECOMMENDED'
                 AND pcs.policy_id = aa.p_policy_id
                 AND pcs.t_lob_line_id = pl.t_lob_line_id
                 AND pc.status_hist_id != pkg_cover.get_status_hist_id_del);
      RETURN v_main_exists > 0;
    END get_main_cash_surr;
  
    FUNCTION get_invest_exists(par_policy_id p_policy.policy_id%TYPE) RETURN BOOLEAN IS
      v_invest_exists NUMBER(1);
    BEGIN
      SELECT COUNT(*)
        INTO v_invest_exists
        FROM dual
       WHERE EXISTS (SELECT NULL
                FROM as_asset           aa
                    ,p_policy           pp
                    ,p_cover            pc
                    ,t_prod_line_option plo
                    ,t_product_line     pl
                    ,policy_cash_surr   pcs
               WHERE aa.p_policy_id = par_policy_id
                 AND aa.as_asset_id = pc.as_asset_id
                 AND pc.t_prod_line_option_id = plo.id
                 AND plo.product_line_id = pl.id
                 AND pl.t_lob_line_id = pcs.t_lob_line_id
                 AND aa.p_policy_id = pp.policy_id
                 AND pp.pol_header_id = pcs.pol_header_id
                 AND pcs.policy_id = pp.policy_id
                 AND plo.brief LIKE 'INVEST%'
                 AND pc.status_hist_id != pkg_cover.get_status_hist_id_del);
      RETURN v_invest_exists > 0;
    END get_invest_exists;
  
    PROCEDURE print_additional_docs(par_policy_id p_policy.policy_id%TYPE) IS
    
      v_counter   PLS_INTEGER := 0;
      v_counter_2 PLS_INTEGER := 1;
    
      v_premium_raised      BOOLEAN;
      v_delta_premium       NUMBER;
      v_premium_raised_date DATE;
    
      FUNCTION prn RETURN VARCHAR2 IS
      BEGIN
        v_counter := v_counter + 1;
        RETURN v_counter || '. Приложение №' || v_counter || ': ';
      END;
    
      FUNCTION prn2 RETURN VARCHAR2 IS
      BEGIN
        v_counter_2 := v_counter_2 + 1;
        RETURN v_counter_2 || '. ';
      END;
    
      PROCEDURE check_fee_raised
      (
        par_policy_id               p_policy.policy_id%TYPE
       ,par_premium_raised_out      OUT BOOLEAN
       ,par_premium_delta_out       OUT NUMBER
       ,par_premium_raised_date_out OUT DATE
      ) IS
        v_current_premium p_policy.premium%TYPE;
        v_prev_premium    p_policy.premium%TYPE;
      BEGIN
        SELECT ROUND((SELECT SUM(fee) FROM as_asset aa WHERE aa.p_policy_id = pp.policy_id) -
                     (SELECT SUM(aa.fee) FROM as_asset aa WHERE aa.p_policy_id = pp2.policy_id)
                    ,2) premium_delta
          INTO par_premium_delta_out
          FROM p_policy pp
              ,(SELECT pp2.premium
                      ,pp2.policy_id
                  FROM p_policy pp2
                 WHERE EXISTS (SELECT NULL
                          FROM doc_status     ds
                              ,doc_status_ref dsr
                         WHERE ds.document_id = pp2.policy_id
                           AND ds.doc_status_ref_id = dsr.doc_status_ref_id
                           AND dsr.brief = 'UNDERWRITING')) pp2
         WHERE pp.policy_id = par_policy_id
           AND pp2.policy_id(+) = pp.prev_ver_id;
      
        par_premium_raised_out := par_premium_delta_out IS NOT NULL AND par_premium_delta_out > 0;
      
        -- Дата окончания оценки риска + 30 дней
        par_premium_raised_date_out := pkg_policy.get_risk_pricing_end_date(par_policy_id => par_policy_id) + 30;
      
      END check_fee_raised;
    
    BEGIN
    
      check_fee_raised(par_policy_id               => par_policy_id
                      ,par_premium_raised_out      => v_premium_raised
                      ,par_premium_delta_out       => v_delta_premium
                      ,par_premium_raised_date_out => v_premium_raised_date);
      set_font;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'К настоящему договору (Полису) прилагаются:';
      gv_datas(2) := prn || '«Полисные условия к договору страхования жизни» от 28.01.2014 г.';
    
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace - gv_widths(1);
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn || 'Заявление на страхование жизни № ' || v_pol_sum.notice_num;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      IF get_main_cash_surr(par_policy_id => par_policy_id)
      THEN
        gv_datas(1) := NULL;
        gv_datas(2) := prn || 'Таблица гарантированных выкупных сумм по основной программе';
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END IF;
    
      IF get_invest_exists(par_policy_id)
      THEN
        gv_datas(1) := NULL;
        gv_datas(2) := prn ||
                       'Таблица гарантированных выкупных сумм по дополнительной программе страхования «Инвест» (при условии выбора указанной программы)';
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END IF;
      set_font(par_size => 7);
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_aligns(2) := 'R';
    
      IF v_premium_raised
      THEN
        gv_datas(1) := NULL;
        gv_datas(2) := prn2 ||
                       'В соответствиями  с изменениями, указанными в п. 1 настоящего Дополнительного соглашения, у Страхователя возникает обязанность доплатить Страховщику дополнительную страховую премию (страховой взнос) в размере ' ||
                       pkg_rep_utils.to_money_sep(v_delta_premium) || ' в срок до ' ||
                       to_char(v_premium_raised_date) || '.';
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END IF;
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Во всем остальном, что не предусмотрено настоящим Дополнительным Соглашением Стороны руководствуются положениями Полисных условий к договору страхования жизни';
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Настоящее Дополнительное соглашение вступает в силу с момента оплаты дополнительного страхового взноса в сумме и в сроки, указанные в п. 2 настоящего Дополнительного соглашения';
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Настоящее Дополнительное соглашение является составной и неотъемлемой частью Полиса страхования жизни №' ||
                     v_pol_sum.pol_num;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Настоящее Дополнительное Соглашение подписано в двух экземплярах, имеющих одинаковую силу, по одному экземпляру для каждой Стороны.';
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
    END print_additional_docs;
  
    PROCEDURE print_signes(par_policy_id p_policy.policy_id%TYPE) IS
      v_agent_num  ven_ag_contract_header.num%TYPE;
      v_agent_name contact.obj_name_orig%TYPE;
    BEGIN
      BEGIN
        SELECT /*decode(sc.brief, 'RLA', '45082', */
         ah.num /*)*/          num
        , /*decode(sc.brief, 'RLA', 'Ренессанс Лайф Актив',*/c.obj_name_orig /*)*/ obj_name_orig
          INTO v_agent_num
              ,v_agent_name
          FROM ven_ag_contract_header ah
              ,contact                c
              ,t_sales_channel        sc
         WHERE ah.ag_contract_header_id =
               pkg_agn_control.get_current_policy_agent(v_pol_sum.policy_header_id)
           AND ah.agent_id = c.contact_id
           AND ah.t_sales_channel_id = sc.id;
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3; -- Array of widths
      gv_widths(2) := gv_widths(1);
      gv_widths(3) := gv_widths(1);
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'R';
    
      gv_datas(1) := upper('СТРАХОВАТЕЛЬ');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := '_____________________________________';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'ФИО Консультанта';
      gv_datas(2) := v_agent_name;
      gv_datas(3) := NULL;
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      gv_styles(3) := gc_style_regular;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Номер Консультанта';
      gv_datas(2) := v_agent_num;
      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Дата подписания Дополнительного соглашения (не позднее 61 дня с даты заключения Договора страхования) ' ||
                     to_char(v_pol_sum.sign_date, 'dd.mm.yyyy');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
    END print_signes;
  
    PROCEDURE print_cash_surr_main(par_policy_id p_policy.policy_id%TYPE) IS
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      set_font(par_style => gc_style_bold, par_size => 12);
    
      gv_application_number := gv_application_number + 1;
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № ') || gv_application_number
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО  ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма на дату досрочного прекращения (расторжения) договора страхования рассчитывается как % от сформированного резерва по договору страхования на дату начала периода, в котором произошло досрочное прекращение (расторжение) договора страхования'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      BEGIN
        SELECT DISTINCT ll.brief
          INTO v_main_program_lob_line_brief
          FROM as_asset            aa
              ,p_cover             pc
              ,t_prod_line_option  plo
              ,t_product_line      pl
              ,t_product_line_type plt
              ,t_lob_line          ll
         WHERE aa.p_policy_id = par_policy_id
           AND aa.as_asset_id = pc.as_asset_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND pl.product_line_type_id = plt.product_line_type_id
           AND pl.t_lob_line_id = ll.t_lob_line_id
           AND plt.brief = 'RECOMMENDED';
      EXCEPTION
        WHEN no_data_found THEN
          raise_application_error(-20001
                                 ,'Не удалось определить основную программу');
        WHEN too_many_rows THEN
          raise_application_error(-20001
                                 ,'Найдено несколько основных программ');
      END;
    
      print_cash_surr_table(par_policy_id      => par_policy_id
                           ,par_lob_line_brief => v_main_program_lob_line_brief);
    
    END print_cash_surr_main;
  
    PROCEDURE print_cash_surr_invest2(par_policy_id p_policy.policy_id%TYPE) IS
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
    
      BEGIN
        SELECT DISTINCT ll.brief
          INTO v_main_program_lob_line_brief
          FROM as_asset           aa
              ,p_cover            pc
              ,t_prod_line_option plo
              ,t_product_line     pl
              ,t_lob_line         ll
         WHERE aa.p_policy_id = par_policy_id
           AND aa.as_asset_id = pc.as_asset_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND pl.t_lob_line_id = ll.t_lob_line_id
           AND ll.brief = 'INVEST2';
      EXCEPTION
        WHEN no_data_found THEN
          RETURN;
        WHEN too_many_rows THEN
          raise_application_error(-20001
                                 ,'Найдено несколько основных программ');
      END;
    
      plpdf.newpage;
      set_font(par_style => gc_style_bold, par_size => 12);
      gv_application_number := gv_application_number + 1;
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'ПРИЛОЖЕНИЕ № ' || gv_application_number
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ПРОГРАММЕ СТРАХОВАНИЯ "ИНВЕСТ"')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      print_cash_surr_table(par_policy_id      => par_policy_id
                           ,par_lob_line_brief => v_main_program_lob_line_brief);
    
    END print_cash_surr_invest2;
  
  BEGIN
    v_policy_id := to_number(repcore.get_context('POL_ID'));
  
    v_pol_sum := get_policy_summary(v_policy_id);
  
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
  
    -- Инициализация
    init(par_default_font_size => 8);
  
    plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
  
    plpdf.setfooterprocname(p_proc_name => 'ins.pkg_rep_plpdf.footer_414', p_height => 27);
  
    -------------------------------------------------------------------------------------------------
    -- ДОГОВОР №
    -------------------------------------------------------------------------------------------------
  
    set_font(par_style => gc_style_bold);
  
    /* Draws a rectangle cell with text inside. */
    plpdf.printmultilinecell(p_txt   => unistr('Дополнительное соглашение №1' || chr(13) ||
                                               'К договору страхования №' || v_pol_sum.pol_num)
                            ,p_align => 'R'
                            ,p_ln    => 1);
  
    plpdf.printcell(p_w => plpdf.getpagespace / 3, p_ln => 0);
    --set_times_font(par_type => gc_font_times_normal, par_size => 7);
    plpdf.printmultilinecell(p_txt   => 'ООО «СК «Ренессанс Жизнь», именуемое в дальнейшем «Страховщик», в лице Представителя по доверенности Голованова Андрея Сергеевича, действующего на основании Доверенности 2014/02 от 09.01.2014г., с одной стороны, и ' ||
                                        v_insuree_info.fio || ', ' ||
                                        get_passport(v_insuree_info.contact_id) ||
                                        ', именуемый (ая)  в дальнейшем «Страхователь», с другой стороны, заключили настоящее Дополнительное Соглашение к Договору страхования № ' ||
                                        v_pol_sum.pol_num || '  о нижеследующем:'
                            ,p_align => 'R'
                            ,p_ln    => 1);
  
    plpdf.linebreak;
    set_title(rtrim(upper(v_pol_sum.product_name), '_2'));
    set_cotitle('Полис (договор) страхования жизни №' || v_pol_sum.pol_num);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('СТРАХОВЩИК'));
    set_font(par_size => 10, par_style => gc_style_bold);
    plpdf.printcell(p_txt => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_nameaddr)
                   ,p_h   => -1
                   ,p_ln  => 1);
  
    set_font(par_size => 7);
    plpdf.printmultilinecell(p_txt => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_default_billing || ',' ||
                                                                                         pkg_contact_rep_utils.gc_company_def_phones || ',' ||
                                                                                         pkg_contact_rep_utils.gc_company_website)
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('СТРАХОВАТЕЛЬ'));
    print_info_element(par_element_name => 'Ф.И.О.', par_element_value => v_insuree_info.fio);
    print_info_element(par_element_name  => 'ДАТА РОЖДЕНИЯ'
                      ,par_element_value => to_char(v_insuree_info.date_of_birth, 'dd.mm.yyyy" г."'));
    print_info_element(par_element_name  => 'ДОКУМЕНТ'
                      ,par_element_value => get_passport(v_insuree_info.contact_id));
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННЫй
    -------------------------------------------------------------------------------------------------
    IF v_pol_sum.assured_array IS NOT NULL
       AND v_pol_sum.assured_array.count > 0
    THEN
      set_chapter(upper('ЗАСТРАХОВАННЫй'));
      v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
      print_info_element(par_element_name => 'Ф.И.О.', par_element_value => v_assured_info.fio);
      print_info_element(par_element_name  => 'ДАТА РОЖДЕНИЯ'
                        ,par_element_value => to_char(v_assured_info.date_of_birth, 'dd.mm.yyyy" г."'));
      print_info_element(par_element_name  => 'ДОКУМЕНТ'
                        ,par_element_value => get_passport(v_assured_info.contact_id));
    END IF;
  
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ (СТРАХОВЫЕ РИСКИ). СТРАХОВЫЕ СУММЫ. СТРАХОВАЯ ПРЕМИЯ (ВЗНОС)
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('ПРОГРАММЫ СТРАХОВАНИЯ (СТРАХОВЫЕ РИСКИ). СТРАХОВЫЕ СУММЫ. СТРАХОВАЯ ПРЕМИЯ (ВЗНОС)'));
    -- Заголовок таблицы
    print_product_lines_info(par_policy_id => v_policy_id);
  
    -------------------------------------------------------------------------------------------------
    --УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ  ПРЕМИИ
    -------------------------------------------------------------------------------------------------
    plpdf.newpage;
    set_chapter(upper('УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ  ПРЕМИИ'));
  
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_w   => plpdf.getpagespace / 2
                            ,p_txt => upper('ДАТА УПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ПЕРВОГО СТРАХОВОГО ВЗНОСА):')
                            ,p_h   => -1
                            ,p_ln  => 0);
  
    set_font;
    plpdf.printcell(p_txt => to_char(v_pol_sum.fist_payment_date, 'dd.mm.yyyy')
                    --,p_h   => plpdf.getcellminheight * 2
                   ,p_ln => 1);
  
    IF v_pol_sum.payment_terms_brief != 'Единовременно'
    THEN
      plpdf.linebreak;
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_w   => plpdf.getpagespace / 2
                              ,p_txt => upper('ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ:')
                              ,p_h   => -1
                              ,p_ln  => 0);
    
      set_font;
      v_text := get_next_payment_dates(v_pol_sum.start_date, v_pol_sum.payment_terms_brief) ||
                ' каждого последующего года срока страхования';
      plpdf.printmultilinecell(p_txt => v_text, p_h => -1, p_ln => 1);
    END IF;
  
    plpdf.printmultilinecell(p_txt => 'В случае если Страхователем не оплачен очередной страховой взнос по договору страхования по истечении льготного периода, действие договора страхования прекращается.'
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    -------------------------------------------------------------------------------------------------
    --СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. СРОК СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    set_chapter(par_title => 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. СРОК СТРАХОВАНИЯ');
  
    set_font(par_size => 9, par_color => gc_color_orange, par_style => gc_style_bold);
    plpdf.printcell(p_txt => 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' ||
                             ROUND(MONTHS_BETWEEN(v_pol_sum.end_date, v_pol_sum.start_date) / 12) ||
                             ' ЛЕТ      С ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') ||
                             ' Г. ПО ' || to_char(v_pol_sum.end_date, 'dd.mm.yyyy') || ' Г.'
                   ,p_ln  => 1);
  
    print_programs_periods(par_policy_id => v_policy_id);
  
    plpdf.linebreak;
    plpdf.printmultilinecell(p_txt => 'Если Страхователь за 30 (тридцать) календарных дней до дня окончания срока страхования по указанным дополнительным программам не направит письменное заявление Страховщику о намерении исключить какую-либо из указанных  программ или рисков из договора страхования или внести в них изменения, срок страхования по указанным дополнительным программам (страховым рискам) продлевается до даты наступления очередной страховой годовщины.'
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ
    -------------------------------------------------------------------------------------------------
  
    set_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ');
    print_benificiaries(par_policy_id => v_policy_id);
  
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    BEGIN
      SELECT nvl(addendum_note
                ,'НЕ ЯВЛЯЮТСЯ СТРАХОВЫМИ СЛУЧАЯМИ СОБЫТИЯ')
        INTO v_addendum_note
        FROM ven_as_assured_underwr aau
            ,as_asset               ae
       WHERE aau.as_assured_id = ae.as_asset_id
         AND ae.p_policy_id = v_policy_id;
    EXCEPTION
      WHEN no_data_found THEN
        v_addendum_note := 'НЕ ЯВЛЯЮТСЯ СТРАХОВЫМИ СЛУЧАЯМИ СОБЫТИЯ';
    END;
  
    plpdf.newpage;
    set_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    set_times_font(par_type => gc_font_times_normal, par_size => 7);
  
    plpdf.printmultilinecell(p_txt => upper('1. ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН НА ОСНОВАНИИ "ПОЛИСНЫХ УСЛОВИЙ К ДОГОВОРУ СТРАХОВАНИЯ ЖИЗНИ ПО ПРОГРАММАМ СТРАХОВАНИЯ ЖИЗНИ «ГАРМОНИЯ ЖИЗНИ», «СЕМЬЯ», «ДЕТИ», «БУДУЩЕЕ», УТВЕРЖДЕННЫХ  ГЕНЕРАЛЬНЫМ  ДИРЕКТОРОМ  ООО "СК "РЕНЕССАНС ЖИЗНЬ" 28.01.2014  ГОДА, ДАЛЕЕ «ПОЛИСНЫЕ УСЛОВИЯ».')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper('2. СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ПОЛИСЕ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper('3. ТЕРРИТОРИЯ СТРАХОВАНИЯ: ВЕСЬ МИР.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper('4. ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ: 24 ЧАСА В СУТКИ.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper('6. ЛЬГОТНЫЙ ПЕРИОД: 30 ДНЕЙ.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper('7. РАСЧЕТ ГАРАНТИРОВАННЫХ СТРАХОВЫХ СУММ И СТРАХОВЫХ ПРЕМИЙ ПРОИЗВЕДЕН С УЧЕТОМ ГАРАНТИРОВАННОЙ НОРМЫ ДОХОДНОСТИ - 4%. ')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper('8. ДАТА ОКОНЧАНИЯ ПЕРИОДА ОЦЕНКИ СТРАХОВОГО РИСКА: ' ||
                                            to_char(pkg_policy.get_risk_pricing_end_date(v_policy_id)
                                                   ,'dd.mm.yyyy'))
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper('9. УЧИТЫВАЯ СВЕДЕНИЯ, СОДЕРЖАЩИЕСЯ В ЗАЯВЛЕНИИ НА СТРАХОВАНИЕ №' ||
                                            v_pol_sum.pol_num ||
                                            ', ДОПОЛНИТЕЛЬНО К СОБЫТИЯМ, УКАЗАННЫМ В П. 4 «ПОЛИСНЫХ УСЛОВИЙ»*, ' ||
                                            v_addendum_note || ' **') --НЕ ЯВЛЯЮТСЯ СТРАХОВЫМИ СЛУЧАЯМИ СОБЫТИЯ**')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    set_font(par_size => 7);
    plpdf.linebreak;
    plpdf.printmultilinecell(p_txt => 'Подписывая настоящий Полис, Страхователь (Застрахованный) в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» выражает(ют) Страховщику согласие на обработку своих персональных данных, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путем осуществления прямых контактов с помощью средств связи, в том числе в целях обеспечения исполнения настоящего Полиса, а также выражает(ют) Страховщику согласие на предоставление Выгодоприобретателю(ям)  информации по настоящему Полису,  об исполнении Страховщиком и/или Страхователем (Застрахованным) обязательств по настоящему Полису, в том числе информацию об оплате и размере страховой премии (страховых взносов), размере страховой суммы, о возникновении и урегулировании претензий, наступлении/вероятности наступления страховых случаев, выплате страхового возмещения и другую имеющую отношение к настоящему Полису информацию.'
                            ,p_h   => -1
                            ,p_ln  => 1);
    plpdf.printmultilinecell(p_txt => 'Обработка персональных данных осуществляется посредством сбора, систематизации, накопления, хранения, уточнения (обновления, изменения), использования, распространения, передачу (в том числе трансграничную), обезличивания, блокирования, уничтожения персональных данных, как на бумажных, так и на электронных носителях. '
                            ,p_h   => -1
                            ,p_ln  => 1);
    plpdf.printmultilinecell(p_txt => 'Настоящее согласие дается Страхователем (Застрахованным) Страховщику на 70 лет и может быть отозвано Страхователем (Застрахованным) в любой момент времени путем передачи Страховщику подписанного Страхователем (Застрахованным) письменного уведомления.'
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    -------------------------------------------------------------------------------------------------
    -- К НАСТОЯЩЕМУ ДОГОВОРУ (ПОЛИСУ) ПРИЛАГАЮТСЯ:
    -------------------------------------------------------------------------------------------------
    --plpdf.linebreak;
    print_additional_docs(par_policy_id => v_policy_id);
  
    plpdf.linebreak;
    print_signes(par_policy_id => v_policy_id);
  
    plpdf.linebreak;
    set_font(par_size => 7);
    plpdf.printcell(p_txt => '_____________________________________', p_h => -1, p_ln => 1);
    plpdf.printmultilinecell(p_txt => '* Далее прописывается наименование программ (рисков), по которым делается исключение андеррайтинга.'
                            ,p_h   => -1
                            ,p_ln  => 1);
    plpdf.printmultilinecell(p_txt => '** Далее прописывается заключение андеррайтинга (исключение событий, связанных с заболеванием, хобби, профессиональной деятельностью и .т.д.). Если заключение есть, то 9 пункт выгружается, в противном случае 9 пункт отсутствует.'
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ПРИЛОЖЕНИЕ № 3
    -------------------------------------------------------------------------------------------------
    IF get_main_cash_surr(par_policy_id => v_policy_id)
    THEN
      print_cash_surr_main(par_policy_id => v_policy_id);
    END IF;
  
    -------------------------------------------------------------------------------------------------
    -- ПРИЛОЖЕНИЕ № 4
    -------------------------------------------------------------------------------------------------
    IF get_invest_exists(par_policy_id => v_policy_id)
    THEN
      print_cash_surr_invest2(par_policy_id => v_policy_id);
    END IF;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
  
    /* Returns the generated PDF document.
    The document is closed and then returned in the OUT parameter. */
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'Полис_' || nvl(v_pol_sum.pol_num, v_pol_sum.ids) || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END policy_life_414;

  PROCEDURE footer_414 IS
  BEGIN
    set_font;
  
    plpdf.printcell(p_txt        => 'Страница  ' || plpdf.currentpagenumber || ' из {nb}'
                   ,p_border     => 0
                   ,p_align      => 'C'
                   ,p_ln         => 0
                   ,p_h          => 27
                   ,p_vert_align => 'B');
  END;

  /*
    Процедура формирования полиса по продукту Шесть континентов - Кредитка
  */
  PROCEDURE rep_rolf_credit
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id p_policy.policy_id%TYPE;
    l_text      VARCHAR2(4000);
    l_blob      BLOB;
    v_signer    typ_signer;
  
    TYPE typ_policy_summary IS RECORD(
       ids                        p_pol_header.ids%TYPE
      ,payment_terms_desc         t_payment_terms.description%TYPE
      ,period_desc                t_period.description%TYPE
      ,assured_contact_id         contact.contact_id%TYPE
      ,assured_contact_name       contact.obj_name_orig%TYPE
      ,assured_date_of_birth      cn_person.date_of_birth%TYPE
      ,assured_zip                VARCHAR2(9)
      ,assured_reg_address        cn_address.name%TYPE
      ,assured_passport_number    VARCHAR2(1500)
      ,assured_passport_issue     VARCHAR2(1500)
      ,assured_letters_address    cn_address.name%TYPE
      ,assured_home_tel           VARCHAR2(255)
      ,assured_mob_tel            VARCHAR2(255)
      ,assured_phones             VARCHAR2(255)
      ,assured_emails             cn_contact_email.email%TYPE
      ,assured_is_public_contact  contact.is_public_contact%TYPE
      ,insuree_contact_id         contact.contact_id%TYPE
      ,insuree_contact_name       contact.obj_name_orig%TYPE
      ,insuree_date_of_birth      cn_person.date_of_birth%TYPE
      ,insuree_contact_type       t_contact_type.description%TYPE
      ,insuree_contact_type_brief t_contact_type.brief%TYPE
      ,insuree_reg_address        cn_address.name%TYPE
      ,insuree_passport           VARCHAR2(1500)
      ,insuree_letters_address    cn_address.name%TYPE
      ,insuree_home_tel           VARCHAR2(255)
      ,insuree_mob_tel            VARCHAR2(255)
      ,insuree_is_public_contact  contact.is_public_contact%TYPE
      ,ins_amount                 p_policy.ins_amount%TYPE
      ,premium                    p_policy.premium%TYPE
      ,start_date_genitive_case   VARCHAR2(40)
      ,start_date                 p_pol_header.start_date%TYPE
      ,end_date                   p_policy.end_date%TYPE
      ,pol_num                    p_policy.pol_num%TYPE
      ,pol_ser                    p_policy.pol_ser%TYPE
      ,status                     doc_status_ref.name%TYPE
      ,policy_form                t_policy_form.t_policy_form_name%TYPE
      ,policy_header_id           p_pol_header.policy_header_id%TYPE
      ,policy_id                  p_policy.policy_id%TYPE
      ,assured_gender             t_gender.description%TYPE
      ,insuree_gender             t_gender.description%TYPE
      ,assured_citizenry_inn      VARCHAR2(255)
      ,insuree_citizenry_inn      VARCHAR2(255)
      ,currency_desc              fund.name%TYPE
      ,currency_code              fund.brief%TYPE
      ,assured_last_name          contact.name%TYPE
      ,assured_first_name         contact.first_name%TYPE
      ,assured_middle_name        contact.middle_name%TYPE
      ,product_brief              t_product.brief%TYPE);
  
    v_pol_sum typ_policy_summary;
  
    TYPE typ_cover_sum IS RECORD(
       ins_amount_term_2    p_cover.ins_amount%TYPE
      ,ins_premium_term_2   p_cover.premium%TYPE
      ,ins_amount_any_1_gr  p_cover.ins_amount%TYPE
      ,ins_premium_any_1_gr p_cover.premium%TYPE
      ,ins_amount_atd       p_cover.ins_amount%TYPE
      ,ins_premium_atd      p_cover.premium%TYPE
      ,ins_amount_perp_2    p_cover.ins_amount%TYPE
      ,ins_premium_perp_2   p_cover.premium%TYPE);
  
    TYPE typ_rep_sum IS RECORD(
       t_cover_sum typ_cover_sum
      ,premium     p_cover.premium%TYPE
      ,sum_speech  VARCHAR2(500));
  
    v_rep_sum typ_rep_sum;
  
    -- Страховые суммы/премии
    FUNCTION get_rep_sum(par_policy_id p_policy.policy_id%TYPE) RETURN typ_rep_sum IS
      v_rep_sum typ_rep_sum;
    BEGIN
      v_rep_sum.premium := 0;
    
      FOR cur_cover IN (SELECT plo.brief
                              ,nvl(pc.ins_amount, 0) AS cover_ins_amount
                              ,nvl(pc.premium, 0) AS cover_premium
                          FROM p_cover            pc
                              ,as_asset           aa
                              ,t_prod_line_option plo
                              ,t_product_line     pl
                         WHERE aa.as_asset_id = pc.as_asset_id
                           AND pc.t_prod_line_option_id = plo.id
                           AND plo.product_line_id = pl.id
                           AND aa.p_policy_id = par_policy_id)
      LOOP
        IF cur_cover.brief = 'DEATH_INS_ANY_REASON'
        THEN
          v_rep_sum.t_cover_sum.ins_amount_term_2  := cur_cover.cover_ins_amount;
          v_rep_sum.t_cover_sum.ins_premium_term_2 := cur_cover.cover_premium;
        ELSIF cur_cover.brief = 'TPD'
        THEN
          v_rep_sum.t_cover_sum.ins_amount_any_1_gr  := cur_cover.cover_ins_amount;
          v_rep_sum.t_cover_sum.ins_premium_any_1_gr := cur_cover.cover_premium;
        ELSIF cur_cover.brief = 'ATD'
        THEN
          v_rep_sum.t_cover_sum.ins_amount_atd  := cur_cover.cover_ins_amount;
          v_rep_sum.t_cover_sum.ins_premium_atd := cur_cover.cover_premium;
        ELSIF cur_cover.brief = 'PPJL'
        THEN
          v_rep_sum.t_cover_sum.ins_amount_perp_2  := cur_cover.cover_ins_amount;
          v_rep_sum.t_cover_sum.ins_premium_perp_2 := cur_cover.cover_premium;
        END IF;
      
        v_rep_sum.premium := v_rep_sum.premium + cur_cover.cover_premium;
      END LOOP;
      v_rep_sum.sum_speech := pkg_utils.money2speech(v_rep_sum.premium, 122);
    
      RETURN v_rep_sum;
    END get_rep_sum;
  
    PROCEDURE print_header IS
      v_barcode VARCHAR2(25);
      l_text    VARCHAR2(500);
    BEGIN
      v_barcode := get_barcode_for_policy(par_policy_id => v_policy_id);
    
      IF v_barcode IS NOT NULL
      THEN
        set_font(par_size        => 28
                ,par_style       => gc_style_regular
                ,par_font_family => gc_barcode_font_family_code39);
        plpdf.printcell(p_h => -1, p_txt => v_barcode, p_align => 'R', p_ln => 1);
      END IF;
    END print_header;
  
  BEGIN
    v_policy_id := to_number(repcore.get_context('POL_ID'));
  
    BEGIN
      SELECT nvl(ids, 0)
            ,payment_terms_desc
            ,period_desc
            ,assured_contact_id
            ,assured_contact_name
            ,assuerd_date_of_birth
            ,assured_zip
            ,REPLACE(assured_reg_address, nvl(assured_zip, '   ') || ',', '') AS assured_reg_address
            ,pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(assured_contact_id)
                                                           ,'<#DOC_SERNUM>') AS assured_passport_number
            ,pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(assured_contact_id)
                                                           ,'<#DOC_PLACE> Дата выдачи: <#DOC_DATE>') AS assured_passport_issue
            ,assured_letters_address
            ,assured_home_tel
            ,assured_mob_tel
            ,nvl(pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(assured_contact_id
                                                                                                            ,'MOBIL'))
                ,pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(assured_contact_id))) assured_phones
            ,nvl(pkg_contact_rep_utils.get_email(pkg_contact_rep_utils.get_last_active_email_id(assured_contact_id
                                                                                               ,'Адрес рассылки'))
                ,pkg_contact_rep_utils.get_email(pkg_contact_rep_utils.get_last_active_email_id(assured_contact_id))) assured_emails
            ,assured_is_public_contact
            ,insuree_contact_id
            ,insuree_contact_name
            ,insuree_date_of_birth
            ,insuree_contact_type
            ,insuree_contact_type_brief
            ,insuree_reg_address
            ,insuree_passport
            ,insuree_letters_address
            ,insuree_home_tel
            ,insuree_mob_tel
            ,insuree_is_public_contact
            ,ins_amount
            ,premium
            ,pkg_rep_utils.date_to_genitive_case(start_date) || ' г.' AS start_date_genitive_case
            ,start_date
            ,end_date
            ,nvl(pol_num, ' ') AS pol_num
            ,pol_ser
            ,status
            ,policy_form
            ,policy_header_id
            ,policy_id
            ,assured_gender
            ,insuree_gender
            ,assured_citizenry_inn
            ,insuree_citizenry_inn
            ,currency_desc
            ,currency_code
            ,assured_last_name
            ,assured_first_name
            ,assured_middle_name
            ,(SELECT pr.brief FROM t_product pr WHERE pr.product_id = v_policy_summary.product_id) product_brief
        INTO v_pol_sum
        FROM v_policy_summary
       WHERE policy_id = v_policy_id;
    EXCEPTION
      WHEN no_data_found THEN
        v_pol_sum := NULL;
    END;
  
    v_rep_sum := get_rep_sum(v_policy_id);
    v_signer  := get_signer('pkg_rep_plpdf.rep_rolf_credit');
  
    -- Инициализация
    init(par_default_font_size => 8);
    print_draft(v_pol_sum.status);
  
    -------------------------------------------------------------------------------------------------
    -- ДОГОВОР №
    -------------------------------------------------------------------------------------------------
    --печаем штрихкод
    print_header;
  
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'ДОГОВОР СТРАХОВАНИЯ ЖИЗНИ И ЗДОРОВЬЯ ЗАЁМЩИКОВ КРЕДИТА     № ' ||
                                           v_pol_sum.pol_num
                            ,p_border   => 'LRT'
                            ,p_clipping => 0);
  
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'заключён на основании Полисных условий по программе страхования жизни и здоровья Заёмщиков кредита'
                            ,p_border   => 'LRB'
                            ,p_clipping => 0);
  
    -------------------------------------------------------------------------------------------------
    -- ГОРОД, ДАТА
    -------------------------------------------------------------------------------------------------
    l_text := get_city_name;
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => plpdf.gettextwidth(l_text) + 10
                            ,p_txt      => l_text
                            ,p_border   => '1'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => v_pol_sum.start_date_genitive_case
                            ,p_align    => 'R'
                            ,p_border   => '1'
                            ,p_clipping => 0);
  
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '1. СТРАХОВЩИК:'
                            ,p_border   => 'LRT'
                            ,p_clipping => 0);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h => 3, p_txt => get_insurer, p_border => 'LRB', p_clipping => 0);
  
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВАТЕЛЬ / ЗАСТРАХОВАННЫЙ
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '2. СТРАХОВАТЕЛЬ / ЗАСТРАХОВАННЫЙ:'
                            ,p_border   => 'LRT'
                            ,p_clipping => 0);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 25
                            ,p_txt      => '     Фамилия'
                            ,p_border   => 'L'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 50
                            ,p_txt      => v_pol_sum.assured_last_name
                            ,p_align    => 'C'
                            ,p_border   => '1'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 60
                            ,p_txt      => '         Дата рождения'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 50
                            ,p_txt      => to_char(v_pol_sum.assured_date_of_birth, 'dd.mm.yyyy')
                            ,p_align    => 'C'
                            ,p_border   => '1'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    blank_cell(par_width => 0, par_border => 'R', par_ln => 1);
    blank_cell(par_width => 0, par_border => 'LR', par_ln => 1);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 25
                            ,p_txt      => '     Имя'
                            ,p_border   => 'L'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 50
                            ,p_txt      => v_pol_sum.assured_first_name
                            ,p_align    => 'C'
                            ,p_border   => '1'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 60
                            ,p_txt      => '         Документ, удостоверяющий личность'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 50
                            ,p_txt      => 'Паспорт'
                            ,p_align    => 'C'
                            ,p_border   => '1'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    blank_cell(par_width => 0, par_border => 'R', par_ln => 1);
    blank_cell(par_width => 0, par_border => 'LR', par_ln => 1);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 25
                            ,p_txt      => '     Отчество'
                            ,p_border   => 'L'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 50
                            ,p_txt      => v_pol_sum.assured_middle_name
                            ,p_align    => 'C'
                            ,p_border   => '1'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    blank_cell(par_width => 60);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_w        => 50
                            ,p_txt      => v_pol_sum.assured_passport_number
                            ,p_align    => 'C'
                            ,p_border   => '1'
                            ,p_clipping => 0
                            ,p_ln       => 0);
    blank_cell(par_width => 0, par_border => 'R', par_ln => 1);
    blank_cell(par_width => 0, par_border => 'LR', par_ln => 1);
  
    -- Очистка
    delete_row_print_cache;
    -- Шапка таблицы
    gv_widths(1) := 5;
    gv_widths(2) := 180;
    gv_widths(3) := 5;
  
    gv_aligns(1) := 'С';
    gv_aligns(2) := 'C';
    gv_aligns(3) := 'C';
  
    gv_borders(1) := 'L';
    gv_borders(2) := 1;
    gv_borders(3) := 'R';
  
    gv_styles(1) := gc_style_regular;
    gv_styles(2) := gc_style_bold;
    gv_styles(3) := gc_style_bold;
  
    gv_datas(1) := '';
    gv_datas(2) := v_pol_sum.assured_passport_issue;
    gv_datas(3) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    set_font(par_size => 7, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Кем и когда выдан паспорт'
                            ,p_align    => 'C'
                            ,p_border   => 'LR'
                            ,p_clipping => 0
                            ,p_ln       => 1);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h => 3, p_txt => '     Адрес', p_clipping => 0, p_border => 'LR');
    -- Очистка
    delete_row_print_cache;
    -- Шапка таблицы
    gv_widths(1) := 5;
    gv_widths(2) := 80;
    gv_widths(3) := 50;
    gv_widths(4) := 50;
    gv_widths(5) := 5;
  
    gv_aligns(1) := 'С';
    gv_aligns(2) := 'C';
    gv_aligns(3) := 'C';
    gv_aligns(4) := 'С';
    gv_aligns(5) := 'С';
  
    gv_borders(1) := 'L';
    gv_borders(2) := 1;
    gv_borders(3) := 1;
    gv_borders(4) := 1;
    gv_borders(5) := 'R';
  
    gv_styles(1) := gc_style_regular;
    gv_styles(2) := gc_style_bold;
    gv_styles(3) := gc_style_bold;
    gv_styles(4) := gc_style_bold;
    gv_styles(5) := gc_style_regular;
  
    gv_datas(1) := '';
    gv_datas(2) := v_pol_sum.assured_reg_address;
    gv_datas(3) := v_pol_sum.assured_phones;
    gv_datas(4) := v_pol_sum.assured_emails;
    gv_datas(5) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
    set_font(par_size => 7, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_w        => 85
                            ,p_h        => 3
                            ,p_txt      => 'Индекс, город, улица, дом'
                            ,p_clipping => 0
                            ,p_border   => 'L'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => 'телефон'
                            ,p_clipping => 0
                            ,p_border   => '0'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'e-mail'
                            ,p_clipping => 0
                            ,p_border   => 'R'
                            ,p_align    => 'C');
  
    -------------------------------------------------------------------------------------------------
    -- СРОК ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '3. СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ:'
                            ,p_clipping => 0
                            ,p_border   => 'LTR');
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_w        => 30
                            ,p_h        => 3
                            ,p_txt      => '     ' ||
                                           FLOOR(MONTHS_BETWEEN(v_pol_sum.end_date + 1
                                                               ,v_pol_sum.start_date)) ||
                                           ' месяцев, с'
                            ,p_clipping => 0
                            ,p_border   => 'L'
                            ,p_align    => 'R'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => to_char(v_pol_sum.start_date, 'dd.mm.yyyy')
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w => 25, p_h => 3, p_txt => '  г.', p_clipping => 0, p_ln => 0);
    plpdf.printmultilinecell(p_w => 10, p_h => 3, p_txt => '     по', p_clipping => 0, p_ln => 0);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => to_char(v_pol_sum.end_date, 'dd.mm.yyyy')
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h => 3, p_txt => '  г.', p_clipping => 0, p_border => 'R');
  
    -------------------------------------------------------------------------------------------------
    -- ВАЛЮТА ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_w        => 40
                            ,p_h        => 3
                            ,p_txt      => '4.ВАЛЮТА ДОГОВОРА:'
                            ,p_clipping => 0
                            ,p_border   => 'LTB'
                            ,p_ln       => 0);
    IF v_pol_sum.currency_code = 'RUR'
    THEN
      l_text := 'X';
    ELSE
      l_text := ' ';
    END IF;
    plpdf.printcell(p_w        => 6
                   ,p_h        => 3
                   ,p_txt      => l_text
                   ,p_clipping => 0
                   ,p_border   => '1'
                   ,p_align    => 'C'
                   ,p_ln       => 0);
  
    set_font(par_style => gc_style_regular);
    plpdf.printcell(p_h        => 3
                   ,p_w        => 12
                   ,p_txt      => '   Рубли'
                   ,p_clipping => 0
                   ,p_border   => 'TB'
                   ,p_ln       => 0);
  
    plpdf.printcell(p_h        => 3
                   ,p_w        => 50
                   ,p_txt      => 'Марка автомобиля: '
                   ,p_clipping => 0
                   ,p_align    => 'R'
                   ,p_border   => 'TB'
                   ,p_ln       => 0);
    plpdf.printcell(p_h        => 3
                   ,p_w        => 30
                   ,p_txt      => pkg_doc_properties.get_string(v_policy_id, 'CAR_MAKE')
                   ,p_clipping => 0
                   ,p_align    => 'C'
                   ,p_border   => 1
                   ,p_ln       => 0);
  
    blank_cell(par_width => 0, par_border => '1', par_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ТЕРРИТОРИЯ ДЕЙСТВИЯ
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    l_text := '5. ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ:';
    plpdf.printmultilinecell(p_w        => plpdf.gettextwidth(l_text) + 5
                            ,p_h        => 3
                            ,p_txt      => l_text
                            ,p_clipping => 0
                            ,p_border   => 'LTB'
                            ,p_ln       => 0);
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'ВЕСЬ МИР, 24 ЧАСА В СУТКИ'
                            ,p_clipping => 0
                            ,p_border   => 'TBR');
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВЫЕ РИСКИ
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '6. СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ (ВЗНОСЫ):'
                            ,p_clipping => 0
                            ,p_border   => 'LTR');
    -- Очистка
    delete_row_print_cache;
    -- Шапка таблицы
    gv_widths(1) := 5;
    gv_widths(2) := 55;
    gv_widths(3) := 25;
    gv_widths(4) := 25;
    gv_widths(5) := 75;
    gv_widths(6) := 5;
  
    gv_aligns(1) := 'С';
    gv_aligns(2) := 'C';
    gv_aligns(3) := 'C';
    gv_aligns(4) := 'С';
    gv_aligns(5) := 'С';
    gv_aligns(6) := 'С';
  
    gv_borders(1) := 'L';
    gv_borders(2) := 1;
    gv_borders(3) := 1;
    gv_borders(4) := 1;
    gv_borders(5) := 1;
    gv_borders(6) := 'R';
  
    gv_styles(1) := gc_style_regular;
    gv_styles(2) := gc_style_bold;
    gv_styles(3) := gc_style_bold;
    gv_styles(4) := gc_style_bold;
    gv_styles(5) := gc_style_bold;
    gv_styles(6) := gc_style_regular;
  
    gv_datas(1) := '';
    gv_datas(2) := 'Страховые риски';
    gv_datas(3) := 'Страховая сумма*';
    gv_datas(4) := 'Страховая премия (взнос)';
    gv_datas(5) := 'Размер выплаты';
    gv_datas(6) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    gv_aligns(1) := 'С';
    gv_aligns(2) := 'L';
    gv_aligns(3) := 'C';
    gv_aligns(4) := 'С';
    gv_aligns(5) := 'L';
    gv_aligns(6) := 'С';
  
    gv_styles(1) := gc_style_regular;
    gv_styles(2) := gc_style_regular;
    gv_styles(3) := gc_style_regular;
    gv_styles(4) := gc_style_regular;
    gv_styles(5) := gc_style_regular;
    gv_styles(6) := gc_style_regular;
  
    gv_datas(1) := '';
  
    gv_datas(2) := '6.1. Смерть Застрахованного по любой причине**';
    gv_datas(3) := to_char(v_rep_sum.t_cover_sum.ins_amount_term_2, '999g999g999g999d99');
    gv_datas(4) := to_char(v_rep_sum.t_cover_sum.ins_premium_term_2, '999g999g999g999d99');
    gv_datas(5) := '100% от страховой суммы';
    gv_datas(6) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    gv_datas(1) := '';
    gv_datas(2) := '6.2. Инвалидность Застрахованного I группы';
    gv_datas(3) := to_char(v_rep_sum.t_cover_sum.ins_amount_any_1_gr, '999g999g999g999d99');
    gv_datas(4) := to_char(v_rep_sum.t_cover_sum.ins_premium_any_1_gr, '999g999g999g999d99');
    gv_datas(5) := '100% от страховой суммы';
    gv_datas(6) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    gv_datas(1) := '';
    gv_datas(2) := '6.3. Временная утрата трудоспособности, наступившая в результате несчастного случая';
    gv_datas(3) := to_char(v_rep_sum.t_cover_sum.ins_amount_atd, '999g999g999g999d99');
    gv_datas(4) := to_char(v_rep_sum.t_cover_sum.ins_premium_atd, '999g999g999g999d99');
    gv_datas(5) := '1/30 (одна тридцатая) от размера ежемесячного платежа Застрахованного по кредиту, увеличенного на 10% (десять процентов) в соответствии с графиком платежей по Кредитному договору за каждый день нетрудоспособности календарного месяца, начиная с 31-го (тридцать первого) дня временно нетрудоспособности, но не более, чем за 180 (сто восемьдесят) дней нетрудоспособности за весь срок страхования по всем страховым случаям и не более 50 000(пятьдесят тысяч) рублей в месяц.';
    gv_datas(6) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    gv_datas(1) := '';
    gv_datas(2) := '6.4. Дожитие Застрахованного до потери постоянной работы по независящим от него причинам.';
    gv_datas(3) := to_char(v_rep_sum.t_cover_sum.ins_amount_perp_2, '999g999g999g999d99');
    gv_datas(4) := to_char(v_rep_sum.t_cover_sum.ins_premium_perp_2, '999g999g999g999d99');
    gv_datas(5) := 'в размере трех ежемесячных платежей по Кредитному договору, увеличенных на 10% (десять процентов)в соответствии с первоначальным графиком погашения задолженности по кредитному договору, начиная с месяца, следующего после даты наступления страхового случая, но не более 50 000 (пятьдесят тысяч) рублей в месяц и не более 6 (шести) ежемесячных платежей за весь срок действия Договора страхования. Выплата осуществляется ежеквартально.';
    gv_datas(6) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    -- Очистка
    delete_row_print_cache;
    -- Шапка таблицы
    gv_widths(1) := 85;
    gv_widths(2) := 25;
    gv_widths(3) := 75;
    gv_widths(4) := 5;
  
    gv_aligns(1) := 'R';
    gv_aligns(2) := 'C';
    gv_aligns(3) := 'C';
    gv_aligns(4) := 'C';
  
    gv_borders(1) := 'L';
    gv_borders(2) := 1;
    gv_borders(3) := 0;
    gv_borders(4) := 'R';
  
    gv_styles(1) := gc_style_bold;
    gv_styles(2) := gc_style_regular;
    gv_styles(3) := gc_style_regular;
    gv_styles(3) := gc_style_regular;
  
    gv_datas(1) := 'ИТОГО СТРАХОВАЯ ПРЕМИЯ (ВЗНОС):';
    gv_datas(2) := to_char(v_rep_sum.premium, '999g999g999g999d99');
    gv_datas(3) := '( ' || v_rep_sum.sum_speech || ' )';
    gv_datas(4) := '';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    -------------------------------------------------------------------------------------------------
    -- ПЕРИОДИЧНОСТЬ ОПЛАТЫ
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ: Единовременная'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    set_font(par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '* Страховая сумма по рискам «Смерть ЛП» и «Инвалидность» равна размеру первоначальной суммы кредита по кредитному договору на момент его заключения, увеличенной на 10% (десять процентов) В течение действия договора страхования страховая сумма уменьшается в соответствии с первоначальным графиком платежей и равна ссудной задолженности на дату наступления страхового случая в соответствии с первоначальным графиком платежей, увеличенной на 10% (десять процентов). Страховая сумма по риску «ВНТ НС» равна размеру первоначальной суммы кредита Застрахованного по кредитному договору на момент его заключения, увеличенной на 10% (десять процентов), если иное не указано в Договоре страхования (Полисе). Страховая сумма по программе страхования «Дожитие Застрахованного до потери постоянной работы по независящим от него причинам» определяется в соответствии с Приложением к настоящим Полисным условиям.'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '** Любая причина – событие (болезнь или несчастный случай), возникшее в течение действия договора, а также самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
  
    -------------------------------------------------------------------------------------------------
    -- ВЫГОДОПРИОБРЕТАТЕЛИ
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '7. ВЫГОДОПРИОБРЕТАТЕЛЬ:'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    set_font(par_style => gc_style_regular);
  
    IF v_pol_sum.product_brief IN ('CR103_8', 'CR103_9')
    THEN
      l_text := '7.1. Выгодоприобретателями по страховому риску «Смерть Застрахованного по любой причине» настоящего Договора,  в доле, равной размеру ссудной  задолженности Застрахованного по кредиту, согласно первоначальному графику платежей, но не более суммы страховой выплаты является: Наследники';
      plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
      l_text := '7.2. Выгодоприобретателями  по страховому риску  «Инвалидность Застрахованного 1 группы» в доле, равной размеру ссудной  задолженности Застрахованного по кредиту, согласно первоначальному графику платежей, но не более суммы страховой выплаты является Застрахованный;';
      plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
      l_text := '7.3. Выгодоприобретателем по риску «Временная  утрата трудоспособности Застрахованного в результате несчастного случая»  и по риску «Дожитие Застрахованного до потери постоянной работы по независящим от него причинам»  является Застрахованный.';
      plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LRB');
    
    ELSE
      l_text := '7.1. Первым Выгодоприобретателем по страховым рискам «Смерть Застрахованного по любой причине» и «Инвалидность Застрахованного I группы» настоящего Договора, в доле, равной размеру фактической задолженности Застрахованного по кредиту, но не более суммы страховой выплаты является: ' ||
                nvl(get_beneficiary(v_policy_id), '_________________________________________') || '.';
      plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
      l_text := '7.2. Выгодоприобретателями по страховому риску «Смерть Застрахованного по любой причине» в доле, оставшейся после исполнения обязательств по страховой выплате Первому Выгодоприобретателю, указанному п. 7.1. настоящего договора, являются следующие лица: наследники по Закону; 7.3. Выгодоприобретателем по страховому риску «Инвалидность Застрахованного I группы» в доле, оставшейся после исполнения обязательств по страховой выплате Первому Выгодоприобретателю, указанному п. 7.1. настоящего договора, является Застрахованное лицо; 7.4. Выгодоприобретателем по риску «Временная утрата трудоспособности Застрахованного, наступившая в результате несчастного случая» и по риску «Дожитие Застрахованного до потери постоянной работы по независящим от него причинам» является Застрахованный';
      plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LRB');
    END IF;
    -------------------------------------------------------------------------------------------------
    -- ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    plpdf.newpage;
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '8. ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО:'
                            ,p_clipping => 0
                            ,p_border   => 'LRT');
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Настоящим Страхователь/Застрахованный заявляет, что он:'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    set_font(par_style => gc_style_regular);
    l_text := '8.1. НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, нервными расстройствами, психическими заболеваниями; НЕ употребляет наркотики, токсические вещества, НЕ страдает алкоголизмом, и/или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита), а также НЕ страдает иными заболеваниями, ограничивающими физическую активность или повышающими риск травмы, включая нарушения зрения, слуха, функции органов равновесия и т.д.;';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.2. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.3. НЕ страдает/страдал(а) следующими заболеваниями: близорукостью более 7 (семи) диоптрий, хроническая почечная недостаточность, поликистоз почек, неспецифический язвенный колит, болезнь Крона, сахарный диабет, гемофилия, сердечнососудистая патология (включая ишемическую болезнь сердца, аритмии (включая мерцательную аритмию), гипертонию (II-IV степени), тромбоэмболии, аневризмы сосудов, перенесенные инфаркты, инсульты, операции на сердце и сосудах и т.п.), цирроз печени, хронический гепатит, злокачественные или доброкачественные опухоли, туберкулез, а также иными хроническими заболеваниями, требующими постоянных консультаций, лечения, обследований или наблюдения;';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.4. За последние 2 (два) года НЕ находился на больничном листе сроком 3 (три) недели подряд и более (счет по каждому году, не учитывая острую респираторную инфекцию, грипп, травмы, не требующие долгосрочной госпитализации и не связанные с жизнью) и/или НЕ был направлен на стационарное лечение, или за последние 12 месяцев НЕ обращался за медицинской помощью, обследованием или консультацией по причине одного и того же заболевания более одного раза;';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.5. В настоящий момент НЕ находится под наблюдением врача, на лечении, НЕ принимает лекарства в связи с каким-либо заболеванием (нарушением здоровья) или в отношении него НЕ запланировано лечение/операция и он/она НЕ планирует обратиться к врачу по причине какого-либо заболевания в ближайшее время за исключением обращений к стоматологу и/или прохождения периодических осмотров, в течение ближайшего месяца с момента подписания настоящей Декларации;';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.6. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.), а также НЕ занимается опасными видами спорта или опасными видами увлечений (хобби);';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.7. НЕ подавал заявления на страхование жизни, страхование от несчастных случаев и болезней, утраты трудоспособности (инвалидности), от несчастных случаев, в которых ему/ей было отказано, которые были отложены или приняты на особых условиях (с применением повышающих коэффициентов, исключений или особых условий), а также заключенных договоров страхования, которые были расторгнуты по причине невозможности заключения или существенные условия которых были изменены по результатам оценки степени риска;';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.8. НЕ выкуривает более 30 (тридцати) сигарет в день. Разница между ростом (в см.) и весом (в кг.) Застрахованного не менее 80 и не более 120 (например, рост - 180 см, вес - 85 кг, разница составляет - 95, декларацию можно подписать; рост 160 см, вес 85 кг, разница - 75 - декларацию подписать нельзя);';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '8.9. Имеет постоянную работу (постоянный источник дохода) в течение последних 12 (двенадцати) месяцев, в том числе не менее 6 (шести) месяцев на последнем месте работы; Состоит в трудовых отношениях с работодателем на основании трудового договора (за исключением трудового договора с индивидуальным частным предпринимателем), заключенного на неопределенный срок и предусматривающего занятость на полный рабочий день. Получает вознаграждения за свой труд в форме ежемесячной заработной платы; НЕ является акционером (участником) организации работодателя; НЕ является индивидуальным частным предпринимателем; НЕ является близким родственником руководителя работодателя (супруг(а), родитель, ребенок, усыновитель, усыновленный, родной брат, родная сестра, дедушка, бабушка, внуки); НЕ является временным, сезонным рабочим, служащим в отрасли, которая подразумевает сезонный характер в работе; НЕ является временно нетрудоспособным по беременности и родам, НЕ находится в отпуске по уходу за ребенком; НЕ уведомлен о намерении работодателя сократить штат сотрудников или о ликвидации организации работодателя; НЕ является российским/иностранным публичным должностным лицом.';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
  
    -------------------------------------------------------------------------------------------------
    -- ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '9. Дополнительные условия:'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    set_font(par_style => gc_style_regular);
  
    l_text := '9.1. Все письменные заявления Страхователя, относящиеся к настоящему Договору, а также все Приложения и дополнения к настоящему Договору, являются его составной и неотъемлемой частью.';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '9.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в настоящем Договоре, а также во всех Приложениях и дополнительных Соглашениях к нему.';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
  
    -------------------   
  
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Да, я могу подписать настоящую Декларацию и заявляю:'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    set_font(par_style => gc_style_regular);
    --    l_text := 'что я согласен(-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате; что в отношении Застрахованного не заключены и не поданы заявления на заключение других договоров страхования жизни и/или от несчастных случаев в ООО «СК «Ренессанс Жизнь», по которым страховые суммы в отношении каждого риска в сумме со страховыми суммами по аналогичным рискам по данному Договору превышают 5 000 000 (пять миллионов) рублей для Застрахованных в возрасте от 18 (восемнадцати) лет на дату начала срока страхования и до 60 (шестидесяти) лет на дату окончания срока страхования или превышает 2 500 000 (два миллиона пятьсот тысяч) рублей для Застрахованных в возрасте от 61 (шестидесяти одного) года на дату начала срока страхования и до 65 (шестидесяти пяти) лет на дату окончания срока страхования; что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших мне медицинские услуги (обследования, консультации, лечение и т.д.), предоставлять по требованию страховой компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования; что я обязуюсь незамедлительно письменно уведомить Страховщика в случае изменения степени риска при первой представившейся возможности. Я понимаю, что изменение степени риска может повлечь оплату дополнительной страховой премии и/или изменение условий договора страхования. Я также понимаю, что в случае моего отказа проинформировать Страховщика об изменении степени риска и уплатить дополнительную страховую премию и/или изменить условия страхования, договор страхования будет расторгнут Страховщиком в одностороннем порядке и страховые выплаты по нему будут невозможны; что я прочел(-ла), понял(-а) и согласен(-на) с «Полисными условиями страхования жизни и здоровья заемщиков кредита».';
    l_text := 'что я согласен(-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате; что в отношении Застрахованного не заключены и не поданы заявления на заключение других договоров страхования жизни и/или от несчастных случаев в ООО «СК «Ренессанс Жизнь», по которым страховые суммы в отношении каждого риска в сумме со страховыми суммами по аналогичным рискам по данному Договору превышают 5 000 000 (пять миллионов) рублей для Застрахованных в возрасте от 18 (восемнадцати) лет на дату начала срока страхования и до  60 (шестидесяти) лет на дату окончания срока страхования или превышает 2 500 000 (два миллиона пятьсот тысяч) рублей для Застрахованных в возрасте от 61 (шестидесяти одного) года на дату начала срока страхования и до 65 (шестидесяти пяти) лет на дату окончания срока страхования  или превышает 1 500 000 (один миллион пятьсот тысяч) рублей  для  Застрахованных  в  возрасте  от  66  (шестидесяти  шести)  лет  на  дату  начала  срока  страхования  и  до  70  (семидесяти)  лет  на  дату  окончания  срока страхования;; что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших мне медицинские услуги (обследования, консультации, лечение и т.д.), предоставлять по требованию страховой компании ООО «СК «Ренессанс Жизнь» копии медицинских  документов (результаты лабораторных и инструментальных  исследований,  результаты  лечения,  прогноз  по  заболеванию  и  т.д.)  как  в  связи  с  оценкой  степени  страхового  риска,  так  и  в  связи  со страховыми случаями по данному договору страхования; что я обязуюсь незамедлительно письменно уведомить Страховщика в случае изменения степени риска при первой представившейся возможности. Я понимаю, что изменение степени риска может повлечь оплату дополнительной страховой премии и/или изменение условий  договора  страхования.  Я  также  понимаю,  что  в  случае  моего  отказа  проинформировать  Страховщика  об  изменении  степени  риска  и  уплатить дополнительную страховую премию и/или изменить условия страхования, договор страхования  будет расторгнут Страховщиком в одностороннем порядке и страховые выплаты по нему будут невозможны; что я прочел(-ла), понял(-а) и согласен(-на) с «Полисными условиями страхования жизни и здоровья заемщиков кредита».';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := 'Подписывая настоящий Договор, Страхователь в соответствии c ФЗ РФ «О персональных данных» №152-ФЗ от 27.07.2006 выражает Страховщику согласие на обработку, в том числе передачу Агенту по Агентскому договору с ООО "Рольф», перестраховочным организациям (в том числе находящимся за рубежом) своих персональных данных, в том числе данных о состоянии здоровья, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путём осуществления прямых контактов с помощью средств связи, в том числе в целях обеспечения исполнения настоящего Договора, а также выражает Страховщику согласие на предоставление Выгодоприобретателю информации по настоящему Договору, об исполнении Страховщиком и/или Страхователем обязательств по настоящему Договору, в том числе информацию об оплате и размере страховой премии, размере страховой суммы, о возникновении и урегулировании претензий, наступлении/вероятности наступления страховых случаев, страховой выплате и другую имеющую отношение к настоящему Договору информацию. Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия настоящего Договора и в течение 15 лет после окончания срока действия настоящего Договора. Настоящее согласие на обработку персональных данных может быть отозвано посредством направления письменного уведомления в адрес Страховщика.';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    set_font(par_style => gc_style_bold);
  
    /*    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '9. Дополнительные условия:'
                            ,p_clipping => 0
    ,p_border   => 'LR');*/
    -- set_font(par_style => gc_style_regular);
    /*l_text := '9.1. Все письменные заявления Страхователя, относящиеся к настоящему Договору, а также все Приложения и дополнения к настоящему Договору, являются его составной и неотъемлемой частью.';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '9.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в настоящем Договоре, а также во всех Приложениях и дополнительных Соглашениях к нему.';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LR');
    l_text := '9.3. Подписывая настоящий Договор, Страхователь в соответствии c ФЗ РФ «О персональных данных» №152-ФЗ от 27.07.2006 выражает Страховщику согласие на обработку, в том числе передачу Агенту по Агентскому договору с ООО «Рольф», перестраховочным организациям (в том числе находящимся за рубежом) своих персональных данных, в том числе данных о состоянии здоровья, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путём осуществления прямых контактов с помощью средств связи, в том числе в целях обеспечения исполнения настоящего Договора, а также выражает Страховщику согласие на предоставление Выгодоприобретателю информации по настоящему Договору, об исполнении Страховщиком и/или Страхователем обязательств по настоящему Договору, в том числе информацию об оплате и размере страховой премии, размере страховой суммы, о возникновении и урегулировании претензий, наступлении/вероятности наступления страховых случаев, страховой выплате и другую имеющую отношение к настоящему Договору информацию. Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия настоящего Договора и в течение 5 лет после окончания срока действия настоящего Договора. Настоящее согласие на обработку персональных данных может быть отозвано посредством направления письменного уведомления в адрес Страховщика.';
    plpdf.printmultilinecell(p_h => 3, p_txt => l_text, p_clipping => 0, p_border => 'LRB');*/
  
    -------------------------------------------------------------------------------------------------
    -- ПОДПИСИ
    -------------------------------------------------------------------------------------------------
    IF v_pol_sum.status NOT IN ('Ожидает подтверждения из B2B', 'Проект')
    THEN
      plpdf.putimage(p_name => 'image_sign_jpg'
                    ,p_data => v_signer.image_sign
                    ,p_x    => plpdf.getcurrentx + 130
                    ,p_y    => plpdf.getcurrenty
                    ,p_w    => 45
                    ,p_h    => 50);
    END IF;
  
    set_font(par_style => gc_style_bold);
  
    -- Очистка
    delete_row_print_cache;
    -- Шапка таблицы
    gv_widths(1) := 95;
    gv_widths(2) := 95;
  
    gv_aligns(1) := 'L';
    gv_aligns(2) := 'L';
  
    gv_borders(1) := 'LRT';
    gv_borders(2) := 'LRT';
  
    gv_styles(1) := gc_style_bold;
    gv_styles(2) := gc_style_bold;
  
    gv_datas(1) := 'Страхователь/Застрахованный';
    gv_datas(2) := 'Страховщик';
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    gv_borders(1) := 'LRB';
    gv_borders(2) := 'LRB';
  
    gv_styles(1) := gc_style_bold_italic;
    gv_styles(2) := gc_style_bold_italic;
  
    gv_datas(1) := 'Полисные условия по программе страхования жизни и здоровья Заёмщиков кредита получил (а), ознакомлен (а) в полном объеме и согласен(на).' ||
                   chr(13) || 'С назначением Выгодоприобретателей согласен (на)' || chr(13) || chr(13) ||
                   chr(13) || chr(13);
    gv_datas(2) := v_signer.job_position || chr(13) || v_signer.procuratory || chr(13) ||
                   v_signer.name;
  
    plpdf.row_print2(p_h       => 3
                    ,p_width   => gv_widths
                    ,p_data    => gv_datas
                    ,p_border  => gv_borders
                    ,p_align   => gv_aligns
                    ,p_style   => gv_styles
                    ,p_maxline => gv_maxlines);
  
    print_draft(v_pol_sum.status);
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'rolf_credit_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  END rep_rolf_credit;

  /*
    Процедура формирования полиса по продукту Шесть континентов - Уверенный старт
  */
  PROCEDURE rep_rolf_strong_start
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id p_policy.policy_id%TYPE;
    l_blob      BLOB;
    v_text      VARCHAR2(250);
  
    TYPE typ_policy_summary IS RECORD(
       ids                        p_pol_header.ids%TYPE
      ,policy_id                  p_policy.policy_id%TYPE
      ,policy_header_id           p_pol_header.policy_header_id%TYPE
      ,product_id                 t_product.product_id%TYPE
      ,payment_terms_desc         t_payment_terms.description%TYPE
      ,period_desc                t_period.description%TYPE
      ,insuree_contact_id         contact.contact_id%TYPE
      ,insuree_gender             t_gender.description%TYPE
      ,insuree_contact_name       contact.obj_name_orig%TYPE
      ,insuree_date_of_birth      cn_person.date_of_birth%TYPE
      ,insuree_contact_type       t_contact_type.description%TYPE
      ,insuree_contact_type_brief t_contact_type.brief%TYPE
      ,insuree_zip                VARCHAR2(9)
      ,insuree_reg_address_id     cn_address.id%TYPE
      ,insuree_reg_address        cn_address.name%TYPE
      ,insuree_passport           VARCHAR2(1500)
      ,insuree_citizenry_inn      VARCHAR2(255)
      ,insuree_letters_address    cn_address.name%TYPE
      ,insuree_tel                VARCHAR2(255)
      ,insuree_is_public_contact  contact.is_public_contact%TYPE
      ,ins_amount                 p_policy.ins_amount%TYPE
      ,premium                    p_policy.premium%TYPE
      ,start_date                 p_pol_header.start_date%TYPE
      ,end_date                   p_policy.end_date%TYPE
      ,pol_num                    p_policy.pol_num%TYPE
      ,pol_ser                    p_policy.pol_ser%TYPE
      ,status                     doc_status_ref.name%TYPE
      ,currency_code              fund.brief%TYPE
      ,currency_desc              fund.name%TYPE
      ,policy_form                t_policy_form.t_policy_form_name%TYPE);
  
    v_pol_sum typ_policy_summary;
    v_signer  typ_signer;
  
    -- Застрахованные
    CURSOR cur_assured
    (
      par_policy_id        p_policy.policy_id%TYPE
     ,par_asset_type_brief t_asset_type.brief%TYPE DEFAULT 'ASSET_PERSON'
    ) IS
      SELECT CASE asset_type_brief
               WHEN 'ASSET_PERSON' THEN
                'ЗАСТРАХОВАННЫЙ ' || rn || ' (возраст 18-64 лет)'
               WHEN 'ASSET_PERSON_CHILD' THEN
                'ЗАСТРАХОВАННЫЙ ' || rn || ' (возраст 1-17 лет)'
             END assured_header
            ,s.*
        FROM (SELECT decode(par_asset_type_brief, 'ASSET_PERSON_CHILD', 2, 0) + row_number() over(ORDER BY ass.as_asset_id) rn /*02.06.2014 (332897) Черных М. нумерация сквозная*/
                    ,asst.brief asset_type_brief
                    ,ps.assured_contact_name
                    ,ps.assuerd_date_of_birth
                    ,ps.assured_passport
                    ,ps.assured_reg_address
                    ,ps.assured_letters_address
                    ,nvl(ps.assured_mob_tel, ps.assured_home_tel) assured_tel
                FROM v_policy_summary ps
                    ,as_asset         ass
                    ,as_assured       asu
                    ,p_asset_header   assh
                    ,t_asset_type     asst
               WHERE 1 = 1
                 AND ps.policy_id = ass.p_policy_id
                 AND ass.as_asset_id = asu.as_assured_id
                 AND ps.assured_contact_id = asu.assured_contact_id
                 AND ass.p_asset_header_id = assh.p_asset_header_id
                 AND assh.t_asset_type_id = asst.t_asset_type_id
                 AND asst.brief = par_asset_type_brief
                 AND ps.policy_id = par_policy_id
              UNION ALL /*Печать пустых строк, если их нет 332897 02.06.2014 Черных М.*/
              SELECT 2 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_char(NULL) assured_contact_name
                    ,to_date(NULL) assuerd_date_of_birth
                    ,to_char(NULL) assured_passport
                    ,to_char(NULL) assured_reg_address
                    ,to_char(NULL) assured_letters_address
                    ,to_char(NULL) assured_tel
                FROM dual
               WHERE (SELECT COUNT(1)
                        FROM p_policy       ps
                            ,as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ps.policy_id = par_policy_id
                         AND ps.policy_id = ass.p_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = 'ASSET_PERSON') = 1 /*если застрахованный только один, то выводим второго обязательно*/
                 AND par_asset_type_brief = 'ASSET_PERSON'
              UNION ALL /*Печать пустых разделов по детям, если их нет 332897 02.06.2014 Черных М.*/
              SELECT 3 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_char(NULL) assured_contact_name
                    ,to_date(NULL) assuerd_date_of_birth
                    ,to_char(NULL) assured_passport
                    ,to_char(NULL) assured_reg_address
                    ,to_char(NULL) assured_letters_address
                    ,to_char(NULL) assured_tel
                FROM dual
               WHERE NOT EXISTS (SELECT NULL
                        FROM p_policy       ps
                            ,as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ps.policy_id = par_policy_id
                         AND ps.policy_id = ass.p_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = par_asset_type_brief)
              UNION ALL
              SELECT 4 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_char(NULL) assured_contact_name
                    ,to_date(NULL) assuerd_date_of_birth
                    ,to_char(NULL) assured_passport
                    ,to_char(NULL) assured_reg_address
                    ,to_char(NULL) assured_letters_address
                    ,to_char(NULL) assured_tel
                FROM dual
               WHERE NOT EXISTS (SELECT NULL
                        FROM p_policy       ps
                            ,as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ps.policy_id = par_policy_id
                         AND ps.policy_id = ass.p_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = par_asset_type_brief)
              UNION ALL
              SELECT 4 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_char(NULL) assured_contact_name
                    ,to_date(NULL) assuerd_date_of_birth
                    ,to_char(NULL) assured_passport
                    ,to_char(NULL) assured_reg_address
                    ,to_char(NULL) assured_letters_address
                    ,to_char(NULL) assured_tel
                FROM dual /*Вывод второго ребенка, если есть первый*/
               WHERE (SELECT COUNT(1)
                        FROM p_policy       ps
                            ,as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ps.policy_id = par_policy_id
                         AND ps.policy_id = ass.p_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = par_asset_type_brief) = 1
                 AND par_asset_type_brief = 'ASSET_PERSON_CHILD') s;
  
    -- Риски
    CURSOR cur_cover
    (
      par_policy_id        p_policy.policy_id%TYPE
     ,par_product_id       t_product.product_id%TYPE
     ,par_asset_type_brief t_asset_type.brief%TYPE DEFAULT 'ASSET_PERSON'
    ) IS
      SELECT *
        FROM (SELECT ppl.t_product_line_desc AS cover_name
                    ,(SELECT nvl(SUM(pc.ins_amount), 0)
                        FROM p_cover            pc
                            ,as_asset           aa
                            ,p_asset_header     ah
                            ,t_prod_line_option plo
                       WHERE aa.p_policy_id = par_policy_id
                         AND aa.as_asset_id = pc.as_asset_id
                         AND pc.t_prod_line_option_id = plo.id
                         AND aa.p_asset_header_id = ah.p_asset_header_id
                         AND ah.t_asset_type_id = at.t_asset_type_id
                         AND plo.product_line_id = ppl.t_product_line_id) AS cover_ins_amount
                FROM t_as_type_prod_line atpl
                    ,t_asset_type        at
                    ,v_prod_product_line ppl
               WHERE ppl.product_id = par_product_id
                 AND ppl.t_product_line_id = atpl.product_line_id
                 AND atpl.asset_common_type_id = at.t_asset_type_id
                 AND at.brief = par_asset_type_brief
              UNION ALL /*Печатаем риски для детей в индивидуальных продуктах (берем 3 риска с родителя, т.к. дети вообще  не прописаны (костыль) 03.06.2014 Черных М.)*/
              SELECT ppl.t_product_line_desc AS cover_name
                    ,to_number(NULL) cover_ins_amount
                FROM t_as_type_prod_line atpl
                    ,t_asset_type        at
                    ,v_prod_product_line ppl
               WHERE ppl.product_id = par_product_id
                 AND ppl.t_product_line_id = atpl.product_line_id
                 AND atpl.asset_common_type_id = at.t_asset_type_id
                 AND par_asset_type_brief = 'ASSET_PERSON_CHILD'
                 AND ppl.t_product_line_desc IN
                     ('Инвалидность в результате несчастного случая'
                     ,'Инвалидность в результате дорожно-транспортного происшествия'
                     ,'Переломы и ожоги в результате несчастного случая')
                 AND NOT EXISTS (SELECT NULL
                        FROM t_as_type_prod_line atpl
                            ,t_asset_type        at
                            ,v_prod_product_line ppl
                       WHERE ppl.product_id = par_product_id
                         AND ppl.t_product_line_id = atpl.product_line_id
                         AND atpl.asset_common_type_id = at.t_asset_type_id
                         AND at.brief = 'ASSET_PERSON_CHILD')) ppl
       ORDER BY CASE
                  WHEN ppl.cover_name LIKE 'Смерть в результате несч%' THEN
                   1
                  WHEN ppl.cover_name LIKE 'Смерть в результате дор%' THEN
                   2
                  WHEN ppl.cover_name LIKE 'Инвалидность в результате несч%' THEN
                   3
                  WHEN ppl.cover_name LIKE 'Инвалидность в результате дор%' THEN
                   4
                  WHEN ppl.cover_name LIKE 'Переломы и ожоги%' THEN
                   5
                END;
  
    -- Выгодоприобретатели
    CURSOR cur_beneficiary
    (
      par_policy_id p_policy.policy_id%TYPE
     ,par_position  NUMBER DEFAULT 1
    ) IS
      SELECT *
        FROM (SELECT CASE at.brief
                       WHEN 'ASSET_PERSON' THEN
                        1
                       ELSE
                        2
                     END position
                    ,ab.as_beneficiary_id
                    ,nvl(VALUE, 0) VALUE
                    ,aa.as_asset_id
                    ,aa.p_policy_id benif_policy_id
                    ,'Застрахованный(ая) ' ||
                     (SELECT c.obj_name_orig FROM contact c WHERE c.contact_id = su.assured_contact_id) || ':' assured_name
                    ,nvl2(lag(1) over(PARTITION BY aa.as_asset_id ORDER BY nvl(ab.value, 0) DESC
                              ,ab.as_beneficiary_id)
                         ,0
                         ,1) is_first
                    ,c.obj_name_orig contact_name
                    ,(SELECT cp.date_of_birth FROM cn_person cp WHERE cp.contact_id = c.contact_id) date_of_birth
                    ,crt.relationship_dsc
                    ,ab.value || CASE pt.brief
                       WHEN 'percent' THEN
                        '%'
                       ELSE
                        ''
                     END part_value
                FROM as_asset           aa
                    ,as_assured         su
                    ,p_asset_header     ah
                    ,t_asset_type       at
                    ,as_beneficiary     ab
                    ,contact            c
                    ,cn_contact_rel     ccr
                    ,t_contact_rel_type crt
                    ,t_path_type        pt
               WHERE 1 = 1
                 AND aa.as_asset_id = su.as_assured_id
                 AND aa.p_asset_header_id = ah.p_asset_header_id
                 AND ah.t_asset_type_id = at.t_asset_type_id
                 AND ab.as_asset_id = aa.as_asset_id
                 AND ab.contact_id = c.contact_id
                 AND ab.cn_contact_rel_id = ccr.id
                 AND ccr.relationship_type = crt.id
                 AND ab.value_type_id = pt.t_path_type_id
                 AND aa.p_policy_id = par_policy_id
              UNION ALL /*Печать пустой таблицы, если нет выгодоприобретателя 332897 2.06.2014  Черных М.*/
              SELECT 1 position
                    ,to_number(NULL) as_beneficiary_id
                    ,to_number(NULL) VALUE
                    ,to_number(NULL) as_asset_id
                    ,to_number(NULL) benif_policy_id
                    ,'Застрахованный(ая) ' assured_name
                    ,1 is_first
                    ,to_char(NULL) contact_name
                    ,to_date(NULL) date_of_birth
                    ,to_char(NULL) relationship_dsc
                    ,to_char(NULL) part_value
                FROM dual
               WHERE NOT EXISTS (SELECT NULL
                        FROM as_asset       aa
                            ,as_beneficiary ab
                            ,p_asset_header pah
                            ,t_asset_type   tat
                       WHERE aa.p_policy_id = par_policy_id
                         AND aa.as_asset_id = ab.as_asset_id
                         AND aa.p_asset_header_id = pah.p_asset_header_id
                         AND pah.t_asset_type_id = tat.t_asset_type_id
                         AND tat.brief = 'ASSET_PERSON')
              UNION ALL
              SELECT 2 position
                    ,to_number(NULL) as_beneficiary_id
                    ,to_number(NULL) VALUE
                    ,to_number(NULL) as_asset_id
                    ,to_number(NULL) benif_policy_id
                    ,'Застрахованный(ая) ' assured_name
                    ,1 is_first
                    ,to_char(NULL) contact_name
                    ,to_date(NULL) date_of_birth
                    ,to_char(NULL) relationship_dsc
                    ,to_char(NULL) part_value
                FROM dual
               WHERE NOT EXISTS (SELECT NULL
                        FROM as_asset       aa
                            ,as_beneficiary ab
                            ,p_asset_header pah
                            ,t_asset_type   tat
                       WHERE aa.p_policy_id = par_policy_id
                         AND aa.as_asset_id = ab.as_asset_id
                         AND aa.p_asset_header_id = pah.p_asset_header_id
                         AND pah.t_asset_type_id = tat.t_asset_type_id
                         AND tat.brief = 'ASSET_PERSON_CHILD'))
       WHERE position = par_position
       ORDER BY position
               ,as_asset_id
               ,VALUE DESC
               ,as_beneficiary_id;
  
  BEGIN
    v_policy_id := to_number(repcore.get_context('POL_ID'));
  
    BEGIN
      SELECT DISTINCT nvl(ids, 0)
                     ,policy_id
                     ,policy_header_id
                     ,product_id
                     ,payment_terms_desc
                     ,period_desc
                     ,insuree_contact_id
                     ,insuree_gender
                     ,insuree_contact_name
                     ,insuree_date_of_birth
                     ,insuree_contact_type
                     ,insuree_contact_type_brief
                     ,insuree_zip
                     ,insuree_reg_address_id
                     ,insuree_reg_address
                     ,insuree_passport
                     ,insuree_citizenry_inn
                     ,insuree_letters_address
                     ,nvl(insuree_mob_tel, insuree_home_tel)
                     ,insuree_is_public_contact
                     ,ins_amount
                     ,premium
                     ,start_date
                     ,end_date
                     ,nvl(pol_num, ' ') AS pol_num
                     ,pol_ser
                     ,status
                     ,currency_code
                     ,currency_desc
                     ,policy_form
        INTO v_pol_sum
        FROM v_policy_summary
       WHERE policy_id = v_policy_id;
    EXCEPTION
      WHEN no_data_found THEN
        v_pol_sum := NULL;
    END;
  
    v_signer := get_signer('pkg_rep_plpdf.rep_rolf_strong_start');
  
    -- Инициализация
    init(par_default_font_size => 8);
    print_draft(v_pol_sum.status);
  
    -------------------------------------------------------------------------------------------------
    -- ДОГОВОР №
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 12);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'УВЕРЕННЫЙ СТАРТ'
                            ,p_clipping => 0
                            ,p_align    => 'C');
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 10);
    plpdf.printmultilinecell(p_h        => 6
                            ,p_txt      => 'Договор страхования от несчастных случаев № ' ||
                                           v_pol_sum.ids /*pol_num 331788 03.6.2014 Черных М. */
                            ,p_clipping => 0
                            ,p_align    => 'C');
  
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    blank_cell(par_width => 0, par_ln => 1);
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    plpdf.printmultilinecell(p_h => 3, p_txt => '1. СТРАХОВЩИК', p_clipping => 0);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h => 3, p_txt => get_insurer, p_clipping => 0);
  
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    plpdf.printmultilinecell(p_h => 3, p_txt => '2. СТРАХОВАТЕЛЬ', p_clipping => 0);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_w        => 80
                            ,p_h        => 3
                            ,p_txt      => 'Ф.И.О./НАИМЕНОВАНИЕ ОРГАНИЗАЦИИ'
                            ,p_clipping => 0
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => v_pol_sum.insuree_contact_name
                            ,p_clipping => 0
                            ,p_align    => 'L');
    plpdf.printmultilinecell(p_w        => 80
                            ,p_h        => 3
                            ,p_txt      => 'ДАТА РОЖДЕНИЯ'
                            ,p_clipping => 0
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => to_char(v_pol_sum.insuree_date_of_birth, 'dd.mm.yyyy')
                            ,p_clipping => 0
                            ,p_align    => 'L');
    plpdf.printmultilinecell(p_w        => 80
                            ,p_h        => 3
                            ,p_txt      => 'ДОКУМЕНТ, УДОСТОВЕРЯЮЩИЙ ЛИЧНОСТЬ'
                            ,p_clipping => 0
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => v_pol_sum.insuree_passport
                            ,p_clipping => 0
                            ,p_align    => 'L');
    plpdf.printmultilinecell(p_w        => 80
                            ,p_h        => 3
                            ,p_txt      => 'АДРЕС ПОЧТОВЫЙ'
                            ,p_clipping => 0
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => v_pol_sum.insuree_letters_address
                            ,p_clipping => 0
                            ,p_align    => 'L');
    plpdf.printmultilinecell(p_w        => 80
                            ,p_h        => 3
                            ,p_txt      => 'АДРЕС РЕГИСТРАЦИИ'
                            ,p_clipping => 0
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => v_pol_sum.insuree_reg_address
                            ,p_clipping => 0
                            ,p_align    => 'L');
    plpdf.printmultilinecell(p_w        => 80
                            ,p_h        => 3
                            ,p_txt      => 'КОНТАКТНЫЙ ТЕЛЕФОН'
                            ,p_clipping => 0
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => v_pol_sum.insuree_tel
                            ,p_clipping => 0
                            ,p_align    => 'L');
  
    -------------------------------------------------------------------------------------------------
    -- ЗАСТРАХОВАННЫЕ - СУПРУГИ, РОДИТЕЛИ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '3. ЗАСТРАХОВАННЫЕ - СУПРУГИ, РОДИТЕЛИ (УСЫНОВИТЕЛИ) ДЕТЕЙ, ЗАСТРАХОВАННЫХ ПО НАСТОЯЩЕМУ ДОГОВОРУ'
                            ,p_clipping => 0);
  
    FOR cur IN cur_assured(v_policy_id)
    LOOP
      set_font(par_font_family => gc_arial_font_family
              ,par_style       => gc_style_bold
              ,par_color       => gc_color_orange
              ,par_size        => 8);
      plpdf.printmultilinecell(p_h => 3, p_txt => cur.assured_header, p_clipping => 0);
      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'Ф.И.О.'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => cur.assured_contact_name
                              ,p_clipping => 0
                              ,p_align    => 'L');
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'ДАТА РОЖДЕНИЯ'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => to_char(cur.assuerd_date_of_birth, 'dd.mm.yyyy')
                              ,p_clipping => 0
                              ,p_align    => 'L');
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'ДОКУМЕНТ, УДОСТОВЕРЯЮЩИЙ ЛИЧНОСТЬ'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => cur.assured_passport
                              ,p_clipping => 0
                              ,p_align    => 'L');
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'АДРЕС ПОЧТОВЫЙ'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => cur.assured_letters_address
                              ,p_clipping => 0
                              ,p_align    => 'L');
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'АДРЕС РЕГИСТРАЦИИ'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => cur.assured_reg_address
                              ,p_clipping => 0
                              ,p_align    => 'L');
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'КОНТАКТНЫЙ ТЕЛЕФОН'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h => 3, p_txt => cur.assured_tel, p_clipping => 0, p_align => 'L');
    END LOOP;
  
    -------------------------------------------------------------------------------------------------
    -- ЗАСТРАХОВАННЫЕ – ДЕТИ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '4. ЗАСТРАХОВАННЫЕ – ДЕТИ (УСЫНОВЛЕННЫЕ)'
                            ,p_clipping => 0);
  
    FOR cur IN cur_assured(v_policy_id, 'ASSET_PERSON_CHILD')
    LOOP
      set_font(par_font_family => gc_arial_font_family
              ,par_style       => gc_style_bold
              ,par_color       => gc_color_orange
              ,par_size        => 8);
      plpdf.printmultilinecell(p_h => 3, p_txt => cur.assured_header, p_clipping => 0);
      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'Ф.И.О.'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => cur.assured_contact_name
                              ,p_clipping => 0
                              ,p_align    => 'L');
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 3
                              ,p_txt      => 'ДАТА РОЖДЕНИЯ'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => to_char(cur.assuerd_date_of_birth, 'dd.mm.yyyy')
                              ,p_clipping => 0
                              ,p_align    => 'L');
    END LOOP;
  
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ, СТРАХОВЫЕ ВЫПЛАТЫ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    blank_cell(par_width => 0, par_ln => 1);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '5. СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ, СТРАХОВЫЕ ВЫПЛАТЫ'
                            ,p_clipping => 0
                            ,p_border   => 'LTR');
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '5.1. СТРАХОВЫЕ СУММЫ И СТРАХОВАЯ ПРЕМИЯ'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_w        => 120
                            ,p_h        => 6
                            ,p_txt      => 'СТРАХОВЫЕ РИСКИ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ 1 И 2'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'СТРАХОВЫЕ СУММЫ (в Рублях)' || chr(13) ||
                                           '(на каждого Застрахованного)'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C');
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
  
    FOR cur IN cur_cover(v_policy_id, v_pol_sum.product_id, 'ASSET_PERSON')
    LOOP
      plpdf.printmultilinecell(p_w        => 120
                              ,p_h        => 3
                              ,p_txt      => cur.cover_name
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      SELECT to_char(decode(cur.cover_ins_amount, 0, NULL, cur.cover_ins_amount), '999g999g999g999d99')
        INTO v_text
        FROM dual;
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => v_text /*При 0 печатал ,00 Черных М. 332897*/
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'C');
    END LOOP;
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_w        => 120
                            ,p_h        => 6
                            ,p_txt      => 'СТРАХОВЫЕ РИСКИ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ 3 и 4'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    blank_cell(par_width => 0, par_height => 6, par_border => '1', par_ln => 1);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    FOR cur IN cur_cover(v_policy_id, v_pol_sum.product_id, 'ASSET_PERSON_CHILD')
    LOOP
      plpdf.printmultilinecell(p_w        => 120
                              ,p_h        => 3
                              ,p_txt      => cur.cover_name
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      SELECT to_char(decode(cur.cover_ins_amount, 0, NULL, cur.cover_ins_amount), '999g999g999g999d99')
        INTO v_text
        FROM dual;
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => v_text /*При 0 печатал ,00 Черных М. 332897*/
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'C');
    END LOOP;
    -----------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_w        => 120
                            ,p_h        => 6
                            ,p_txt      => 'СТРАХОВАЯ ПРЕМИЯ ПО ДОГОВОРУ СТРАХОВАНИЯ (в Рублях):'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'R'
                            ,p_ln       => 0);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 6
                            ,p_txt      => to_char(v_pol_sum.premium, '999g999g999g999d99')
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C');
    -----------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_w        => 120
                            ,p_h        => 3
                            ,p_txt      => 'Периодичность оплаты страховой премии: единовременно'
                            ,p_clipping => 0
                            ,p_border   => 'LTR'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    blank_cell(par_width => 0, par_height => 3, par_border => 'LTR', par_ln => 1);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold_italic);
    plpdf.printmultilinecell(p_w        => 120
                            ,p_h        => 3
                            ,p_txt      => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.'
                            ,p_clipping => 0
                            ,p_border   => 'LRB'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    blank_cell(par_height => 6, par_width => 0, par_border => 'LRB', par_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    -- МАКСИМАЛЬНЫЕ СТРАХОВЫЕ ВЫПЛАТЫ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '5.2 МАКСИМАЛЬНЫЕ СТРАХОВЫЕ ВЫПЛАТЫ'
                            ,p_clipping => 0
                            ,p_border   => 'LTR');
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '(ЗАВИСЯТ ОТ КОЛИЧЕСТВА ЗАСТРАХОВАННЫХ ЛИЦ, В ОТНОШЕНИИ КОТОРЫХ ПРОИЗОШЕЛ СТРАХОВОЙ СЛУЧАЙ, И ОПРЕДЕЛЯЮТСЯ КАК ПРОЦЕНТ ОТ УКАЗАННЫХ В П 5.1 СТРАХОВЫХХ СУММ)'
                            ,p_clipping => 0
                            ,p_border   => 'LR');
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => 'СОСТАВ ЗАСТРАХОВАННЫХ ЛИЦ, В ОТНОШЕНИИ КОТОРЫХ ПРОИЗОШЕЛ СТРАХОВОЙ СЛУЧАЙ'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 6
                            ,p_txt      => 'ПРОЦЕНТ ОТ БАЗОВЫХ СТРАХОВЫХ СУММ, УКАЗАННЫХ В П. 5.1.'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 2);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 6
                            ,p_txt      => 'Застрахованный 1'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 6
                            ,p_txt      => 'Застрахованный 2'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 6
                            ,p_txt      => 'Застрахованный 3'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 6
                            ,p_txt      => 'Застрахованный 4'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C');
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => '5.2.1. Только один родитель'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '100%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    blank_cell(par_width => 35, par_border => 'LRT', par_ln => 0);
    blank_cell(par_width => 35, par_border => 'LRT', par_ln => 0);
    blank_cell(par_width => 35, par_border => 'LRT', par_ln => 1);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => '5.2.2. Оба родителя'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '100%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '100%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    blank_cell(par_width => 35, par_border => 'LRT', par_ln => 0);
    blank_cell(par_width => 35, par_border => 'LRT', par_ln => 1);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => '5.2.3. Один родитель и один ребенок'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 6
                            ,p_txt      => '100%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    blank_cell(par_height => 6, par_width => 35, par_border => 'LRT', par_ln => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 6
                            ,p_txt      => '100%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    blank_cell(par_height => 6, par_width => 35, par_border => 'LRT', par_ln => 1);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => '5.2.4. Один родитель и двое детей'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '100%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    blank_cell(par_width => 35, par_border => 'LRT', par_ln => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C');
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => '5.2.5. Оба родителя и один ребенок'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '100%'
                            ,p_clipping => 0
                            ,p_border   => 'LRT'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    blank_cell(par_width => 35, par_border => 'LRT', par_ln => 1);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => '5.2.6. Оба родителя и двое детей'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 35
                            ,p_h        => 3
                            ,p_txt      => '50%'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'C'
                            ,p_ln       => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ПОДПИСИ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_w        => 63
                            ,p_h        => 6
                            ,p_txt      => 'Страхователь'
                            ,p_clipping => 0
                            ,p_border   => '0'
                            ,p_ln       => 0);
    blank_cell(par_height => 6, par_width => 63, par_ln => 0);
    plpdf.printmultilinecell(p_w        => 64
                            ,p_h        => 6
                            ,p_txt      => 'Страховщик'
                            ,p_clipping => 0
                            ,p_border   => '0');
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_italic);
    blank_cell(par_width => 126, par_ln => 0);
    IF v_pol_sum.status NOT IN ('Ожидает подтверждения из B2B', 'Проект')
    THEN
      plpdf.putimage(p_name => 'image_sign_jpg'
                    ,p_data => v_signer.image_sign
                    ,p_x    => plpdf.getcurrentx + 5
                    ,p_y    => plpdf.getcurrenty
                    ,p_w    => 45
                    ,p_h    => 50);
    END IF;
    plpdf.printmultilinecell(p_w        => 64
                            ,p_h        => 3
                            ,p_txt      => v_signer.job_position || chr(13) || v_signer.procuratory ||
                                           chr(13) || v_signer.name
                            ,p_clipping => 0
                            ,p_border   => '0');
    plpdf.printcell(p_w          => 63
                   ,p_h          => 6
                   ,p_txt        => '______________________________ '
                   ,p_clipping   => 0
                   ,p_border     => '0'
                   ,p_align      => 'L'
                   ,p_vert_align => 'B'
                   ,p_ln         => 1);
    blank_cell(par_width => 0, par_height => 15, par_ln => 1);
    /* New Page */
    IF plpdf.currentpagenumber = 1
    THEN
      plpdf.newpage;
    END IF;
  
    -------------------------------------------------------------------------------------------------
    -- ПЕРИОД СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '6. ПЕРИОД СТРАХОВАНИЯ'
                            ,p_clipping => 0);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_w        => 50
                            ,p_h        => 3
                            ,p_txt      => 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ:'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 30
                            ,p_h        => 6
                            ,p_txt      => v_pol_sum.period_desc
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 30
                            ,p_h        => 6
                            ,p_txt      => 'НАЧАЛО:'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 25
                            ,p_h        => 6
                            ,p_txt      => to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' 00:00'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 30
                            ,p_h        => 6
                            ,p_txt      => 'ОКОНЧАНИЕ:'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_w        => 25
                            ,p_h        => 6
                            ,p_txt      => to_char(v_pol_sum.end_date, 'dd.mm.yyyy') || ' 23:59'
                            ,p_clipping => 0
                            ,p_border   => '1'
                            ,p_align    => 'L');
  
    -------------------------------------------------------------------------------------------------
    -- ВЫГОДОПРИОБРЕТАТЕЛИ
    -------------------------------------------------------------------------------------------------
  
    FOR cur IN cur_beneficiary(v_policy_id, 1)
    LOOP
      IF cur.is_first = 1
      THEN
        set_font(par_font_family => gc_arial_font_family
                ,par_style       => gc_style_bold
                ,par_color       => gc_color_orange
                ,par_size        => 8);
        blank_cell(par_width => 0, par_ln => 1);
        plpdf.printmultilinecell(p_h        => 3
                                ,p_txt      => '7. ВЫГОДОПРИОБРЕТАТЕЛИ'
                                ,p_clipping => 0);
        set_font(par_font_family => gc_arial_font_family
                ,par_style       => gc_style_bold
                ,par_color       => gc_color_orange
                ,par_size        => 7);
        plpdf.printmultilinecell(p_h        => 3
                                ,p_txt      => 'НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННЫХ 1 И 2:'
                                ,p_clipping => 0);
        set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
        plpdf.printmultilinecell(p_w        => 80
                                ,p_h        => 9
                                ,p_txt      => 'Ф.И.О.'
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'С'
                                ,p_ln       => 0);
        plpdf.printmultilinecell(p_w        => 30
                                ,p_h        => 9
                                ,p_txt      => 'ДАТА РОЖДЕНИЯ'
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'С'
                                ,p_ln       => 0);
        plpdf.printmultilinecell(p_w        => 50
                                ,p_h        => 4.5
                                ,p_txt      => 'СТЕПЕНЬ РОДСТВА С ЗАСТРАХОВАННЫМ 1'
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'С'
                                ,p_ln       => 0);
        plpdf.printmultilinecell(p_w        => 30
                                ,p_h        => 3
                                ,p_txt      => 'ДОЛЯ ОТ СТРАХОВОЙ ВЫПЛАТЫ, %'
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'С');
        set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
      END IF;
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 6
                              ,p_txt      => cur.contact_name
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 30
                              ,p_h        => 6
                              ,p_txt      => to_char(cur.date_of_birth, 'dd.mm.yyyy')
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 50
                              ,p_h        => 6
                              ,p_txt      => cur.relationship_dsc
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 30
                              ,p_h        => 6
                              ,p_txt      => cur.part_value
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 1);
    END LOOP;
  
    FOR cur IN cur_beneficiary(v_policy_id, 2)
    LOOP
      IF cur.is_first = 1
      THEN
        set_font(par_font_family => gc_arial_font_family
                ,par_style       => gc_style_bold
                ,par_color       => gc_color_orange
                ,par_size        => 7);
        plpdf.printmultilinecell(p_h        => 3
                                ,p_txt      => 'ПО ВСЕМ РИСКАМ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ 3 И 4:'
                                ,p_clipping => 0);
        set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
      END IF;
      plpdf.printmultilinecell(p_w        => 80
                              ,p_h        => 6
                              ,p_txt      => cur.contact_name
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 30
                              ,p_h        => 6
                              ,p_txt      => to_char(cur.date_of_birth, 'dd.mm.yyyy')
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 50
                              ,p_h        => 6
                              ,p_txt      => cur.relationship_dsc
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 30
                              ,p_h        => 6
                              ,p_txt      => cur.part_value
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'L'
                              ,p_ln       => 1);
    END LOOP;
  
    -------------------------------------------------------------------------------------------------
    -- ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    blank_cell(par_width => 0, par_ln => 1);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '8. ДЕКЛАРАЦИЯ ЗАСТРАХОВАННОГО'
                            ,p_clipping => 0);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Настоящим я (Страхователь/Застрахованный) заявляю, что никто из Застрахованных по настоящему Договору страхования:'
                            ,p_clipping => 0
                            ,p_align    => 'L');
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ страдает мышечной дистрофией, нервными расстройствами, в том числе неврозами и тиками, психическими заболеваниями;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ употребляет наркотики, токсические вещества, НЕ страдает алкоголизмом, или НЕ состоит по перечисленным причинам на диспансерном учете;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ страдает иными заболеваниями, ограничивающими физическую активность или повышающими риск травмы, включая нарушения зрения, слуха, функции органов равновесия и т.д.;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.);'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ занимается опасными видами спорта или опасными видами увлечений (хобби);'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'НЕ является иностранным публичным должностным лицом.'
                            ,p_clipping => 0);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Да, я (Страхователь / Застрахованный) могу подписать настоящую Декларацию и заявляю:'
                            ,p_clipping => 0
                            ,p_align    => 'L');
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'что я согласен(-на) с утверждениями, заявленными в настоящей Декларации, т.е. я подтверждаю достоверность сведений содержащейся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторн ых и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по д анному договору страхования;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'что в отношении Застрахованных не заключены и не поданы заявления на заключение других договоров страхования по программе «Уверенный старт» в ООО «СК «Ренессанс Жизнь» и общая страховая сумма по любым договорам страхования, заключенным в отношении Застрахованных по рискам «смерть по любой при чине»/«смерть в результате несчастного случая», не превышает 2 000 000 (два миллиона) рублей.'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Подписывая настоящий Договор, Страхователь в соответствии c ФЗ РФ «О персональных данных» №152-ФЗ от 27.07.2006 выражает Страховщику согласие на обработку, в том числе передачу перестраховочным организациям (в том числе находящимся за рубежом) своих персональных данных, в том числе данных о состоянии здоровья, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке пут?м осуществления прямых контактов с помощью средств связи, в том числе в целях обеспечения исполнения настоящего Договора, а также выражает Страховщику согласие на предоставление Выгодоприобретателю инфор мации по настоящему Договору, об исполнении Страховщиком и/или Страхователем обязательств по настоящему Договору, в том числе информацию об оплате и размере страховой премии, размере страховой суммы, о возникновении и урегулировании претензий, наступлении/вероятности наступления страховых случаев, страховой выплате и другую и меющую отношение к настоящему Договору информацию. Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия настоящего Договора и в течение 5 лет после окончания срока действия настоящего Договора.'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия Договора страхования и в течение 5 лет после окончания срока действия Договора и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем /Застрахованным письменного уведомления.'
                            ,p_clipping => 0);
    blank_cell(par_width => 0, par_ln => 1);
    set_font(par_font_family => gc_arial_font_family
            ,par_style       => gc_style_bold
            ,par_color       => gc_color_orange
            ,par_size        => 8);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '9. ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ'
                            ,p_clipping => 0);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '1. ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН НА ОСНОВАНИИ ПОЛИСНЫХ УСЛОВИЙ К ДОГОВОРУ СТРАХОВАНИЯ ЖИЗНИ ПО ПРОГРАММЕ «УВЕРЕННЫЙ СТАРТ »;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '2. СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ПОЛИСЕ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '3. ТЕРРИТОРИЯ СТРАХОВАНИЯ: ВЕСЬ МИР;'
                            ,p_clipping => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => '4. ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ: 24 ЧАСА В СУТКИ'
                            ,p_clipping => 0);
    blank_cell(par_width => 0, par_ln => 1);
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold_italic);
    plpdf.printmultilinecell(p_w        => 60
                            ,p_h        => 6
                            ,p_txt      => 'К Договору страхования прилагаются:'
                            ,p_clipping => 0
                            ,p_align    => 'L'
                            ,p_ln       => 0);
    plpdf.printmultilinecell(p_h        => 3
                            ,p_txt      => 'Приложение №1: Полисные условия по программе «Уверенный старт» и Таблица страховых выплат по риску «Переломы и ожоги в результате несчастного случая»'
                            ,p_clipping => 0
                            ,p_align    => 'L');
    blank_cell(par_width => 0, par_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ПОДПИСИ
    -------------------------------------------------------------------------------------------------
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
    plpdf.printmultilinecell(p_w        => 63
                            ,p_h        => 6
                            ,p_txt      => 'Страхователь'
                            ,p_clipping => 0
                            ,p_border   => '0'
                            ,p_ln       => 0);
    blank_cell(par_height => 6, par_width => 63, par_ln => 0);
    plpdf.printmultilinecell(p_w        => 64
                            ,p_h        => 6
                            ,p_txt      => 'Страховщик'
                            ,p_clipping => 0
                            ,p_border   => '0');
    set_font(par_font_family => gc_arial_font_family, par_style => gc_style_italic);
    -- blank_cell(par_width => 126, par_ln => 0);
    /*Добавлено ФИО страхователя 28.05.2014 Черных М.*/
    plpdf.printmultilinecell(p_w        => 126
                            ,p_h        => 6
                            ,p_txt      => v_pol_sum.insuree_contact_name
                            ,p_clipping => 0
                            ,p_border   => '0'
                            ,p_ln       => 0);
  
    IF v_pol_sum.status NOT IN ('Ожидает подтверждения из B2B', 'Проект')
    THEN
      plpdf.putimage(p_name => 'image_sign_jpg'
                    ,p_data => v_signer.image_sign
                    ,p_x    => plpdf.getcurrentx + 5
                    ,p_y    => plpdf.getcurrenty
                    ,p_w    => 45
                    ,p_h    => 50);
    END IF;
    plpdf.printmultilinecell(p_w        => 64
                            ,p_h        => 3
                            ,p_txt      => v_signer.job_position || chr(13) || v_signer.procuratory ||
                                           chr(13) || v_signer.name
                            ,p_clipping => 0
                            ,p_border   => '0');
    plpdf.printcell(p_w          => 63
                   ,p_h          => 6
                   ,p_txt        => 'Полисные условия по программе «Уверенный старт» получил'
                   ,p_clipping   => 0
                   ,p_border     => '0'
                   ,p_align      => 'L'
                   ,p_vert_align => 'B'
                   ,p_ln         => 0);
  
    print_draft(v_pol_sum.status);
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'strong_start_' || v_pol_sum.ids || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_rolf_strong_start;

  /*
    Пиядин А.
    Анкета финмониторинг по 301732 ТЗ Финмониторинг
  */
  PROCEDURE rep_anketa_finmon
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    par_policy_id p_policy.policy_id%TYPE;
    v_fl          NUMBER;
    v_ip          NUMBER;
    v_ul          NUMBER;
    v_continue    NUMBER := 1;
  
    l_blob BLOB;
  
    TYPE t_policy IS RECORD(
       pol_ser   p_policy.pol_ser%TYPE
      ,pol_num   p_policy.pol_num%TYPE
      ,sign_date p_policy.sign_date%TYPE);
  
    v_policy t_policy;
  
    CURSOR cur_fl(par_policy_id p_policy.policy_id%TYPE) IS
      SELECT contact_id
            ,obj_name_orig
            ,date_of_birth
            ,wm_concat(cont_role) cont_role
            ,cont_ident_name
            ,cont_ident_ser
            ,cont_ident_num
            ,cont_ident_issue_date
            ,cont_ident_place_of_issue
            ,cont_address
            ,citizenry
            ,cont_inn
            ,cont_reg_svid
            ,cont_reg_svid_issue_date
            ,cont_ipdl
            ,cont_rpdl
            ,last_update_date
        FROM v_rep_finmon
       WHERE policy_id = par_policy_id
         AND cont_type = 'ФЛ'
         AND premium_rur >= 5000
       GROUP BY contact_id
               ,obj_name_orig
               ,date_of_birth
               ,cont_ident_name
               ,cont_ident_ser
               ,cont_ident_num
               ,cont_ident_issue_date
               ,cont_ident_place_of_issue
               ,cont_address
               ,citizenry
               ,cont_inn
               ,cont_reg_svid
               ,cont_reg_svid_issue_date
               ,cont_ipdl
               ,cont_rpdl
               ,last_update_date;
  
    CURSOR cur_ip(par_policy_id p_policy.policy_id%TYPE) IS
      SELECT contact_id
            ,obj_name_orig
            ,date_of_birth
            ,wm_concat(cont_role) cont_role
            ,cont_ident_name
            ,cont_ident_ser
            ,cont_ident_num
            ,cont_ident_issue_date
            ,cont_ident_place_of_issue
            ,cont_address
            ,citizenry
            ,cont_inn
            ,cont_reg_svid
            ,cont_reg_svid_issue_date
            ,cont_ipdl
            ,cont_rpdl
        FROM v_rep_finmon
       WHERE policy_id = par_policy_id
         AND cont_type = 'ИП'
       GROUP BY contact_id
               ,obj_name_orig
               ,date_of_birth
               ,cont_ident_name
               ,cont_ident_ser
               ,cont_ident_num
               ,cont_ident_issue_date
               ,cont_ident_place_of_issue
               ,cont_address
               ,citizenry
               ,cont_inn
               ,cont_reg_svid
               ,cont_reg_svid_issue_date
               ,cont_ipdl
               ,cont_rpdl;
  
    CURSOR cur_ul(par_policy_id p_policy.policy_id%TYPE) IS
      SELECT obj_name_orig
            ,wm_concat(cont_role) cont_role
            ,cont_ogrn
            ,cont_ogrn_issue_date
            ,cont_address
            ,cont_inn
            ,cont_kio
            ,cont_benicif_fio
            ,cont_benicif_dob
            ,cont_benicif_doc_type
            ,cont_benicif_doc_num
            ,cont_benicif_doc_issue_date
            ,cont_benicif_doc_issue
            ,cont_benicif_address
        FROM (SELECT DISTINCT f.obj_name_orig
                             ,f.cont_role
                             ,cont_ogrn
                             ,cont_ogrn_issue_date
                             ,cont_address
                             ,cont_inn
                             ,cont_kio
                             ,CASE
                                WHEN crt.brief = 'Бенефициарный владелецЮридическое лицо' THEN
                                 c_cr.obj_name_orig
                                ELSE
                                 ''
                              END cont_benicif_fio
                             ,CASE
                                WHEN crt.brief = 'Бенефициарный владелецЮридическое лицо' THEN
                                 to_char(cp_cr.date_of_birth, 'dd.mm.yyyy')
                                ELSE
                                 ''
                              END cont_benicif_dob
                             ,CASE
                                WHEN crt.brief = 'Бенефициарный владелецЮридическое лицо' THEN
                                 (SELECT it.description
                                    FROM cn_contact_ident ci_cr
                                        ,t_id_type        it
                                   WHERE ci_cr.table_id =
                                         pkg_rep_utils.get_finmon_ident_id(c_cr.contact_id
                                                                          ,v_policy.sign_date)
                                     AND ci_cr.contact_id = c_cr.contact_id
                                     AND ci_cr.id_type = it.id)
                                ELSE
                                 ''
                              END cont_benicif_doc_type
                             ,CASE
                                WHEN crt.brief = 'Бенефициарный владелецЮридическое лицо' THEN
                                 (SELECT ci_cr.serial_nr || ' ' || ci_cr.id_value
                                    FROM cn_contact_ident ci_cr
                                   WHERE ci_cr.table_id =
                                         pkg_rep_utils.get_finmon_ident_id(c_cr.contact_id
                                                                          ,v_policy.sign_date)
                                     AND ci_cr.contact_id = c_cr.contact_id)
                                ELSE
                                 ''
                              END cont_benicif_doc_num
                             ,CASE
                                WHEN crt.brief = 'Бенефициарный владелецЮридическое лицо' THEN
                                 (SELECT to_char(ci_cr.issue_date, 'dd.mm.yyyy')
                                    FROM cn_contact_ident ci_cr
                                   WHERE ci_cr.table_id =
                                         pkg_rep_utils.get_finmon_ident_id(c_cr.contact_id
                                                                          ,v_policy.sign_date)
                                     AND ci_cr.contact_id = c_cr.contact_id)
                                ELSE
                                 ''
                              END cont_benicif_doc_issue_date
                             ,CASE
                                WHEN crt.brief = 'Бенефициарный владелецЮридическое лицо' THEN
                                 (SELECT ci_cr.place_of_issue
                                    FROM cn_contact_ident ci_cr
                                   WHERE ci_cr.table_id =
                                         pkg_rep_utils.get_finmon_ident_id(c_cr.contact_id
                                                                          ,v_policy.sign_date)
                                     AND ci_cr.contact_id = c_cr.contact_id)
                                ELSE
                                 ''
                              END cont_benicif_doc_issue
                             ,CASE
                                WHEN crt.brief = 'Бенефициарный владелецЮридическое лицо' THEN
                                 pkg_contact_rep_utils.get_address(coalesce(pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'FK_CONST')
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'CONST') -- Адрес постоянной регистрации
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'FK_TEMPORARY')
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'TEMPORARY') -- Адрес временной регистрации
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'FK_DOMADD')
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'DOMADD') -- Домашний адрес
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'FK_POSTAL')
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'POSTAL') -- Почтовый адрес
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'FK_FACT')
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'FACT') -- Адрес фактического нахождения
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'FK_LEGAL')
                                                                           ,pkg_contact_rep_utils.get_last_active_address_id(c_cr.contact_id
                                                                                                                            ,'LEGAL'))) -- Юридический адрес
                                ELSE
                                 ''
                              END cont_benicif_address
                FROM v_rep_finmon       f
                    ,cn_contact_rel     cr
                    ,t_contact_rel_type crt
                    ,contact            c_cr
                    ,cn_person          cp_cr
               WHERE f.policy_id = par_policy_id
                 AND cr.contact_id_a = f.contact_id
                 AND cr.relationship_type = crt.id
                 AND cr.contact_id_b = c_cr.contact_id
                 AND c_cr.contact_id = cp_cr.contact_id(+)
                 AND cont_type = 'ЮЛ')
       GROUP BY obj_name_orig
               ,cont_ogrn
               ,cont_ogrn_issue_date
               ,cont_address
               ,cont_inn
               ,cont_kio
               ,cont_benicif_fio
               ,cont_benicif_dob
               ,cont_benicif_doc_type
               ,cont_benicif_doc_num
               ,cont_benicif_doc_issue_date
               ,cont_benicif_doc_issue
               ,cont_benicif_address;
  BEGIN
    par_policy_id := to_number(repcore.get_context('POL_ID'));
  
    BEGIN
      SELECT DISTINCT pol_ser
                     ,pol_num
                     ,sign_date
        INTO v_policy.pol_ser
            ,v_policy.pol_num
            ,v_policy.sign_date
        FROM v_rep_finmon
       WHERE policy_id = par_policy_id
         AND (cont_type IN ('ИП', 'ЮЛ') OR (cont_type = 'ФЛ' AND premium_rur >= 5000));
    EXCEPTION
      WHEN no_data_found THEN
        v_continue := 0;
    END;
  
    IF v_continue = 1
    THEN
      SELECT MAX(CASE
                   WHEN cont_type = 'ФЛ' THEN
                    cnt
                   ELSE
                    0
                 END)
            ,MAX(CASE
                   WHEN cont_type = 'ИП' THEN
                    cnt
                   ELSE
                    0
                 END)
            ,MAX(CASE
                   WHEN cont_type = 'ЮЛ' THEN
                    cnt
                   ELSE
                    0
                 END)
        INTO v_fl
            ,v_ip
            ,v_ul
        FROM (SELECT cont_type
                    ,COUNT(*) cnt
                FROM v_rep_finmon
               WHERE policy_id = par_policy_id
                 AND (cont_type IN ('ИП', 'ЮЛ') OR (cont_type = 'ФЛ' AND premium_rur >= 5000))
               GROUP BY cont_type);
    
      -- Инициализация
      plpdf.init(p_orientation => 'L');
      font_init;
      plpdf.newpage;
    
      -------------------------------------------------------------------------------------------------
      -- ЗАГОЛОВОК
      -------------------------------------------------------------------------------------------------
      set_times_font(par_type => gc_font_times_bold, par_size => 16);
      /* Draws a rectangle cell with text inside. */
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => 'АНКЕТА по договору страхования'
                              ,p_clipping => 0
                              ,p_align    => 'C');
    
      set_times_font;
      plpdf.printmultilinecell(p_w        => 95
                              ,p_h        => 12
                              ,p_txt      => 'Серия: ' || v_policy.pol_ser
                              ,p_clipping => 0
                              ,p_align    => 'R'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 95
                              ,p_h        => 12
                              ,p_txt      => 'Номер: ' || v_policy.pol_num
                              ,p_clipping => 0
                              ,p_align    => 'C'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 12
                              ,p_txt      => 'Дата заключения: ' || v_policy.sign_date
                              ,p_clipping => 0
                              ,p_align    => 'L');
    
      -------------------------------------------------------------------------------------------------
      -- Физические лица
      -------------------------------------------------------------------------------------------------
      IF v_fl > 0
      THEN
        delete_row_print_cache;
      
        set_times_font(par_type => gc_font_times_bold, par_size => 10);
        /* Draws a rectangle cell with text inside. */
        plpdf.printmultilinecell(p_h        => 12
                                ,p_txt      => 'Физические лица'
                                ,p_clipping => 0
                                ,p_align    => 'L');
      
        -- Шапка таблицы
        gv_widths(1) := 30;
        gv_widths(2) := 20;
        gv_widths(3) := 20;
        gv_widths(4) := 20;
        gv_widths(5) := 20;
        gv_widths(6) := 20;
        gv_widths(7) := 30;
        gv_widths(8) := 35;
        gv_widths(9) := 15;
        gv_widths(10) := 20;
        gv_widths(11) := 16;
        gv_widths(12) := 16;
        gv_widths(13) := 20;
      
        FOR v_idx IN 1 .. 13
        LOOP
          gv_aligns(v_idx) := 'С';
          gv_borders(v_idx) := 1;
          gv_styles(v_idx) := NULL;
        END LOOP;
      
        gv_datas(1) := 'ФИО';
        gv_datas(2) := 'Дата рождения';
        gv_datas(3) := 'Роль';
        gv_datas(4) := 'Документ';
        gv_datas(5) := 'Серия и номер';
        gv_datas(6) := 'Дата выдачи';
        gv_datas(7) := 'Кем выдан';
        gv_datas(8) := 'Адрес';
        gv_datas(9) := 'Гражданство';
        gv_datas(10) := 'ИНН';
        gv_datas(11) := 'ИПДЛ';
        gv_datas(12) := 'РПДЛ';
        gv_datas(13) := 'Дата последнего обновления';
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
        -- Строки таблицы
        set_times_font(par_type => gc_font_times_normal, par_size => 10);
        FOR cur IN cur_fl(par_policy_id)
        LOOP
          gv_datas(1) := cur.obj_name_orig;
          gv_datas(2) := cur.date_of_birth;
          gv_datas(3) := cur.cont_role;
          gv_datas(4) := cur.cont_ident_name;
          gv_datas(5) := cur.cont_ident_ser || ' ' || cur.cont_ident_num;
          gv_datas(6) := cur.cont_ident_issue_date;
          gv_datas(7) := cur.cont_ident_place_of_issue;
          gv_datas(8) := cur.cont_address;
          gv_datas(9) := cur.citizenry;
          gv_datas(10) := cur.cont_inn;
          gv_datas(11) := cur.cont_ipdl;
          gv_datas(12) := cur.cont_rpdl;
          gv_datas(13) := cur.last_update_date;
        
          plpdf.row_print2(p_data    => gv_datas
                          ,p_border  => gv_borders
                          ,p_align   => gv_aligns
                          ,p_width   => gv_widths
                          ,p_style   => gv_styles
                          ,p_maxline => gv_maxlines);
        END LOOP;
      END IF;
    
      -------------------------------------------------------------------------------------------------
      -- Индивидуальные предприниматели
      -------------------------------------------------------------------------------------------------
      IF v_ip > 0
      THEN
        delete_row_print_cache;
      
        set_times_font(par_type => gc_font_times_bold, par_size => 10);
        /* Draws a rectangle cell with text inside. */
        plpdf.printmultilinecell(p_h        => 12
                                ,p_txt      => 'Индивидуальные предприниматели'
                                ,p_clipping => 0
                                ,p_align    => 'L');
      
        -- Шапка таблицы
        gv_widths(1) := 30;
        gv_widths(2) := 20;
        gv_widths(3) := 20;
        gv_widths(4) := 20;
        gv_widths(5) := 20;
        gv_widths(6) := 20;
        gv_widths(7) := 30;
        gv_widths(8) := 40;
        gv_widths(9) := 15;
        gv_widths(10) := 20;
        gv_widths(11) := 20;
        gv_widths(12) := 20;
        gv_widths(13) := 10;
        gv_widths(14) := 10;
      
        gv_aligns(1) := 'С';
        gv_aligns(2) := 'C';
        gv_aligns(3) := 'C';
        gv_aligns(4) := 'C';
        gv_aligns(5) := 'C';
        gv_aligns(6) := 'C';
        gv_aligns(7) := 'C';
        gv_aligns(8) := 'C';
        gv_aligns(9) := 'C';
        gv_aligns(10) := 'C';
        gv_aligns(11) := 'C';
        gv_aligns(12) := 'C';
        gv_aligns(13) := 'C';
        gv_aligns(14) := 'C';
      
        gv_borders(1) := 1;
        gv_borders(2) := 1;
        gv_borders(3) := 1;
        gv_borders(4) := 1;
        gv_borders(5) := 1;
        gv_borders(6) := 1;
        gv_borders(7) := 1;
        gv_borders(8) := 1;
        gv_borders(9) := 1;
        gv_borders(10) := 1;
        gv_borders(11) := 1;
        gv_borders(12) := 1;
        gv_borders(13) := 1;
        gv_borders(14) := 1;
      
        gv_styles(1) := NULL;
        gv_styles(2) := NULL;
        gv_styles(3) := NULL;
        gv_styles(4) := NULL;
        gv_styles(5) := NULL;
        gv_styles(6) := NULL;
        gv_styles(7) := NULL;
        gv_styles(8) := NULL;
        gv_styles(9) := NULL;
        gv_styles(10) := NULL;
        gv_styles(11) := NULL;
        gv_styles(12) := NULL;
        gv_styles(13) := NULL;
        gv_styles(14) := NULL;
      
        gv_datas(1) := 'ФИО';
        gv_datas(2) := 'Дата рождения';
        gv_datas(3) := 'Роль';
        gv_datas(4) := 'Документ';
        gv_datas(5) := 'Серия и номер';
        gv_datas(6) := 'Дата выдачи';
        gv_datas(7) := 'Кем выдан';
        gv_datas(8) := 'Адрес';
        gv_datas(9) := 'Гражданство';
        gv_datas(10) := 'ИНН';
        gv_datas(11) := 'ОГРН ИП';
        gv_datas(12) := 'Дата выдачи';
        gv_datas(13) := 'ИПДЛ';
        gv_datas(14) := 'РПДЛ';
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
        -- Строки таблицы
        set_times_font(par_type => gc_font_times_normal, par_size => 10);
        FOR cur IN cur_ip(par_policy_id)
        LOOP
          gv_datas(1) := cur.obj_name_orig;
          gv_datas(2) := cur.date_of_birth;
          gv_datas(3) := cur.cont_role;
          gv_datas(4) := cur.cont_ident_name;
          gv_datas(5) := cur.cont_ident_ser || ' ' || cur.cont_ident_num;
          gv_datas(6) := cur.cont_ident_issue_date;
          gv_datas(7) := cur.cont_ident_place_of_issue;
          gv_datas(8) := cur.cont_address;
          gv_datas(9) := cur.citizenry;
          gv_datas(10) := cur.cont_inn;
          gv_datas(11) := cur.cont_reg_svid;
          gv_datas(12) := cur.cont_reg_svid_issue_date;
          gv_datas(13) := cur.cont_ipdl;
          gv_datas(14) := cur.cont_rpdl;
        
          plpdf.row_print2(p_data    => gv_datas
                          ,p_border  => gv_borders
                          ,p_align   => gv_aligns
                          ,p_width   => gv_widths
                          ,p_style   => gv_styles
                          ,p_maxline => gv_maxlines);
        END LOOP;
      END IF;
    
      -------------------------------------------------------------------------------------------------
      -- Юридические лица
      -------------------------------------------------------------------------------------------------
      IF v_ul > 0
      THEN
        delete_row_print_cache;
      
        set_times_font(par_type => gc_font_times_bold, par_size => 10);
        /* Draws a rectangle cell with text inside. */
        plpdf.printmultilinecell(p_h        => 12
                                ,p_txt      => 'Юридические лица'
                                ,p_clipping => 0
                                ,p_align    => 'L');
      
        -- Шапка таблицы
        gv_widths(1) := 30;
        gv_widths(2) := 20;
        gv_widths(3) := 20;
        gv_widths(4) := 20;
        gv_widths(5) := 20;
        gv_widths(6) := 25;
        gv_widths(7) := 25;
        gv_widths(8) := 20;
        gv_widths(9) := 20;
        gv_widths(10) := 20;
        gv_widths(11) := 20;
        gv_widths(12) := 20;
        gv_widths(13) := 25;
      
        gv_aligns(1) := 'С';
        gv_aligns(2) := 'C';
        gv_aligns(3) := 'C';
        gv_aligns(4) := 'C';
        gv_aligns(5) := 'C';
        gv_aligns(6) := 'C';
        gv_aligns(7) := 'C';
        gv_aligns(8) := 'C';
        gv_aligns(9) := 'C';
        gv_aligns(10) := 'C';
        gv_aligns(11) := 'C';
        gv_aligns(12) := 'C';
        gv_aligns(13) := 'C';
      
        gv_borders(1) := 1;
        gv_borders(2) := 1;
        gv_borders(3) := 1;
        gv_borders(4) := 1;
        gv_borders(5) := 1;
        gv_borders(6) := 1;
        gv_borders(7) := 1;
        gv_borders(8) := 1;
        gv_borders(9) := 1;
        gv_borders(10) := 1;
        gv_borders(11) := 1;
        gv_borders(12) := 1;
        gv_borders(13) := 1;
      
        gv_styles(1) := NULL;
        gv_styles(2) := NULL;
        gv_styles(3) := NULL;
        gv_styles(4) := NULL;
        gv_styles(5) := NULL;
        gv_styles(6) := NULL;
        gv_styles(7) := NULL;
        gv_styles(8) := NULL;
        gv_styles(9) := NULL;
        gv_styles(10) := NULL;
        gv_styles(11) := NULL;
        gv_styles(12) := NULL;
        gv_styles(13) := NULL;
      
        gv_datas(1) := 'Наименование';
        gv_datas(2) := 'Роль';
        gv_datas(3) := 'ИНН / КИО';
        gv_datas(4) := 'ОГРН';
        gv_datas(5) := 'Дата регистрации';
        gv_datas(6) := 'Адрес местонахождения';
        gv_datas(7) := 'Бенефециарный владелец';
        gv_datas(8) := 'Дата рождения';
        gv_datas(9) := 'Документ';
        gv_datas(10) := 'Серия и номер';
        gv_datas(11) := 'Дата выдачи';
        gv_datas(12) := 'Кем выдан';
        gv_datas(13) := 'Адрес';
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
        -- Строки таблицы
        set_times_font(par_type => gc_font_times_normal, par_size => 10);
        FOR cur IN cur_ul(par_policy_id)
        LOOP
          gv_datas(1) := cur.obj_name_orig;
          gv_datas(2) := cur.cont_role;
          gv_datas(3) := cur.cont_inn || ' / ' || cur.cont_kio;
          gv_datas(4) := cur.cont_ogrn;
          gv_datas(5) := cur.cont_ogrn_issue_date;
          gv_datas(6) := cur.cont_address;
          gv_datas(7) := cur.cont_benicif_fio;
          gv_datas(8) := cur.cont_benicif_dob;
          gv_datas(9) := cur.cont_benicif_doc_type;
          gv_datas(10) := cur.cont_benicif_doc_num;
          gv_datas(11) := cur.cont_benicif_doc_issue_date;
          gv_datas(12) := cur.cont_benicif_doc_issue;
          gv_datas(13) := cur.cont_benicif_address;
        
          plpdf.row_print2(p_data    => gv_datas
                          ,p_border  => gv_borders
                          ,p_align   => gv_aligns
                          ,p_width   => gv_widths
                          ,p_style   => gv_styles
                          ,p_maxline => gv_maxlines);
        END LOOP;
      END IF;
    
      -------------------------------------------------------------------------------------------------
      -- ФОРМИРОВАНИЕ PDF
      -------------------------------------------------------------------------------------------------
      plpdf.senddoc(p_blob => l_blob);
    
      par_data         := l_blob;
      par_file_name    := 'anketa_finmon.pdf';
      par_content_type := gc_pdf_content_type;
    ELSE
      -- Инициализация
      plpdf.init(p_orientation => 'L');
      font_init;
      plpdf.newpage;
    
      -------------------------------------------------------------------------------------------------
      -- ЗАГОЛОВОК
      -------------------------------------------------------------------------------------------------
      set_times_font(par_type => gc_font_times_bold, par_size => 16);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => 'АНКЕТА по договору страхования'
                              ,p_clipping => 0
                              ,p_align    => 'C');
    
      set_times_font;
      /* Draws a rectangle cell with text inside. */
      plpdf.printmultilinecell(p_h        => 12
                              ,p_txt      => 'Данные не найдены'
                              ,p_clipping => 0
                              ,p_align    => 'L'
                              ,p_ln       => 0);
    
      -------------------------------------------------------------------------------------------------
      -- ФОРМИРОВАНИЕ PDF
      -------------------------------------------------------------------------------------------------
      plpdf.senddoc(p_blob => l_blob);
    
      par_data         := l_blob;
      par_file_name    := 'anketa_finmon.pdf';
      par_content_type := gc_pdf_content_type;
    END IF;
  END rep_anketa_finmon;

  /*
    Капля П.С.
    Универсальная печатная форма для кредитных продуктов
  */
  PROCEDURE rep_credit_policy
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    p_policy.policy_id%TYPE;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
  
    gv_chapter_num PLS_INTEGER := 0;
  
    l_blob BLOB;
    l_text VARCHAR2(4000);
  
    PROCEDURE set_chapter(par_title VARCHAR2) IS
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
    
      set_font(par_size => 9, par_style => gc_style_bold, par_color => gc_color_orange);
      --plpdf.linebreak;
      plpdf.printcell(p_txt   => gv_chapter_num || '. ' || par_title
                     ,p_align => 'L'
                     ,p_h     => -1
                     ,p_ln    => 1);
      --plpdf.linebreak;
    END set_chapter;
  
    PROCEDURE print_header IS
      v_barcode VARCHAR2(25);
      l_text    VARCHAR2(500);
    BEGIN
      v_barcode := get_barcode_for_policy(par_policy_id => v_policy_id);
    
      IF v_barcode IS NOT NULL
      THEN
        set_font(par_size        => 28
                ,par_style       => gc_style_regular
                ,par_font_family => gc_barcode_font_family_code39);
        plpdf.printcell(p_h => -1, p_txt => v_barcode, p_align => 'R', p_ln => 1);
      END IF;
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => 'ДОГОВОР СТРАХОВАНИЯ ЖИЗНИ И ЗДОРОВЬЯ ЗАЁМЩИКОВ КРЕДИТА     № ' ||
                                  v_pol_sum.pol_num
                     ,p_border => 'LRT'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => 'заключён на основании Полисных условий по программе страхования жизни и здоровья Заёмщиков кредита'
                     ,p_border => 'LRB'
                     ,p_ln     => 1);
    
      l_text := get_city_name;
      plpdf.printcell(p_h        => -1
                     ,p_w        => plpdf.gettextwidth(l_text) + 10
                     ,p_txt      => l_text
                     ,p_border   => '1'
                     ,p_clipping => 0
                     ,p_ln       => 0);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => pkg_rep_utils.date_to_genitive_case(v_pol_sum.start_date) || ' г.'
                     ,p_align  => 'R'
                     ,p_border => '1'
                     ,p_ln     => 1);
    
    END print_header;
  
    PROCEDURE print_insurer IS
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num || '. СТРАХОВЩИК:'
                     ,p_border => 'LRT'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printmultilinecell(p_h      => -1
                              ,p_txt    => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_nameaddr)
                              ,p_border => 'LRT'
                              ,p_ln     => 1);
    
      plpdf.printmultilinecell(p_h      => -1
                              ,p_txt    => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_default_billing || ',' ||
                                                                                              pkg_contact_rep_utils.gc_company_def_phones || ',' ||
                                                                                              pkg_contact_rep_utils.gc_company_website)
                              ,p_border => 'LRB'
                              ,p_ln     => 1);
    
    END print_insurer;
  
    PROCEDURE print_insuree IS
      l_type_doc  VARCHAR2(1500);
      l_doc_num   VARCHAR2(1500);
      l_doc_place VARCHAR2(1500);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num || '. СТРАХОВАТЕЛЬ / ЗАСТРАХОВАННЫЙ:'
                     ,p_border => 'LRT'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
    
      plpdf.printcell(p_border => 'L', p_w => 5, p_ln => 0);
      plpdf.printcell(p_h => -1, p_txt => 'Фамилия', p_w => 25, p_ln => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_w      => 50
                     ,p_txt    => v_insuree_info.name
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0);
    
      set_font(par_style => gc_style_regular);
      plpdf.printmultilinecell(p_h   => -1
                              ,p_w   => 60
                              ,p_txt => '          Дата рождения'
                              ,p_ln  => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_w      => 50
                     ,p_txt    => to_char(v_insuree_info.date_of_birth, 'dd.mm.yyyy')
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0);
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_border => 'L', p_w => 5, p_ln => 0);
      plpdf.printcell(p_h => -1, p_txt => 'Имя', p_w => 25, p_ln => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_w      => 50
                     ,p_txt    => v_insuree_info.first_name
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h   => -1
                     ,p_w   => 60
                     ,p_txt => '          Документ, удостоверяющий личность'
                     ,p_ln  => 0);
    
      set_font(par_style => gc_style_bold);
      /*Заполняем паспортные данные только при наличии паспорта (модифицировано 28.04.2014 Черных М.Г. исправлено no_data_found)*/
      IF pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id) IS NOT NULL
      THEN
        l_type_doc  := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                     ,'<#TYPE_DESC>');
        l_doc_num   := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                     ,'<#DOC_SERNUM>');
        l_doc_place := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                     ,'Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>');
      
      END IF; /*конец модификации 28.04.2014*/
    
      plpdf.printmultilinecell(p_h      => -1
                              ,p_w      => 50
                              ,p_txt    => l_type_doc
                              ,p_align  => 'C'
                              ,p_border => '1'
                              ,p_ln     => 0);
    
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_border => 'L', p_w => 5, p_ln => 0);
      plpdf.printcell(p_h => -1, p_txt => 'Отчество', p_w => 25, p_ln => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_w      => 50
                     ,p_txt    => v_insuree_info.middle_name
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h => -1, p_w => 60, p_txt => NULL, p_ln => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_h      => -1
                              ,p_w      => 50
                              ,p_txt    => l_doc_num
                              ,p_align  => 'C'
                              ,p_border => '1'
                              ,p_ln     => 0);
    
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_border => 'L', p_w => 5, p_ln => 0);
      plpdf.printcell(p_h        => -1
                     ,p_w        => plpdf.getpagespace - 5
                     ,p_txt      => l_doc_place
                     ,p_align    => 'C'
                     ,p_border   => '1'
                     ,p_clipping => 3
                     ,p_ln       => 0);
    
      plpdf.printcell(p_border => 'R', p_ln => 1);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => 'Кем и когда выдан'
                     ,p_align  => 'C'
                     ,p_border => 'LR'
                     ,p_ln     => 1);
    
      plpdf.printcell(p_border => 'L', p_w => 5, p_ln => 0);
      plpdf.printcell(p_h => -1, p_txt => 'Адрес', p_w => 25, p_ln => 0);
    
      plpdf.printcell(p_h      => -1
                     ,p_w      => 85
                     ,p_txt    => pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_last_active_address_id(par_contact_id => v_insuree_info.contact_id
                                                                                                                            ,par_brief      => 'CONST')
                                                                           ,'<#ADDRESS_FULL>')
                     ,p_border => '1'
                     ,p_ln     => 0);
    
      plpdf.printcell(p_h      => -1
                     ,p_w      => 35
                     ,p_txt    => pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_primary_phone_id(v_insuree_info.contact_id))
                     ,p_border => '1'
                     ,p_ln     => 0);
    
      plpdf.printcell(p_h      => -1
                     ,p_w      => 35
                     ,p_txt    => pkg_contact_rep_utils.get_email_by_mask(pkg_contact_rep_utils.get_email(v_insuree_info.contact_id)
                                                                         ,'<#EMAIL_LOWER>')
                     ,p_border => '1'
                     ,p_ln     => 0);
    
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
    END print_insuree;
  
    PROCEDURE print_period IS
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num || '. СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ:'
                     ,p_border => '1'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => ROUND(MONTHS_BETWEEN(v_pol_sum.end_date, v_pol_sum.start_date)) ||
                                  ' месяцев'
                     ,p_w      => 50
                     ,p_border => 'LBT'
                     ,p_ln     => 0);
    
      plpdf.printcell(p_h      => -1
                     ,p_w      => 25
                     ,p_txt    => 'с ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy')
                     ,p_align  => 'C'
                     ,p_border => 'BT'
                     ,p_ln     => 0);
    
      plpdf.printcell(p_h      => -1
                     ,p_w      => 25
                     ,p_txt    => 'по ' || to_char(v_pol_sum.end_date, 'dd.mm.yyyy')
                     ,p_align  => 'C'
                     ,p_border => 'BT'
                     ,p_ln     => 0);
    
      plpdf.printcell(p_border => 'TBR', p_ln => 1);
    
    END print_period;
  
    PROCEDURE print_currency IS
      v_text VARCHAR2(500);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      v_text := gv_chapter_num || '. ВАЛЮТА ДОГОВОРА:';
      plpdf.printcell(p_h      => -1
                     ,p_txt    => v_text
                     ,p_w      => plpdf.gettextwidth(v_text) + 5
                     ,p_border => 'LTB'
                     ,p_ln     => 0);
    
      FOR rec IN (SELECT f.name
                        ,nvl2(lead(1) over(ORDER BY f.fund_id DESC), 0, 1) is_last
                        ,decode(f.brief, v_pol_sum.fund_brief, 'DF', 'D') marked
                    FROM t_product       p
                        ,t_prod_currency pc
                        ,fund            f
                   WHERE p.product_id = pc.product_id
                     AND pc.currency_id = f.fund_id
                     AND p.product_id = v_pol_sum.product_id
                   ORDER BY pc.is_default DESC NULLS LAST
                           ,f.fund_id     DESC)
      LOOP
        plpdf.drawrect(p_x     => plpdf.getcurrentx
                      ,p_y     => plpdf.getcurrenty + 1
                      ,p_w     => 2
                      ,p_h     => 2
                      ,p_style => rec.marked);
      
        plpdf.printcell(p_border => 'TB', p_w => 5, p_ln => 0);
      
        plpdf.printcell(p_h      => -1
                       ,p_w      => plpdf.gettextwidth(rec.name) + 5
                       ,p_txt    => rec.name
                       ,p_border => 'TB'
                       ,p_ln     => 0);
      END LOOP;
    
      plpdf.printcell(p_ln => 1, p_border => 'BTR');
    
    END print_currency;
  
    PROCEDURE print_territory IS
      v_text VARCHAR2(500);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      v_text := gv_chapter_num || '. ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ:';
      plpdf.printcell(p_h      => -1
                     ,p_txt    => v_text
                     ,p_w      => plpdf.gettextwidth(v_text) + 5
                     ,p_border => 'LTB'
                     ,p_ln     => 0);
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => 'ВЕСЬ МИР, 24 ЧАСА В СУТКИ'
                     ,p_border => 'RTB'
                     ,p_ln     => 1);
    
    END print_territory;
  
    PROCEDURE print_programs IS
      v_total_fee p_cover.fee%TYPE;
      v_h         NUMBER;
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num ||
                                  '. СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ (ВЗНОСЫ):'
                     ,p_border => 'LRT'
                     ,p_ln     => 1);
    
      delete_row_print_cache;
    
      gv_widths(1) := 1;
      gv_widths(2) := 60;
      gv_widths(3) := 20;
      gv_widths(4) := 30;
      gv_widths(5) := 78;
      gv_widths(6) := 1;
    
      gv_aligns(1) := NULL;
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
      gv_aligns(5) := 'C';
      gv_aligns(6) := NULL;
    
      gv_styles(1) := NULL;
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
      gv_styles(4) := 'B';
      gv_styles(5) := 'B';
      gv_styles(6) := NULL;
    
      gv_borders(1) := 'LR';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
      gv_borders(4) := '1';
      gv_borders(5) := '1';
      gv_borders(6) := 'LR';
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховые риски';
      IF v_pol_sum.product_brief IN ('CR120_1', 'CR120_2')
      THEN
        gv_datas(3) := 'Страховая сумма*';
        v_h := 4; --Высота строки
      ELSE
        gv_datas(3) := 'Страховая сумма';
        v_h := 5;
      END IF;
      gv_datas(4) := 'Страховая премия (взнос)';
      gv_datas(5) := 'Размер выплаты';
      gv_datas(6) := NULL;
    
      row_print2;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_styles(4) := NULL;
      gv_styles(5) := NULL;
      gv_styles(6) := NULL;
    
      gv_aligns(2) := 'L';
      gv_aligns(5) := 'J';
    
      FOR rec_product_lines IN (SELECT pl.description
                                      ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                                      ,pkg_rep_utils.to_money_sep(pc.fee) fee
                                      ,pl.note
                                      ,row_number() over(ORDER BY plt.sort_order, pl.sort_order) rn
                                  FROM p_cover             pc
                                      ,as_asset            aa
                                      ,t_prod_line_option  plo
                                      ,t_product_line      pl
                                      ,t_product_line_type plt
                                 WHERE aa.p_policy_id = v_policy_id
                                   AND aa.as_asset_id = pc.as_asset_id
                                   AND pc.t_prod_line_option_id = plo.id
                                   AND plo.product_line_id = pl.id
                                   AND pl.product_line_type_id = plt.product_line_type_id
                                 ORDER BY plt.sort_order
                                         ,pl.sort_order)
      LOOP
        gv_datas(1) := NULL;
        gv_datas(2) := gv_chapter_num || '.' || rec_product_lines.rn || ' ' ||
                       rec_product_lines.description;
        gv_datas(3) := rec_product_lines.ins_amount;
        gv_datas(4) := rec_product_lines.fee;
        gv_datas(5) := rec_product_lines.note;
        gv_datas(6) := NULL;
      
        row_print2(par_h => v_h);
      END LOOP;
    
      SELECT nvl(SUM(pc.fee), 0)
        INTO v_total_fee
        FROM p_cover  pc
            ,as_asset aa
       WHERE aa.p_policy_id = v_policy_id
         AND aa.as_asset_id = pc.as_asset_id;
    
      delete_row_print_cache;
    
      gv_widths(1) := 81;
      gv_widths(2) := 30;
      gv_widths(3) := 78;
      gv_widths(4) := 1;
      gv_widths(5) := NULL;
      gv_widths(6) := NULL;
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := NULL;
      gv_aligns(5) := NULL;
      gv_aligns(6) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
      gv_styles(4) := NULL;
      gv_styles(5) := NULL;
      gv_styles(6) := NULL;
    
      gv_borders(1) := 'L';
      gv_borders(2) := '1';
      gv_borders(3) := NULL;
      gv_borders(4) := 'R';
      gv_borders(5) := NULL;
      gv_borders(6) := NULL;
    
      gv_datas(1) := 'ИТОГО СТРАХОВАЯ ПРЕМИЯ (ВЗНОС):';
      gv_datas(2) := pkg_rep_utils.to_money_sep(v_total_fee);
      gv_datas(3) := pkg_utils.money2speech(v_total_fee, v_pol_sum.fund_id);
      gv_datas(4) := NULL;
      gv_datas(5) := NULL;
      gv_datas(6) := NULL;
    
      row_print2;
    
      plpdf.printcell(p_h      => -1
                     ,p_txt    => 'ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ: ' || v_pol_sum.payment_terms
                     ,p_border => 'LR'
                     ,p_ln     => 1);
      CASE
        WHEN v_pol_sum.product_brief IN ('CR120_1', 'CR120_2') THEN
          plpdf.printmultilinecell(p_h        => 3
                                  ,p_txt      => '* Страховая сумма по рискам «Смерть ЛП» и «Инвалидность» равна размеру первоначальной суммы кредита по кредитному договору на момент его заключения. В течение действия договора страхования страховая сумма уменьшается в соответствии с первоначальным графиком платежей и равна ссудной задолженности на дату наступления страхового случая в соответствии с первоначальным графиком платежей.' ||
                                                 chr(13) ||
                                                 'Страховая сумма по рискам «ВНТ ЛП» равна размеру первоначальной суммы кредита Застрахованного по кредитному договору на момент его заключения.' ||
                                                 chr(13) ||
                                                 'Страховая сумма по программе «Дожитие Застрахованного до потери постоянной работы по независящим от него причинам» определяется по соглашению Страховщика со Страхователем,   равна размеру первоначальной суммы кредита Застрахованного по кредитному договору на момент его заключения.' ||
                                                 chr(13) ||
                                                 '** Любая причина - событие (болезнь или несчастный случай), возникшее в течение действия договора, а также  самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.'
                                  ,p_align    => 'J'
                                  ,p_border   => 'LR'
                                  ,p_ln       => 1
                                  ,p_clipping => 0);
        ELSE
          plpdf.printmultilinecell(p_h      => -1
                                  ,p_txt    => '* Страховая сумма устанавливается в соответствии с п. 7.2. Полисных условий и равна размеру первоначальной суммы кредита Страхователя (Застрахованного) по кредитному договору на момент его заключения и уменьшается в соответствии с первоначальным графиком платежей и равна ссудной задолженности на дату наступления страхового случая в соответствии с первоначальным графиком платежей. ** Любая причина – событие (болезнь или несчастный случай), возникшее в течение действия договора, а также самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.'
                                  ,p_align  => 'J'
                                  ,p_border => 'LR'
                                  ,p_ln     => 1);
      END CASE;
    
    END print_programs;
  
    PROCEDURE print_beneficiaries IS
      v_benif_array tt_one_col;
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num || '. ВЫГОДОПРИОБРЕТАТЕЛЬ:'
                     ,p_border => 'LR'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
    
      SELECT DISTINCT c.obj_name_orig
        BULK COLLECT
        INTO v_benif_array
        FROM as_asset       aa
            ,as_beneficiary ab
            ,contact        c
       WHERE aa.p_policy_id = v_policy_id
         AND aa.as_asset_id = ab.as_asset_id
         AND ab.contact_id = c.contact_id;
    
      CASE
        WHEN v_pol_sum.product_brief IN ('CR120_1', 'CR120_2') THEN
          plpdf.printmultilinecell(p_h        => 3
                                  ,p_clipping => 0
                                  ,p_txt      => gv_chapter_num ||
                                                 '.1 Первым Выгодоприобретателем по страховым рискам «Смерть ЛП» и «Инвалидность» настоящего Договора,  в доле, равной размеру фактической задолженности Застрахованного по кредиту, но не более суммы страховой выплаты является: ' ||
                                                 pkg_utils.get_aggregated_string(par_table     => v_benif_array
                                                                                ,par_separator => ', ')
                                  ,p_border   => 'LR'
                                  ,p_ln       => 1);
          plpdf.printmultilinecell(p_h        => 3
                                  ,p_txt      => gv_chapter_num ||
                                                 '.2. Выгодоприобретателями  по страховому риску  «Смерть ЛП» в доле, оставшейся после исполнения обязательств по  страховой выплате Первому Выгодоприобретателю, указанному п. 7.1. настоящего Договора, являются следующие лица: наследники по Закону; 7.3. Выгодоприобретателем по страховому риску «Инвалидность» в доле, оставшейся после исполнения обязательств по страховой выплате Первому Выгодоприобретателю, указанному п. 7.1. настоящего Договора, является  Застрахованный; 7.4. Выгодоприобретателем по риску «ВНТ ЛП» и по программе «Дожитие Застрахованного до потери постоянной работы по независящим от него причинам»  является Застрахованный.'
                                  ,p_clipping => 0
                                  ,p_border   => 'LBR'
                                  ,p_ln       => 1);
        ELSE
        
          plpdf.printmultilinecell(p_h        => 4
                                  ,p_clipping => 0
                                  ,p_txt      => gv_chapter_num ||
                                                 '.1. Первым Выгодоприобретателем по страховым рискам «Смерть Застрахованного по любой причине» и «Инвалидность Застрахованного I группы» настоящего Договора, в доле, равной размеру фактической задолженности Застрахованного по кредиту, но не более суммы страховой выплаты является: ' ||
                                                 pkg_utils.get_aggregated_string(par_table     => v_benif_array
                                                                                ,par_separator => ', ')
                                  ,p_border   => 'LR'
                                  ,p_ln       => 1);
          plpdf.printmultilinecell(p_h        => 4
                                  ,p_txt      => gv_chapter_num ||
                                                 '.2. Выгодоприобретателями по страховому риску «Смерть Застрахованного по любой причине» в доле, оставшейся после исполнения обязательств по страховой выплате Первому Выгодоприобретателю, указанному п. 7.1. настоящего договора, являются следующие лица: наследники по Закону; 7.3. Выгодоприобретателем по страховому риску «Инвалидность Застрахованного I группы» в доле, оставшейся после исполнения обязательств по страховой выплате Первому Выгодоприобретателю, указанному п. 7.1. настоящего договора, является Застрахованное лицо; 7.4. Выгодоприобретателем по риску «Временная утрата трудоспособности Застрахованного, наступившая в результате несчастного случая», по риску «Временная утрата трудоспособности Застрахованного, наступившая по любой причине» и по программе «Дожитие Застрахованного до потери постоянной работы по независящим от него причинам» является Застрахованный.'
                                  ,p_clipping => 0
                                  ,p_border   => 'LBR'
                                  ,p_ln       => 1);
      END CASE;
    
    END print_beneficiaries;
  
    PROCEDURE print_declaration IS
      l_text1 VARCHAR2(4000);
      l_text2 VARCHAR2(4000);
      l_text3 VARCHAR2(4000);
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN ('CR114_1' /*для отчетов КС-АВТО*/) THEN
          NULL; /*Не нужна новая страница*/
        ELSE
          plpdf.newpage;
      END CASE;
    
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num || '. ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО:'
                     ,p_border => 'LRT'
                     ,p_ln     => 1);
    
      plpdf.printcell(p_h      => -1
                     ,p_txt    => 'Настоящим Страхователь/Застрахованный заявляет, что он:'
                     ,p_border => 'LR'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
      CASE v_pol_sum.product_brief
        WHEN 'CR114_1' /*для отчетов КС-АВТО*/
         THEN
          l_text1 := gv_chapter_num ||
                     '.1. НЕ является инвалидом, лицом, требующим постоянного ухода (помощи) других лиц; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, нервными расстройствами, психическими заболеваниями; НЕ употребляет наркотики, токсические вещества, НЕ страдает алкоголизмом, и/или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита), а также НЕ страдает иными заболеваниями, ограничивающими физическую активность или повышающими риск травмы, включая нарушения зрения, слуха, функции органов равновесия и т.д.; ' ||
                     gv_chapter_num ||
                     '.2. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений; ' ||
                     gv_chapter_num ||
                     '.3. НЕ страдает/страдал(а) следующими заболеваниями: близорукостью более 7 (семи) диоптрий, хроническая почечная недостаточность, поликистоз почек, неспецифический язвенный колит, болезнь Крона, сахарный диабет, гемофилия, сердечнососудистая патология (включая ишемическую болезнь сердца, аритмии (включая мерцательную аритмию), гипертонию (II-IV степени), тромбоэмболии, аневризмы сосудов, перенесенные инфаркты, инсульты, операции на сердце и сосудах и т.п.), цирроз печени, хронический гепатит, злокачественные или доброкачественные опухоли, туберкулез, а также иными хроническими заболеваниями, требующими постоянных консультаций, лечения, обследований или наблюдения; ' ||
                     gv_chapter_num ||
                     '.4. За последние 2 (два) года НЕ находился на больничном листе сроком 3 (три) недели подряд и более (счет по каждому году, не учитывая острую респираторную инфекцию, грипп, травмы, не требующие долгосрочной госпитализации и не связанные с жизнью) и/или НЕ был направлен на стационарное лечение, или за последние 12 месяцев НЕ обращался за медицинской помощью, обследованием или консультацией по причине одного и того же заболевания более одного раза; ' ||
                     gv_chapter_num ||
                     '.5. В настоящий момент НЕ находится под наблюдением врача, на лечении, НЕ принимает лекарства в связи с каким-либо заболеванием (нарушением здоровья) или в отношении него НЕ запланировано лечение/операция и он/она НЕ планирует обратиться к врачу по причине какого-либо заболевания в ближайшее время  за исключением обращений к стоматологу и/или прохождения периодических осмотров, в течение ближайшего месяца с момента подписания настоящей Декларации; ' ||
                     gv_chapter_num ||
                     '.6. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.), а также НЕ занимается опасными видами спорта или опасными видами увлечений (хобби); ' ||
                     gv_chapter_num ||
                     '.7. НЕ подавал заявления на страхование жизни, страхование от несчастных случаев и болезней, утраты трудоспособности (инвалидности), от несчастных случаев, в которых ему/ей было отказано, которые были отложены или приняты на особых условиях (с применением повышающих коэффициентов, исключений или особых условий), а также заключенных договоров страхования, которые были расторгнуты по причине невозможности заключения или существенные условия которых были изменены по  результатам оценки степени риска; ' ||
                     gv_chapter_num ||
                     '.8. НЕ выкуривает более 30 (тридцати) сигарет в день. Разница между ростом (в см.) и весом (в кг.) Застрахованного не менее 80 и не более 120 (например, рост - 180 см, вес - 85 кг, разница составляет - 95, декларацию можно подписать; рост 160 см, вес 85 кг, разница - 75 - –декларацию подписать нельзя).';
        ELSE
          /*для остальных кредитных отчетов*/
          l_text1 := gv_chapter_num ||
                     '.1. НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, нервными расстройствами, психическими заболеваниями; НЕ употребляет наркотики, токсические вещества, НЕ страдает алкоголизмом, и/или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита), а также НЕ страдает иными заболеваниями, ограничивающими физическую активность или повышающими риск травмы, включая нарушения зрения, слуха, функции органов равновесия и т.д.; ' ||
                     gv_chapter_num ||
                     '.2. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений; ' ||
                     gv_chapter_num ||
                     '.3. НЕ страдает/страдал(а) следующими заболеваниями: близорукостью более 7 (семи) диоптрий, хроническая почечная недостаточность, поликистоз почек, неспецифический язвенный колит, болезнь Крона, сахарный диабет, гемофилия, сердечнососудистая патология (включая ишемическую болезнь сердца, аритмии (включая мерцательную аритмию), гипертонию (II-IV степени), тромбоэмболии, аневризмы сосудов, перенесенные инфаркты, инсульты, операции на сердце и сосудах и т.п.), цирроз печени, хронический гепатит, злокачественные или доброкачественные опухоли, туберкулез, а также иными хроническими заболеваниями, требующими постоянных консультаций, лечения, обследований или наблюдения; ' ||
                     gv_chapter_num ||
                     '.4. За последние 2 (два) года НЕ находился на больничном листе сроком 3 (три) недели подряд и более (счет по каждому году, не учитывая острую респираторную инфекцию, грипп, травмы, не требующие долгосрочной госпитализации и не связанные с жизнью) и/или НЕ был направлен на стационарное лечение, или за последние 12 месяцев НЕ обращался за медицинской помощью, обследованием или консультацией по причине одного и того же заболевания более одного раза; ' ||
                     gv_chapter_num ||
                     '.5. В настоящий момент НЕ находится под наблюдением врача, на лечении, НЕ принимает лекарства в связи с каким-либо заболеванием (нарушением здоровья) или в отношении него НЕ запланировано лечение/операция и он/она НЕ планирует обратиться к врачу по причине какого-либо заболевания в ближайшее время за исключением обращений к стоматологу и/или прохождения периодических осмотров, в течение ближайшего месяца с момента подписания настоящей Декларации; ' ||
                     gv_chapter_num ||
                     '.6. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.), а также НЕ занимается опасными видами спорта или опасными видами увлечений (хобби); ' ||
                     gv_chapter_num ||
                     '.7. НЕ подавал заявления на страхование жизни, страхование от несчастных случаев и болезней, утраты трудоспособности (инвалидности), от несчастных случаев, в которых ему/ей было отказано, которые были отложены или приняты на особых условиях (с применением повышающих коэффициентов, исключений или особых условий), а также заключенных договоров страхования, которые были расторгнуты по причине невозможности заключения или существенные условия которых были изменены по результатам оценки степени риска; ' ||
                     gv_chapter_num ||
                     '.8. НЕ выкуривает более 30 (тридцати) сигарет в день. Разница между ростом (в см.) и весом (в кг.) Застрахованного не менее 80 и не более 120 (например, рост - 180 см, вес - 85 кг, разница составляет - 95, декларацию можно подписать; рост 160 см, вес 85 кг, разница - 75, декларацию подписать нельзя).';
      END CASE;
    
      plpdf.printmultilinecell(p_h        => 3
                              ,p_border   => 'LR'
                              ,p_ln       => 1
                              ,p_clipping => 0
                              ,p_txt      => l_text1);
    
      CASE v_pol_sum.product_brief
        WHEN 'CR114_1' /*для отчетов КС-АВТО*/
         THEN
          l_text2 := gv_chapter_num ||
                     '9. Имеет постоянную работу (постоянный источник дохода) в течение последних 12 (двенадцати) месяцев, в том числе не менее 4 (четырех) месяцев на последнем месте работы; Состоит в трудовых отношениях с работодателем на основании трудового договора (за исключением трудового договора с индивидуальным частным предпринимателем), заключенного на неопределенный срок и предусматривающего занятость на полный рабочий день. Получает вознаграждения за свой труд в форме ежемесячной заработной платы;  НЕ является акционером (участником) организации работодателя; НЕ является индивидуальным частным предпринимателем; НЕ является близким родственником руководителя работодателя (супруг(а), родитель, ребенок, усыновитель, усыновленный, родной брат, родная сестра, дедушка, бабушка, внуки); НЕ является временным, сезонным рабочим, служащим в отрасли, которая подразумевает сезонный характер в работе; НЕ является временно нетрудоспособным по беременности и родам, НЕ находится в отпуске по уходу за ребенком; НЕ уведомлен о намерении работодателя сократить штат сотрудников или о ликвидации организации работодателя; НЕ является иностранным публичным должностным лицом, НЕ является российским публичным должностным лицом.';
        ELSE
          l_text2 := gv_chapter_num ||
                     '.9. Имеет постоянную работу (постоянный источник дохода) в течение последних 12 (двенадцати) месяцев, в том числе не менее 4 (четырех) месяцев на последнем месте работы; Состоит в трудовых отношениях с работодателем на основании трудового договора (за исключением трудового договора с индивидуальным частным предпринимателем), заключенного на неопределенный срок и предусматривающего занятость на полный рабочий день. Получает вознаграждения за свой труд в форме ежемесячной заработной платы; НЕ является акционером (участником) организации работодателя; НЕ является индивидуальным частным предпринимателем; НЕ является близким родственником руководителя работодателя (супруг(а), родитель, ребенок, усыновитель, усыновленный, родной брат, родная сестра, дедушка, бабушка, внуки); НЕ является временным, сезонным рабочим, служащим в отрасли, которая подразумевает сезонный характер в работе; НЕ является временно нетрудоспособным по беременности и родам, НЕ находится в отпуске по уходу за ребенком; НЕ уведомлен о намерении работодателя сократить штат сотрудников или о ликвидации организации работодателя; НЕ является иностранным публичным должностным лицом, НЕ является российским публичным должностным лицом.';
      END CASE;
      plpdf.printmultilinecell(p_h        => 3
                              ,p_border   => 'LR'
                              ,p_ln       => 1
                              ,p_clipping => 0
                              ,p_txt      => l_text2);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => 'Да, я могу подписать настоящую Декларацию и заявляю:'
                     ,p_border => 'LR'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
      CASE v_pol_sum.product_brief
        WHEN 'CR114_1' /*для отчетов КС-АВТО*/
         THEN
          l_text3 := 'что я согласен(-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате; что в отношении Застрахованного не заключены и не поданы заявления на заключение других договоров страхования жизни и/или от несчастных случаев в ООО «СК «Ренессанс Жизнь», по которым страховые суммы в отношении каждого риска в сумме со страховыми суммами по аналогичным рискам по данному Договору превышают 3 000 000 (три миллиона)  рублей; что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших мне медицинские услуги (обследования, консультации, лечение и т.д.), предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования; что я обязуюсь незамедлительно письменно уведомить Страховщика в случае изменения степени риска при первой представившейся возможности. Я понимаю, что изменение степени риска может повлечь оплату дополнительной страховой премии и/или изменение условий договора страхования. Я также понимаю, что в случае моего отказа проинформировать Страховщика об изменении степени риска и уплатить дополнительную страховую премию и/или изменить условия страхования, договор страхования будет расторгнут Страховщиком в одностороннем порядке и страховые выплаты по нему будут невозможны; что я прочел(-ла), понял(-а) и согласен(-на) с «Полисными условиями  страхования жизни и здоровья заемщиков кредита».';
        ELSE
          l_text3 := 'что я согласен(-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате; что в отношении Застрахованного не заключены и не поданы заявления на заключение других договоров страхования жизни и/или от несчастных случаев в ООО «СК «Ренессанс Жизнь», по которым страховые суммы в отношении каждого риска в сумме со страховыми суммами по аналогичным рискам по данному Договору превышают 4 000 000 (четыре миллиона) рублей; что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших мне медицинские услуги (обследования, консультации, лечение и т.д.), предоставлять по требованию страховой компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования; что я обязуюсь незамедлительно письменно уведомить Страховщика в случае изменения степени риска при первой представившейся возможности. Я понимаю, что изменение степени риска может повлечь оплату дополнительной страховой премии и/или изменение условий договора страхования. Я также понимаю, что в случае моего отказа проинформировать Страховщика об изменении степени риска и уплатить дополнительную страховую премию и/или изменить условия страхования, договор страхования будет расторгнут Страховщиком в одностороннем порядке и страховые выплаты по нему будут невозможны;что я прочел(-ла), понял(-а) и согласен(-на) с «Полисными условиями страхования жизни и здоровья заемщиков кредита».';
      END CASE;
      plpdf.printmultilinecell(p_h        => 3
                              ,p_border   => 'LR'
                              ,p_clipping => 0
                              ,p_ln       => 1
                              ,p_txt      => l_text3);
    END print_declaration;
  
    PROCEDURE print_additional_conditions IS
      l_text1 VARCHAR2(4000);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num || '. ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ:'
                     ,p_border => 'LR'
                     ,p_ln     => 1);
    
      set_font(par_style => gc_style_regular);
      CASE v_pol_sum.product_brief
        WHEN 'CR114_1' /*для отчетов КС-АВТО*/
         THEN
          l_text1 := gv_chapter_num ||
                     '.1. Все письменные заявления Страхователя, относящиеся к настоящему Договору, а также все Приложения и дополнения к настоящему Договору, являются его составной и неотъемлемой частью. ' ||
                     gv_chapter_num ||
                     '.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в настоящем Договоре, а также во всех Приложениях и дополнительных соглашениях к нему. ' ||
                     gv_chapter_num ||
                     '.3. Подписывая настоящий Договор, Страхователь в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставлять страховой компании ООО «СК «Ренессанс Жизнь» согласие на обработку, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям (в том числе находящимся за рубежом) своих персональных данных, в том числе данных о состоянии здоровья, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путём осуществления прямых контактов с помощью средств связи, в том числе в целях заключения между Страхователем и Страховщиком договора страхования. Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия настоящего Договора и в течение 15 лет после окончания срока действия настоящего Договора и может быть отозвано Страхователем (Застрахованным) в любой момент времени путем передачи Страховщику подписанного Страхователем (Застрахованным) письменного уведомления. ' ||
                     gv_chapter_num ||
                     '.4. В случае отказа Страхователя от договора страховая, премия не возвращается Страхователю.';
        ELSE
          l_text1 := gv_chapter_num ||
                     '.1. Все письменные заявления Страхователя, относящиеся к настоящему Договору, а также все Приложения и дополнения к настоящему Договору, являются его составной и неотъемлемой частью. ' ||
                     gv_chapter_num ||
                     '.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в настоящем Договоре, а также во всех Приложениях и дополнительных соглашениях к нему. ' ||
                     gv_chapter_num ||
                     '.3. Подписывая настоящий Договор, Страхователь в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставлять страховой компании ООО «СК «Ренессанс Жизнь» согласие на обработку, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям (в том числе находящимся за рубежом) своих персональных данных, в том числе данных о состоянии здоровья, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путём осуществления прямых контактов с помощью средств связи, в том числе в целях заключения между Страхователем и Страховщиком договора страхования. Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия настоящего Договора и в течение 15 лет после окончания срока действия настоящего Договора и может быть отозвано Страхователем (Застрахованным) в любой момент времени путем передачи Страховщику подписанного Страхователем (Застрахованным) письменного уведомления. ' ||
                     gv_chapter_num ||
                     '.4. В случае отказа Страхователя от договора страховая, премия не возвращается Страхователю.';
      END CASE;
      plpdf.printmultilinecell(p_h        => 3
                              ,p_border   => 'LR'
                              ,p_clipping => 0
                              ,p_ln       => 1
                              ,p_txt      => l_text1);
    
    END print_additional_conditions;
  
    PROCEDURE print_sign IS
      v_signer typ_signer;
    BEGIN
    
      v_signer := get_signer('pkg_rep_plpdf.rep_credit_policy');
      set_font(par_style => gc_style_bold);
    
      IF v_pol_sum.policy_status_desc NOT IN
         ('Ожидает подтверждения из B2B', 'Проект')
      THEN
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - 5 - 45
                      ,p_y    => plpdf.getcurrenty
                      ,p_w    => 45
                      ,p_h    => 50);
      END IF;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 2;
      gv_widths(2) := gv_widths(1);
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
    
      gv_borders(1) := 'LTR';
      gv_borders(2) := 'LTR';
    
      gv_datas(1) := 'Страхователь/Застрахованный';
      gv_datas(2) := 'Страховщик';
    
      row_print2;
    
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'Полисные условия по программе страхования жизни и здоровья Заёмщиков кредита получил (а), ознакомлен (а) в полном объеме и согласен(на).
С назначением Выгодоприобретателей согласен (на)';
      gv_datas(2) := 'представитель по доверенности ' || v_signer.short_name || chr(13) || '(дов №' ||
                     v_signer.procuratory_num || ')';
    
      row_print2;
    
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
      row_print2;
    
      gv_datas(1) := 'С назначением Выгодоприобретателей согласен (на)';
      gv_datas(2) := NULL;
    
      row_print2;
    
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
    
      gv_borders(1) := 'LBR';
      gv_borders(2) := 'LBR';
    
      row_print2;
    
    END print_sign;
  BEGIN
    v_policy_id := to_number(repcore.get_context('POL_ID'));
  
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
  
    -- Инициализация
    init(par_default_font_size => 8);
    print_draft(v_pol_sum.policy_status_desc);
  
    -------------------------------------------------------------------------------------------------
    -- ДОГОВОР №
    -------------------------------------------------------------------------------------------------
    print_header;
  
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_insurer;
  
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВАТЕЛЬ / ЗАСТРАХОВАННЫЙ
    -------------------------------------------------------------------------------------------------
    print_insuree;
  
    -------------------------------------------------------------------------------------------------
    -- СРОК ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    print_period;
  
    -------------------------------------------------------------------------------------------------
    -- ВАЛЮТА ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    print_currency;
  
    -------------------------------------------------------------------------------------------------
    -- ТЕРРИТОРИЯ
    -------------------------------------------------------------------------------------------------
    print_territory;
  
    -------------------------------------------------------------------------------------------------
    -- ПРОГРАММЫ
    -------------------------------------------------------------------------------------------------
    print_programs;
  
    -------------------------------------------------------------------------------------------------
    -- ВЫГОДОПРИОБРЕТАТЕЛИ
    -------------------------------------------------------------------------------------------------
    print_beneficiaries;
  
    -------------------------------------------------------------------------------------------------
    -- ДЕКЛАРАЦИЯ
    -------------------------------------------------------------------------------------------------
    print_declaration;
    print_draft(v_pol_sum.policy_status_desc);
  
    -------------------------------------------------------------------------------------------------
    -- ДО УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_additional_conditions;
  
    -------------------------------------------------------------------------------------------------
    -- ПОДПИСИ
    -------------------------------------------------------------------------------------------------
    print_sign;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  END rep_credit_policy;

  /*
    Капля П.С.
    Печатная форма для продукта "Семейная защита"
    Также реализуется пустая печатная форма
  */
  PROCEDURE rep_family_protection_policy
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id     p_policy.policy_id%TYPE;
    v_pol_sum       t_policy_summary;
    v_insuree_info  t_contact_summary;
    v_period_string VARCHAR2(1000);
  
    v_number_of_copies NUMBER;
  
    v_product_brief VARCHAR2(1000);
  
    gv_chapter_num   PLS_INTEGER := 0;
    v_is_real_policy BOOLEAN;
    v_dummy          BOOLEAN;
  
    l_blob BLOB;
    l_text VARCHAR2(4000);
  
    v_tmp_bso_info cur_tmp_bso%ROWTYPE;
  
    PROCEDURE set_title(par_text VARCHAR2) IS
    BEGIN
      print_default_title(par_text);
    END;
  
    PROCEDURE set_cotitle(par_text VARCHAR2) IS
    BEGIN
      print_default_cotitle(par_text);
    END;
  
    PROCEDURE set_chapter
    (
      par_title VARCHAR2
     ,par_ln    NUMBER DEFAULT 1
    ) IS
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
    
      set_font(par_size => 9, par_style => gc_style_bold, par_color => gc_color_orange);
    
      plpdf.printmultilinecell(p_txt   => gv_chapter_num || '. ' || par_title
                              ,p_align => 'L'
                              ,p_h     => -1
                              ,p_ln    => par_ln);
    END set_chapter;
  
    /*
    FUNCTION get_passport(par_contact_id NUMBER) RETURN VARCHAR2 IS
      v_passport VARCHAR2(2000);
    BEGIN
      BEGIN
        v_passport := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(par_contact_id)
                                                                    ,REPLACE('<#TYPE_DESC>: <#DOC_SERNUM> Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>'
                                                                            ,'Паспорт гражданина РФ'
                                                                            ,'Паспорт'));
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
      RETURN v_passport;
    END get_passport;
    */
  
    PROCEDURE print_mark
    (
      par_question_text VARCHAR2
     ,par_is_marked     BOOLEAN
    ) IS
      c_yes      VARCHAR2(3) := 'Да';
      c_no       VARCHAR2(3) := 'Нет';
      v_yes_mark VARCHAR2(2);
      v_no_mark  VARCHAR2(2);
    BEGIN
      plpdf.printcell(p_txt => par_question_text
                     ,p_w   => plpdf.getpagewidth * 0.7
                     ,p_h   => -1
                     ,p_ln  => 0);
    
      IF NOT v_is_real_policy
      THEN
        v_yes_mark := gc_rect_unmarked;
        v_no_mark  := gc_rect_unmarked;
      ELSIF nvl(par_is_marked, FALSE)
      THEN
        v_yes_mark := gc_rect_marked;
        v_no_mark  := gc_rect_unmarked;
      ELSE
        v_yes_mark := gc_rect_unmarked;
        v_no_mark  := gc_rect_marked;
      END IF;
    
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => v_yes_mark);
    
      plpdf.printcell(p_w => 5, p_ln => 0);
    
      plpdf.printcell(p_h => -1, p_w => plpdf.gettextwidth(c_yes) + 5, p_txt => c_yes, p_ln => 0);
    
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => v_no_mark);
    
      plpdf.printcell(p_w => 5, p_ln => 0);
    
      plpdf.printcell(p_h => -1, p_w => plpdf.gettextwidth(c_no) + 5, p_txt => c_no, p_ln => 1);
    END print_mark;
  
    PROCEDURE print_info_element
    (
      par_element_name  VARCHAR2
     ,par_element_value VARCHAR2
    ) IS
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w   => trunc(plpdf.getpagewidth * 0.3)
                     ,p_txt => upper(par_element_name)
                     ,p_h   => -1
                     ,p_ln  => 0);
      set_font;
      plpdf.printmultilinecell(p_txt => par_element_value, p_h => -1);
    END print_info_element;
  
    PROCEDURE print_birthsate_gender
    (
      par_birthdate DATE
     ,par_gender    VARCHAR2
    ) IS
      v_birthdate_text VARCHAR2(1000);
      c_male   CONSTANT VARCHAR2(3) := 'МУЖ';
      c_female CONSTANT VARCHAR2(3) := 'ЖЕН';
      v_male_mark   VARCHAR2(2);
      v_female_mark VARCHAR2(2);
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w   => trunc(plpdf.getpagewidth * 0.3)
                     ,p_txt => upper('ДАТА РОЖДЕНИЯ')
                     ,p_h   => -1
                     ,p_ln  => 0);
      set_font;
    
      IF v_is_real_policy
      THEN
        v_birthdate_text := to_char(par_birthdate, 'dd.mm.yyyy" г."');
      ELSE
        v_birthdate_text := '_____._______________.__________';
      END IF;
    
      plpdf.printmultilinecell(p_txt => v_birthdate_text
                              ,p_w   => trunc(plpdf.getpagewidth * 0.2)
                              ,p_h   => 0
                              ,p_ln  => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w     => trunc(plpdf.getpagewidth * 0.2)
                     ,p_align => 'R'
                     ,p_txt   => upper('ПОЛ              ')
                     ,p_h     => -1
                     ,p_ln    => 0);
      set_font;
    
      IF NOT v_is_real_policy
         OR par_gender IS NULL
      THEN
        v_male_mark   := gc_rect_unmarked;
        v_female_mark := gc_rect_unmarked;
      ELSIF par_gender = 'MALE'
      THEN
        v_male_mark   := gc_rect_marked;
        v_female_mark := gc_rect_unmarked;
      ELSE
        v_male_mark   := gc_rect_unmarked;
        v_female_mark := gc_rect_marked;
      END IF;
    
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => v_male_mark);
    
      plpdf.printcell(p_w => 5, p_ln => 0);
    
      plpdf.printcell(p_h => -1, p_w => plpdf.gettextwidth(c_male) + 5, p_txt => c_male, p_ln => 0);
    
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => v_female_mark);
    
      plpdf.printcell(p_w => 5, p_ln => 0);
    
      plpdf.printcell(p_h   => -1
                     ,p_w   => plpdf.gettextwidth(c_female) + 5
                     ,p_txt => c_female
                     ,p_ln  => 1);
    
    END print_birthsate_gender;
  
    PROCEDURE print_insuree IS
      v_letters_address VARCHAR2(4000);
      v_const_adress    VARCHAR2(4000);
      v_phone           VARCHAR2(1000);
    
      v_fio        VARCHAR2(4000);
      v_birth_date VARCHAR2(1000);
      v_passport   VARCHAR2(4000);
    BEGIN
      set_chapter(upper('СТРАХОВАТЕЛЬ'));
      set_font(par_style => gc_style_bold);
    
      IF v_is_real_policy
      THEN
        v_fio             := v_insuree_info.fio;
        v_passport        := get_passport(v_insuree_info.contact_id);
        v_letters_address := pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_letters_address_id(v_insuree_info.contact_id)
                                                                      ,pkg_contact_rep_utils.gc_address_name);
        v_const_adress    := pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_last_active_address_id(v_insuree_info.contact_id
                                                                                                                       ,'CONST')
                                                                      ,pkg_contact_rep_utils.gc_address_name);
        v_phone           := pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(v_insuree_info.contact_id));
      ELSE
        v_fio             := '_____________________________________________________________________________________________________';
        v_passport        := '__________________________________________________________________________________________________________________________________________________________________________________________________________';
        v_letters_address := '_____________________________________________________________________________________________________';
        v_const_adress    := '_____________________________________________________________________________________________________';
        v_phone           := '_____________________________________________________________________________________________________';
      END IF;
    
      print_info_element(par_element_name => 'Ф.И.О.', par_element_value => v_fio);
    
      print_birthsate_gender(v_insuree_info.date_of_birth, v_insuree_info.gender);
    
      print_info_element(par_element_name  => 'ДОКУМЕНТ, УДОСТОВЕРЯЮЩИЙ ЛИЧНОСТЬ'
                        ,par_element_value => v_passport);
    
      print_info_element(par_element_name  => 'АДРЕС ПОЧТОВЫЙ'
                        ,par_element_value => v_letters_address);
      print_info_element(par_element_name  => 'АДРЕС РЕГИСТРАЦИИ'
                        ,par_element_value => v_const_adress);
      print_info_element(par_element_name  => 'КОНТАКТНЫЙ ТЕЛЕФОН'
                        ,par_element_value => v_phone);
    
      print_mark('ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,v_insuree_info.is_public_contact = 1);
    
      print_mark('ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,v_insuree_info.is_rpdl = 1);
    END print_insuree;
  
    PROCEDURE print_real_assureds IS
      v_assured_info t_contact_summary;
      v_yes          VARCHAR2(2);
      v_no           VARCHAR2(2);
    BEGIN
      IF v_pol_sum.assured_array IS NOT NULL
         AND v_pol_sum.assured_array.count > 0
      THEN
      
        FOR rec IN (SELECT aas.assured_contact_id
                          ,at.brief
                          ,nvl(lag(0) over(PARTITION BY at.brief ORDER BY aa.as_asset_id), 1) is_first
                          ,row_number() over(ORDER BY decode(at.brief, 'ASSET_PERSON', 1, 2), aa.as_asset_id) rn
                      FROM as_asset aa
                          ,p_asset_header ah
                          ,as_assured aas
                          ,t_asset_type at
                          ,TABLE(v_pol_sum.assured_array) c
                     WHERE aa.p_policy_id = v_policy_id
                       AND aa.p_asset_header_id = ah.p_asset_header_id
                       AND ah.t_asset_type_id = at.t_asset_type_id
                       AND aa.as_asset_id = aas.as_assured_id
                       AND aas.assured_contact_id = c.column_value
                     ORDER BY decode(at.brief, 'ASSET_PERSON', 1, 2)
                             ,aa.as_asset_id)
        LOOP
          IF rec.is_first = 1
             AND rec.brief = 'ASSET_PERSON_CHILD'
          THEN
            set_font(par_size => 9, par_style => gc_style_bold, par_color => gc_color_orange);
            plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННЫЕ – ДЕТИ (УСЫНОВЛЕННЫЕ):'
                           ,p_align => 'L'
                           ,p_h     => -1
                           ,p_ln    => 1);
          
          END IF;
        
          set_font(par_style => gc_style_bold, par_color => gc_color_orange);
          IF rec.brief = 'ASSET_PERSON'
          THEN
            plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННЫЙ ' || rec.rn || ' (возраст 18-64 лет):'
                           ,p_align => 'L'
                           ,p_h     => -1
                           ,p_ln    => 1);
          ELSE
            plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННЫЙ ' || rec.rn || ' (возраст 1-17 лет):'
                           ,p_align => 'L'
                           ,p_h     => -1
                           ,p_ln    => 1);
          END IF;
        
          set_font(par_size => 9, par_style => gc_style_bold);
          v_assured_info := get_contact_summary(rec.assured_contact_id);
        
          print_info_element(par_element_name => 'Ф.И.О.', par_element_value => v_assured_info.fio);
          print_birthsate_gender(v_assured_info.date_of_birth, v_assured_info.gender);
        
          IF rec.brief = 'ASSET_PERSON'
          THEN
            print_info_element(par_element_name  => 'ДОКУМЕНТ, УДОСТОВЕРЯЮЩИЙ ЛИЧНОСТЬ'
                              ,par_element_value => get_passport(v_assured_info.contact_id));
          
            print_info_element(par_element_name  => 'АДРЕС ПОЧТОВЫЙ'
                              ,par_element_value => pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_letters_address_id(v_assured_info.contact_id)
                                                                                             ,pkg_contact_rep_utils.gc_address_name));
            print_info_element(par_element_name  => 'АДРЕС РЕГИСТРАЦИИ'
                              ,par_element_value => pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_last_active_address_id(v_assured_info.contact_id
                                                                                                                                              ,'CONST')
                                                                                             ,pkg_contact_rep_utils.gc_address_name));
            print_info_element(par_element_name  => 'КОНТАКТНЫЙ ТЕЛЕФОН'
                              ,par_element_value => pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(v_assured_info.contact_id)));
          END IF;
        
          print_mark('ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                    ,v_assured_info.is_public_contact = 1);
        
          print_mark('ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                    ,v_assured_info.is_rpdl = 1);
        
        END LOOP;
      
      END IF;
    END print_real_assureds;
  
    PROCEDURE print_empty_assureds IS
      v_assured_info t_contact_summary;
      v_marked   CONSTANT VARCHAR2(2) := 'DF';
      v_unmarked CONSTANT VARCHAR2(2) := 'D';
      v_yes VARCHAR2(2);
      v_no  VARCHAR2(2);
    BEGIN
      FOR rec IN (SELECT rn
                        ,brief
                        ,nvl(lag(0) over(PARTITION BY brief ORDER BY rn), 1) is_first
                    FROM (SELECT LEVEL rn
                                ,'ASSET_PERSON' brief
                            FROM dual
                          CONNECT BY LEVEL <= 2
                          UNION ALL
                          SELECT LEVEL + 2 rn
                                ,'ASSET_PERSON_CHILD' brief
                            FROM dual
                          CONNECT BY LEVEL <= 4)
                   ORDER BY decode(brief, 'ASSET_PERSON', 1, 2)
                           ,rn)
      LOOP
        IF rec.is_first = 1
           AND rec.brief = 'ASSET_PERSON_CHILD'
        THEN
          set_font(par_style => gc_style_bold, par_color => gc_color_orange);
          plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННЫЕ – ДЕТИ (УСЫНОВЛЕННЫЕ):'
                         ,p_align => 'L'
                         ,p_h     => -1
                         ,p_ln    => 1);
        
        END IF;
      
        set_font(par_style => gc_style_bold, par_color => gc_color_orange);
        IF rec.brief = 'ASSET_PERSON'
        THEN
          plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННЫЙ ' || rec.rn || ' (возраст 18-64 лет):'
                         ,p_align => 'L'
                         ,p_h     => -1
                         ,p_ln    => 1);
        ELSE
          plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННЫЙ ' || rec.rn || ' (возраст 1-17 лет):'
                         ,p_align => 'L'
                         ,p_h     => -1
                         ,p_ln    => 1);
        END IF;
      
        set_font(par_style => gc_style_bold);
      
        print_info_element(par_element_name  => 'Ф.И.О.'
                          ,par_element_value => '_____________________________________________________________________________________________________');
        print_birthsate_gender(NULL, NULL);
      
        IF rec.brief = 'ASSET_PERSON'
        THEN
          print_info_element(par_element_name  => 'ДОКУМЕНТ, УДОСТОВЕРЯЮЩИЙ ЛИЧНОСТЬ'
                            ,par_element_value => '__________________________________________________________________________________________________________________________________________________________________________________________________________');
          print_info_element(par_element_name  => 'АДРЕС ПОЧТОВЫЙ'
                            ,par_element_value => '_____________________________________________________________________________________________________');
          print_info_element(par_element_name  => 'АДРЕС РЕГИСТРАЦИИ'
                            ,par_element_value => '_____________________________________________________________________________________________________');
          print_info_element(par_element_name  => 'КОНТАКТНЫЙ ТЕЛЕФОН'
                            ,par_element_value => '_____________________________________________________________________________________________________');
        END IF;
      
        print_mark('ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                  ,NULL);
      
        print_mark('ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                  ,NULL);
      END LOOP;
    END print_empty_assureds;
  
    PROCEDURE print_programs IS
      v_marks tt_one_col := tt_one_col('D', 'D', 'D');
      c_header_height CONSTANT NUMBER := 10;
      v_height NUMBER := c_header_height;
      v_dummy  BOOLEAN;
    BEGIN
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 2;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
      gv_widths(4) := plpdf.getpagespace / 6;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
      gv_borders(4) := '1';
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
    
      /* Проверка разрыва страницы */
      DECLARE
        v_datas    plpdf_type.t_row_datas; -- Array of datas
        v_borders  plpdf_type.t_row_borders; -- Array of borders
        v_widths   plpdf_type.t_row_widths; -- Array of widths
        v_aligns   plpdf_type.t_row_aligns; -- Array of aligns
        v_styles   plpdf_type.t_row_styles; -- Array of styles
        v_maxlines plpdf_type.t_row_maxlines; -- Array of max lines
      BEGIN
        v_datas(1) := 'Страховые риски в отношении Застрахованных';
        v_datas(2) := 'Страховые суммы (в рублях)';
      
        v_widths(1) := gv_widths(1);
        v_widths(2) := gv_widths(1);
      
        v_borders(1) := '1';
        v_borders(2) := '1';
      
        v_styles(1) := 'B';
        v_styles(2) := 'B';
      
        v_height := v_height +
                    plpdf.getrowheight(p_data => v_datas, p_width => v_widths, p_maxline => v_maxlines);
      
      END;
    
      FOR rec IN (SELECT ppl.t_product_line_desc
                    FROM v_prod_product_line ppl
                        ,t_product_line      pl
                        ,t_as_type_prod_line a
                        ,t_asset_type        at
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = a.product_line_id
                     AND at.brief = 'ASSET_PERSON'
                     AND ppl.t_product_line_id = pl.id
                     AND a.asset_common_type_id = at.t_asset_type_id
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := rec.t_product_line_desc;
      
        IF rec.t_product_line_desc NOT LIKE 'Перело%'
        THEN
          gv_datas(2) := '150 000';
          gv_datas(3) := '250 000';
          gv_datas(4) := '500 000';
        ELSE
          gv_datas(2) := '50 000';
          gv_datas(3) := '50 000';
          gv_datas(4) := '50 000';
        END IF;
        v_height := v_height + plpdf.getrowheight(p_data    => gv_datas
                                                 ,p_width   => gv_widths
                                                 ,p_maxline => gv_maxlines);
      END LOOP;
    
      /* Переносим на новую страницу, если будет разрыв */
      v_dummy := plpdf.checkpagebreak(p_h => v_height);
    
      /* Печать */
      plpdf.printcell(p_w          => gv_widths(1)
                     ,p_h          => c_header_height
                     ,p_border     => '1'
                     ,p_ln         => 0
                     ,p_align      => 'C'
                     ,p_vert_align => 'C'
                     ,p_txt        => 'Программа');
    
      IF v_is_real_policy
      THEN
        IF v_pol_sum.base_sum = 150000
        THEN
          v_marks(1) := 'DF';
        ELSIF v_pol_sum.base_sum = 250000
        THEN
          v_marks(2) := 'DF';
        ELSIF v_pol_sum.base_sum = 500000
        THEN
          v_marks(3) := 'DF';
        END IF;
      END IF;
    
      plpdf.drawrect(p_x     => plpdf.getcurrentx + gv_widths(2) / 2 - 5
                    ,p_y     => plpdf.getcurrenty + 5 - 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => v_marks(1));
    
      plpdf.printcell(p_w          => gv_widths(2)
                     ,p_h          => c_header_height
                     ,p_border     => '1'
                     ,p_ln         => 0
                     ,p_align      => 'C'
                     ,p_vert_align => 'C'
                     ,p_txt        => '1');
    
      plpdf.drawrect(p_x     => plpdf.getcurrentx + gv_widths(2) / 2 - 5
                    ,p_y     => plpdf.getcurrenty + 5 - 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => v_marks(2));
    
      plpdf.printcell(p_w          => gv_widths(3)
                     ,p_h          => c_header_height
                     ,p_border     => '1'
                     ,p_ln         => 0
                     ,p_align      => 'C'
                     ,p_vert_align => 'C'
                     ,p_txt        => '2');
    
      plpdf.drawrect(p_x     => plpdf.getcurrentx + gv_widths(2) / 2 - 5
                    ,p_y     => plpdf.getcurrenty + 5 - 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => v_marks(3));
    
      plpdf.printcell(p_w          => gv_widths(4)
                     ,p_h          => c_header_height
                     ,p_border     => '1'
                     ,p_ln         => 1
                     ,p_align      => 'C'
                     ,p_vert_align => 'C'
                     ,p_txt        => '3');
    
      DECLARE
        v_datas    plpdf_type.t_row_datas; -- Array of datas
        v_borders  plpdf_type.t_row_borders; -- Array of borders
        v_widths   plpdf_type.t_row_widths; -- Array of widths
        v_aligns   plpdf_type.t_row_aligns; -- Array of aligns
        v_styles   plpdf_type.t_row_styles; -- Array of styles
        v_maxlines plpdf_type.t_row_maxlines; -- Array of max lines
      BEGIN
        v_datas(1) := 'Страховые риски в отношении Застрахованных';
        v_datas(2) := 'Страховые суммы (в рублях)';
      
        v_widths(1) := gv_widths(1);
        v_widths(2) := gv_widths(1);
      
        v_borders(1) := '1';
        v_borders(2) := '1';
      
        v_styles(1) := 'B';
        v_styles(2) := 'B';
      
        row_print2(par_datas    => v_datas
                  ,par_borders  => v_borders
                  ,par_widths   => v_widths
                  ,par_aligns   => v_aligns
                  ,par_styles   => v_styles
                  ,par_maxlines => v_maxlines);
      END;
    
      FOR rec IN (SELECT ppl.t_product_line_desc
                    FROM v_prod_product_line ppl
                        ,t_product_line      pl
                        ,t_as_type_prod_line a
                        ,t_asset_type        at
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = a.product_line_id
                     AND at.brief = 'ASSET_PERSON'
                     AND ppl.t_product_line_id = pl.id
                     AND a.asset_common_type_id = at.t_asset_type_id
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := rec.t_product_line_desc;
      
        IF rec.t_product_line_desc NOT LIKE 'Перело%'
        THEN
          gv_datas(2) := '150 000';
          gv_datas(3) := '250 000';
          gv_datas(4) := '500 000';
        ELSE
          gv_datas(2) := '50 000';
          gv_datas(3) := '50 000';
          gv_datas(4) := '50 000';
        END IF;
      
        row_print2;
      END LOOP;
    
      DECLARE
        v_datas    plpdf_type.t_row_datas; -- Array of datas
        v_borders  plpdf_type.t_row_borders; -- Array of borders
        v_widths   plpdf_type.t_row_widths; -- Array of widths
        v_aligns   plpdf_type.t_row_aligns; -- Array of aligns
        v_styles   plpdf_type.t_row_styles; -- Array of styles
        v_maxlines plpdf_type.t_row_maxlines; -- Array of max lines
      BEGIN
        v_datas(1) := 'Страховые риски в отношении Застрахованного(ых) ребенка (детей)';
      
        v_widths(1) := gv_widths(1) * 2;
      
        v_borders(1) := '1';
      
        v_styles(1) := 'B';
      
        row_print2(par_datas    => v_datas
                  ,par_borders  => v_borders
                  ,par_widths   => v_widths
                  ,par_aligns   => v_aligns
                  ,par_styles   => v_styles
                  ,par_maxlines => v_maxlines);
      END;
    
      FOR rec IN (SELECT ppl.t_product_line_desc
                    FROM v_prod_product_line ppl
                        ,t_product_line      pl
                        ,t_as_type_prod_line a
                        ,t_asset_type        at
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = a.product_line_id
                     AND at.brief = 'ASSET_PERSON_CHILD'
                     AND ppl.t_product_line_id = pl.id
                     AND a.asset_common_type_id = at.t_asset_type_id
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := rec.t_product_line_desc;
      
        IF v_pol_sum.product_brief = 'FAMILY_PROTECTION_SGI'
           AND rec.t_product_line_desc LIKE 'Телес%'
        THEN
          gv_datas(2) := '50 000';
          gv_datas(3) := '50 000';
          gv_datas(4) := '50 000';
        ELSE
          gv_datas(2) := '150 000';
          gv_datas(3) := '250 000';
          gv_datas(4) := '500 000';
        END IF;
      
        row_print2;
      END LOOP;
    
      gv_datas(1) := 'Страховая премия по договору страхования (в рублях)';
    
      IF v_pol_sum.payment_terms_brief = 'Единовременно'
      THEN
        gv_datas(2) := '3 000';
        gv_datas(3) := '5 000';
        gv_datas(4) := '10 000';
      ELSE
        gv_datas(2) := '252';
        gv_datas(3) := '420';
        gv_datas(4) := '840';
      END IF;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
      gv_styles(4) := 'B';
    
      row_print2;
    
    END print_programs;
  
    PROCEDURE print_payment_terms IS
    BEGIN
      v_pol_sum.payment_terms := dml_t_payment_terms.get_record(dml_t_payment_terms.get_id_by_brief(v_pol_sum.payment_terms_brief))
                                 .description;
    
      set_chapter('ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ: ' || v_pol_sum.payment_terms);
      set_font;
    
      IF v_pol_sum.payment_terms_brief = 'Единовременно'
      THEN
        plpdf.printmultilinecell(p_h   => -1
                                ,p_txt => 'оплата страховой премии производится один раз не позднее даты заключения Договора'
                                ,p_ln  => 1);
      ELSE
        plpdf.printmultilinecell(p_h   => -1
                                ,p_txt => 'оплата страховых взносов производится раз в месяц не позднее даты заключения Договора, далее - не позднее даты, отстоящей от нее на срок, кратный месяцу'
                                ,p_ln  => 1);
      END IF;
    
      set_font(par_style => gc_style_italic);
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем'
                              ,p_ln  => 1);
    
    END print_payment_terms;
  
    PROCEDURE print_beneficiaries IS
      v_full_width CONSTANT NUMBER := plpdf.getpagespace;
      v_aligns              plpdf_type.t_row_aligns;
      v_child_beneficiaries tt_one_col;
      v_found_flag          BOOLEAN;
    BEGIN
      set_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ:');
      set_font;
    
      delete_row_print_cache;
    
      v_aligns(1) := 'C';
      v_aligns(2) := 'C';
      v_aligns(3) := 'C';
      v_aligns(4) := 'C';
      v_aligns(5) := 'C';
    
      gv_widths(1) := v_full_width / 11 * 1;
      gv_widths(2) := v_full_width / 11 * 3.5;
      gv_widths(3) := v_full_width / 11 * 1.5;
      gv_widths(4) := v_full_width / 11 * 3;
      gv_widths(5) := v_full_width / 11 * 2;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
      gv_borders(4) := '1';
      gv_borders(5) := '1';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
      gv_aligns(5) := 'C';
    
      IF v_is_real_policy
      THEN
        FOR rec_assured IN (SELECT aa.as_asset_id
                                  ,row_number() over(ORDER BY aa.as_asset_id) rn
                              FROM as_asset       aa
                                  ,p_asset_header ah
                                  ,t_asset_type   at
                             WHERE aa.p_policy_id = v_policy_id
                               AND aa.p_asset_header_id = ah.p_asset_header_id
                               AND ah.t_asset_type_id = at.t_asset_type_id
                               AND at.brief = 'ASSET_PERSON'
                             ORDER BY aa.as_asset_id)
        LOOP
        
          set_font(par_style => gc_style_bold, par_color => gc_color_orange);
          plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННОГО ' || rec_assured.rn || ':'
                         ,p_align => 'L'
                         ,p_h     => -1
                         ,p_ln    => 1);
        
          set_font;
        
          gv_datas(1) := '№';
          gv_datas(2) := 'Фамилия, Имя, Отчество';
          gv_datas(3) := 'Дата рождения';
          gv_datas(4) := 'Степень родства с Застрахованным';
          gv_datas(5) := 'Доля от страховой выплаты, %';
        
          row_print2(par_aligns => v_aligns);
        
          v_found_flag := FALSE;
        
          FOR rec_benif IN (SELECT c.obj_name_orig
                                  ,cp.date_of_birth
                                  ,crt.relationship_dsc
                                  ,ab.value
                                  ,row_number() over(ORDER BY ab.as_beneficiary_id) rn
                              FROM as_beneficiary     ab
                                  ,t_contact_rel_type crt
                                  ,cn_contact_rel     ccr
                                  ,contact            c
                                  ,cn_person          cp
                                  ,t_path_type        pt
                             WHERE ab.as_asset_id = rec_assured.as_asset_id
                               AND ab.cn_contact_rel_id = ccr.id
                               AND ccr.relationship_type = crt.id
                               AND ab.value_type_id = pt.t_path_type_id
                               AND ab.contact_id = c.contact_id
                               AND c.contact_id = cp.contact_id(+)
                             ORDER BY ab.as_beneficiary_id)
          LOOP
            gv_datas(1) := rec_benif.rn;
            gv_datas(2) := rec_benif.obj_name_orig;
            gv_datas(3) := to_char(rec_benif.date_of_birth, 'dd.mm.yyyy');
            gv_datas(4) := rec_benif.relationship_dsc;
            gv_datas(5) := rec_benif.value;
          
            row_print2;
          
            v_found_flag := TRUE;
          END LOOP;
        
          IF NOT v_found_flag
          THEN
            gv_datas(1) := 1;
            gv_datas(2) := NULL;
            gv_datas(3) := NULL;
            gv_datas(4) := NULL;
            gv_datas(5) := NULL;
          
            row_print2;
          
          END IF;
        
        END LOOP;
      
        set_font(par_style => gc_style_bold, par_color => gc_color_orange);
        plpdf.printcell(p_txt   => 'ПО ВСЕМ РИСКАМ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ ДЕТЕЙ:'
                       ,p_align => 'L'
                       ,p_h     => -1
                       ,p_ln    => 1);
      
        set_font;
      
        SELECT DISTINCT c.obj_name_orig
          BULK COLLECT
          INTO v_child_beneficiaries
          FROM as_asset           aa
              ,p_asset_header     ah
              ,t_asset_type       at
              ,as_beneficiary     ab
              ,t_contact_rel_type crt
              ,cn_contact_rel     ccr
              ,contact            c
         WHERE aa.p_policy_id = v_policy_id
           AND aa.p_asset_header_id = ah.p_asset_header_id
           AND ah.t_asset_type_id = at.t_asset_type_id
           AND at.brief = 'ASSET_PERSON_CHILD'
           AND ab.as_asset_id = aa.as_asset_id
           AND ab.cn_contact_rel_id = ccr.id
           AND ccr.relationship_type = crt.id
           AND ab.contact_id = c.contact_id;
      
        plpdf.printmultilinecell(p_h      => -1
                                ,p_txt    => pkg_utils.get_aggregated_string(v_child_beneficiaries
                                                                            ,', ')
                                ,p_border => '1'
                                ,p_ln     => 1);
      
      ELSE
        FOR i IN 1 .. 2
        LOOP
        
          set_font(par_style => gc_style_bold, par_color => gc_color_orange);
          plpdf.printcell(p_txt   => 'ЗАСТРАХОВАННОГО ' || i || ':'
                         ,p_align => 'L'
                         ,p_h     => -1
                         ,p_ln    => 1);
        
          set_font;
        
          gv_datas(1) := '№';
          gv_datas(2) := 'Фамилия, Имя, Отчество';
          gv_datas(3) := 'Дата рождения';
          gv_datas(4) := 'Степень родства с Застрахованным';
          gv_datas(5) := 'Доля от страховой выплаты, %';
        
          row_print2(par_aligns => v_aligns);
        
          gv_datas(1) := 1;
          gv_datas(2) := NULL;
          gv_datas(3) := NULL;
          gv_datas(4) := NULL;
          gv_datas(5) := NULL;
        
          row_print2;
        
          gv_datas(1) := 2;
          gv_datas(2) := NULL;
          gv_datas(3) := NULL;
          gv_datas(4) := NULL;
          gv_datas(5) := NULL;
        
          row_print2;
        
        END LOOP;
      
        set_font(par_style => gc_style_bold, par_color => gc_color_orange);
        plpdf.printcell(p_txt   => 'ПО ВСЕМ РИСКАМ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ ДЕТЕЙ:'
                       ,p_align => 'L'
                       ,p_h     => -1
                       ,p_ln    => 1);
      
        set_font;
      
        plpdf.printcell(p_h => 5, p_txt => NULL, p_border => '1', p_ln => 1);
      
      END IF;
    
      /*for rec in (select from as_asset aa, as_beneficiary ab, p_asset_header ah, t_asset_type at, t_contact_rel_type crt
      where aa.p_policy_id = v_policy_id
      and aa.as_asset_id = ab.as_asset_id
      and ab.cn_contact_rel_id = crt.relationship_dsc
      and */
    
    END print_beneficiaries;
  
    PROCEDURE print_declaration IS
    BEGIN
      set_chapter('ДЕКЛАРАЦИЯ ЗАСТРАХОВАННОГО');
      set_font(par_style => gc_style_bold);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'Настоящим я (Страхователь/Застрахованный) заявляю, что никто из Застрахованных/Застрахованных детей по настоящему Договору страхования:'
                              ,p_ln  => 1);
    
      set_font;
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение;'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'НЕ страдает мышечной дистрофией, онкологическими заболеваниями, нервными расстройствами, в том числе неврозами и тиками, психическими заболеваниями;'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'НЕ употребляет наркотики, токсические вещества, НЕ страдает алкоголизмом, или НЕ состоит по перечисленным причинам на диспансерном учете;'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'НЕ страдает иными заболеваниями, ограничивающими физическую активность или повышающими риск травмы, включая нарушения зрения, слуха, функции органов равновесия и т.д.; Не является ВИЧ-инфицированным или не страдает СПИДом (синдромом приобретенного иммунного дефицита); НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений; НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.);'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'НЕ занимается опасными видами спорта или опасными видами увлечений (хобби).'
                              ,p_ln  => 1);
    
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'Да, я (Страхователь / Застрахованный) могу подписать настоящую Декларацию и заявляю:'
                              ,p_ln  => 1);
      set_font;
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'что я согласен(-на) с утверждениями, заявленными в настоящей Декларации, т.е. я подтверждаю достоверность сведений содержащейся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному/Застрахованному ребенку медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.)   в связи со страховыми случаями по данному договору страхования;'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'что в отношении Застрахованных/Застрахованных детей не заключены и не поданы заявления на заключение других договоров страхования по программе «Семейная защита» в ООО «СК «Ренессанс Жизнь» и общая страховая сумма по любым договорам страхования, заключенным в отношении Застрахованных по рискам «смерть по любой причине»/«смерть в результате несчастного случая», не превышает 2 000 000 (два миллиона) рублей.'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'Подписывая настоящий Договор, Страхователь в соответствии c ФЗ РФ «О персональных данных» №152-ФЗ от 27.07.2006 выражает Страховщику согласие на обработку, в том числе передачу перестраховочным организациям (в том числе находящимся за рубежом) своих персональных данных, в том числе данных о состоянии здоровья, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путём осуществления прямых контактов с помощью средств связи, в том числе в целях обеспечения исполнения настоящего Договора, а также выражает Страховщику согласие на предоставление Выгодоприобретателю информации по настоящему Договору, об исполнении Страховщиком и/или Страхователем обязательств по настоящему Договору, в том числе информацию об оплате и размере страховой премии, размере страховой суммы, о возникновении и урегулировании претензий, наступлении/вероятности наступления страховых случаев, страховой выплате и другую имеющую отношение к настоящему Договору информацию'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => 'Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия Договора страхования и в течение 15 лет после окончания срока действия Договора и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.'
                              ,p_ln  => 1);
    
    END print_declaration;
  
    PROCEDURE print_additional_conditions IS
    BEGIN
      set_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
      set_font;
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => '1. ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН НА ОСНОВАНИИ ПОЛИСНЫХ УСЛОВИЙ К ДОГОВОРУ СТРАХОВАНИЯ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ ПО ПРОГРАММЕ «СЕМЕЙНАЯ ЗАЩИТА»;'
                              ,p_ln  => 1);
    
      plpdf.printmultilinecell(p_h   => -1
                              ,p_txt => '2. СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ПОЛИСЕ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ.'
                              ,p_ln  => 1);
    
      plpdf.linebreak;
    
    END print_additional_conditions;
  
    PROCEDURE print_signes IS
      v_signer typ_signer;
    BEGIN
      v_signer := get_signer('pkg_rep_plpdf.rep_family_protection_policy');
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace * 2 / 3;
    
      gv_styles(1) := 'I';
      gv_styles(2) := 'I';
    
      gv_datas(1) := 'К Договору страхования прилагаются:';
      gv_datas(2) := 'Приложение №1: Полисные условия по программе «Семейная защита»';
    
      row_print2;
    
      plpdf.linebreak;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
    
      gv_widths(1) := plpdf.getpagespace * 0.9;
      gv_widths(2) := plpdf.getpagespace * 0.1;
    
      gv_datas(1) := 'Полисные условия по программе «Семейная защита» получил';
      gv_datas(2) := NULL;
    
      row_print2;
    
      IF NOT v_is_real_policy
         OR v_is_real_policy
         AND nvl(v_pol_sum.policy_status_desc, '_') NOT IN
         ('Ожидает подтверждения из B2B', 'Проект')
      THEN
      
        IF plpdf.checkpagebreak(p_h => 50, p_newpage => FALSE)
        THEN
          plpdf.newpage;
        END IF;
      
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - 5 - 45
                      ,p_y    => plpdf.getcurrenty
                      ,p_w    => 45
                      ,p_h    => 50);
      END IF;
    
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
      row_print2;
    
      gv_widths(1) := plpdf.getpagespace * 2 / 3;
      gv_widths(2) := plpdf.getpagespace / 3;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_datas(1) := 'Страхователь';
      gv_datas(2) := 'Страховщик';
    
      row_print2;
    
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
    
      gv_datas(1) := '___________/' || nvl(v_insuree_info.fio, '__________________');
      gv_datas(2) := 'Представитель по доверенности ' || v_signer.short_name;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'R';
    
      row_print2;
    
      gv_datas(1) := 'Подпись           ФИО Страхователя';
      gv_datas(2) := '(дов. №' || v_signer.procuratory_num || ')';
    
      row_print2;
    
    END print_signes;
  
  BEGIN
  
    BEGIN
      v_is_real_policy := nvl(repcore.get_context('PRINT_EMPTY'), 0) = 0;
    EXCEPTION
      -- В случае,если context не задан, выдается -20000 ошибка.
      -- Клево было бы выдавать ex.no_data_found
      WHEN OTHERS THEN
        v_is_real_policy := TRUE;
    END;
  
    IF v_is_real_policy
    THEN
      v_policy_id    := to_number(repcore.get_context('POL_ID'));
      v_pol_sum      := get_policy_summary(v_policy_id);
      v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    ELSE
      v_insuree_info.is_rpdl           := NULL;
      v_insuree_info.is_public_contact := NULL;
    
      BEGIN
        v_pol_sum.payment_terms_brief := nvl(repcore.get_context('PAYMENT_TERMS')
                                            ,'Единовременно');
      EXCEPTION
        -- В случае,если context не задан, выдается -20000 ошибка.
        -- Клево было бы выдавать ex.no_data_found
        WHEN OTHERS THEN
          v_pol_sum.payment_terms_brief := 'Единовременно';
      END;
    
      BEGIN
        v_number_of_copies := repcore.get_context('NUMBER_OF_COPIES');
      EXCEPTION
        WHEN OTHERS THEN
          v_number_of_copies := 1;
      END;
    
      v_pol_sum.product_brief := repcore.get_context('BRIEF');
    
    END IF;
  
    gv_current_copy := 0;
  
    -- Инициализация
    init(par_default_font_size => 7, par_top_margin => 15);
  
    plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
    plpdf.setfooterprocname(p_proc_name => 'ins.pkg_rep_plpdf.footer_family_protection'
                           ,p_height    => 27);
  
    OPEN cur_tmp_bso(par_number_of_copies => v_number_of_copies);
    LOOP
      FETCH cur_tmp_bso
        INTO v_tmp_bso_info;
      EXIT WHEN cur_tmp_bso%NOTFOUND AND NOT v_is_real_policy;
    
      /* Номер текущей копии печатной формы для правильной номерации страниц */
      gv_current_copy := gv_current_copy + 1;
    
      gv_chapter_num := 0;
    
      IF NOT v_is_real_policy
         AND cur_tmp_bso%ROWCOUNT /*v_tmp_bso_info.rn*/
         > 1
      THEN
        plpdf.newpage;
      END IF;
    
      set_title('СЕМЕЙНАЯ ЗАЩИТА');
      IF v_is_real_policy
      THEN
        set_cotitle('Договор страхования от несчастных случаев №' || v_pol_sum.pol_num);
      ELSE
        set_cotitle('Договор страхования от несчастных случаев № ' || v_tmp_bso_info.ids);
      END IF;
    
      -------------------------------------------------------------------------------------------------
      -- СТРАХОВЩИК
      -------------------------------------------------------------------------------------------------
      set_chapter(upper('СТРАХОВЩИК'));
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_txt => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_def_info)
                              ,p_h   => -1
                              ,p_ln  => 1);
    
      -------------------------------------------------------------------------------------------------
      -- СТРАХОВАТЕЛЬ
      -------------------------------------------------------------------------------------------------
      print_insuree;
    
      -------------------------------------------------------------------------------------------------
      -- ЗАСТРАХОВАННЫЕ  - СУПРУГИ, РОДИТЕЛИ (УСЫНОВИТЕЛИ) ДЕТЕЙ, ЗАСТРАХОВАННЫХ ПО НАСТОЯЩЕМУ ДОГОВОРУ:
      -------------------------------------------------------------------------------------------------
      set_chapter(upper('ЗАСТРАХОВАННЫЕ  - СУПРУГИ, РОДИТЕЛИ (УСЫНОВИТЕЛИ) ДЕТЕЙ, ЗАСТРАХОВАННЫХ ПО НАСТОЯЩЕМУ ДОГОВОРУ:'));
      IF v_is_real_policy
      THEN
        print_real_assureds;
      ELSE
        print_empty_assureds;
      END IF;
    
      -------------------------------------------------------------------------------------------------
      -- ПРОГРАММЫ
      -------------------------------------------------------------------------------------------------
      print_programs;
    
      -------------------------------------------------------------------------------------------------
      -- СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ
      -------------------------------------------------------------------------------------------------
      v_period_string := 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: 1 ГОД, С ';
      IF v_is_real_policy
      THEN
        v_period_string := v_period_string || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' ПО ' ||
                           to_char(v_pol_sum.end_date, 'dd.mm.yyyy');
      ELSE
        v_period_string := v_period_string || '____________ ПО ____________';
      END IF;
    
      set_chapter(v_period_string);
    
      -------------------------------------------------------------------------------------------------
      -- ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ
      -------------------------------------------------------------------------------------------------
      set_chapter('ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ: ВЕСЬ МИР, 24 ЧАСА В СУТКИ');
    
      -------------------------------------------------------------------------------------------------
      -- ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ:
      -------------------------------------------------------------------------------------------------
      print_payment_terms;
    
      print_beneficiaries;
    
      print_declaration;
    
      v_dummy := plpdf.checkpagebreak(p_h => 100, p_newpage => TRUE);
    
      print_additional_conditions;
    
      print_signes;
    
      plpdf.linebreak;
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_txt => 'Бланк можно использовать в срок до ' ||
                               to_char(trunc(SYSDATE) + 30, 'dd.mm.yyyy'));
    
      EXIT WHEN v_is_real_policy;
    
      plpdf.setpagenoend;
    
    END LOOP;
  
    CLOSE cur_tmp_bso;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => par_data);
  
    IF v_is_real_policy
    THEN
      par_file_name := 'policy_' || v_pol_sum.pol_num || '.pdf';
    ELSE
      par_file_name := 'BSO_POOL.pdf';
    END IF;
    par_content_type := gc_pdf_content_type;
  
  EXCEPTION
    WHEN OTHERS THEN
      IF cur_tmp_bso%ISOPEN
      THEN
        CLOSE cur_tmp_bso;
      END IF;
      RAISE;
  END rep_family_protection_policy;

  PROCEDURE footer_family_protection IS
    v_is_real_policy BOOLEAN;
    v_current_page   INTEGER;
    v_text           VARCHAR2(255);
  BEGIN
  
    BEGIN
      v_is_real_policy := nvl(repcore.get_context('PRINT_EMPTY'), 0) = 0;
    EXCEPTION
      -- В случае,если context не задан, выдается -20000 ошибка.
      -- Клево было бы выдавать ex.no_data_found
      WHEN OTHERS THEN
        v_is_real_policy := TRUE;
    END;
  
    set_font;
  
    v_current_page := plpdf.currentpagenumber;
  
    IF v_is_real_policy
    THEN
      v_text := 'Страница  ' || to_char(v_current_page) || ' из {nb}';
    ELSE
      v_text := 'Страница  ' || to_char(MOD(v_current_page - 1, 3) + 1) || ' из 3';
    END IF;
  
    plpdf.printcell(p_txt        => v_text
                   ,p_border     => 0
                   ,p_align      => 'C'
                   ,p_ln         => 0
                   ,p_h          => 27
                   ,p_vert_align => 'B');
  
  END footer_family_protection;

  /*
    Пиядин А.
    223809 Проект ФТ по договорам кредитного страхования
  */
  PROCEDURE rep_universal_loader
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  
    par_load_file_id load_file.load_file_id%TYPE;
    l_blob           BLOB;
  
    current_doc_id   PLS_INTEGER;
    current_sheet_id PLS_INTEGER;
    current_row_id   PLS_INTEGER;
  
    FUNCTION column_numeric2alpha(p_col PLS_INTEGER) RETURN VARCHAR2 IS
      v_col_ind PLS_INTEGER;
      RESULT    VARCHAR2(20);
    BEGIN
    
      IF v_col_ind = p_col
      THEN
        RETURN RESULT;
      END IF;
    
      RESULT := CASE
                  WHEN p_col > 702 THEN
                   chr(64 + trunc((p_col - 27) / 676)) || chr(65 + MOD(trunc((p_col - 1) / 26) - 1, 26)) ||
                   chr(65 + MOD(p_col - 1, 26))
                  WHEN p_col > 26 THEN
                   chr(64 + trunc((p_col - 1) / 26)) || chr(65 + MOD(p_col - 1, 26))
                  ELSE
                   chr(64 + p_col)
                END;
      v_col_ind := p_col;
    
      RETURN RESULT;
    
    END;
  
    PROCEDURE query_to_sheet
    (
      query             CLOB
     ,show_column_names BOOLEAN DEFAULT TRUE
     ,doc_id            PLS_INTEGER DEFAULT current_doc_id
     ,sheet_id          PLS_INTEGER DEFAULT current_sheet_id
    ) IS
      c            NUMBER;
      v_col_desc   dbms_sql.desc_tab;
      v_col_count  NUMBER;
      v_col_string VARCHAR2(4000);
      v_col_number NUMBER;
      v_col_date   DATE;
      i            NUMBER;
      v_sql        CLOB;
    BEGIN
      v_sql := 'SELECT * FROM (' || query || ') where rownum < ((20 + 5) * 4)';
    
      c := dbms_sql.open_cursor;
    
      dbms_sql.parse(c, v_sql, dbms_sql.native);
    
      dbms_sql.describe_columns(c, v_col_count, v_col_desc);
    
      IF show_column_names = TRUE
      THEN
        ora_excel.add_row(doc_id, sheet_id);
      END IF;
    
      FOR i IN 1 .. v_col_count
      LOOP
      
        IF v_col_desc(i).col_type IN (2, 100, 101)
        THEN
        
          dbms_sql.define_column(c, i, v_col_number);
          IF show_column_names = TRUE
          THEN
            ora_excel.set_cell_value(column_numeric2alpha(i)
                                    ,v_col_desc(i).col_name
                                    ,doc_id
                                    ,sheet_id);
          END IF;
        
        ELSIF v_col_desc(i).col_type IN (12, 178, 179, 180, 181, 231)
        THEN
        
          dbms_sql.define_column(c, i, v_col_date);
          IF show_column_names = TRUE
          THEN
            ora_excel.set_cell_value(column_numeric2alpha(i)
                                    ,v_col_desc(i).col_name
                                    ,doc_id
                                    ,sheet_id);
          END IF;
        
        ELSE
        
          dbms_sql.define_column(c, i, v_col_string, 4000);
          IF show_column_names = TRUE
          THEN
            ora_excel.set_cell_value(column_numeric2alpha(i)
                                    ,v_col_desc(i).col_name
                                    ,doc_id
                                    ,sheet_id);
          END IF;
        END IF;
      
      END LOOP;
      i := dbms_sql.execute(c);
    
      WHILE dbms_sql.fetch_rows(c) > 0
      LOOP
      
        ora_excel.add_row(doc_id, sheet_id);
      
        IF MOD(current_row_id, 1000) = 0
        THEN
          COMMIT;
        END IF;
      
        FOR i IN 1 .. v_col_count
        LOOP
        
          IF (v_col_desc(i).col_type = 1)
          THEN
          
            dbms_sql.column_value(c, i, v_col_string);
            ora_excel.set_cell_value(column_numeric2alpha(i), v_col_string, doc_id, sheet_id);
          
          ELSIF (v_col_desc(i).col_type = 2)
          THEN
          
            dbms_sql.column_value(c, i, v_col_number);
            ora_excel.set_cell_value(column_numeric2alpha(i), v_col_number, doc_id, sheet_id);
          
          ELSIF (v_col_desc(i).col_type = 12)
          THEN
          
            dbms_sql.column_value(c, i, v_col_date);
            ora_excel.set_cell_value(column_numeric2alpha(i), v_col_date, doc_id, sheet_id);
          
          END IF;
        
        END LOOP;
      
      END LOOP;
    
      dbms_sql.close_cursor(c);
    
    EXCEPTION
      WHEN OTHERS THEN
        dbms_sql.close_cursor(c);
        raise_application_error(-20100, SQLCODE || ' ' || SQLERRM);
    END;
  
  BEGIN
    par_load_file_id := to_number(repcore.get_context('P_LOAD_FILE_ID'));
  
    --Создание документа
    current_doc_id   := ora_excel.new_document;
    current_sheet_id := ora_excel.add_sheet('Загрузка списка банковских ДС');
  
    --Создание шапки
    current_row_id := ora_excel.add_row;
    FOR cur IN (SELECT -3 num
                      ,'ROW_STATUS' column_name
                  FROM dual
                UNION ALL
                SELECT -2 num
                      ,'ROW_COMMENT' column_name
                  FROM dual
                UNION ALL
                SELECT -1 num
                      ,'ROW_COMMENT_CE' column_name
                  FROM dual
                UNION ALL
                SELECT 0 num
                      ,'ROW_COMMENT_NCE' column_name
                  FROM dual
                UNION ALL
                SELECT lcs.num
                      ,lcs.column_name
                  FROM load_file         lf
                      ,load_csv_settings lcs
                 WHERE 1 = 1
                   AND lf.load_csv_list_id = lcs.load_csv_list_id
                   AND lf.load_file_id = par_load_file_id
                 ORDER BY num)
    LOOP
      ora_excel.set_cell_value(column_numeric2alpha(cur.num + 4), cur.column_name);
    END LOOP;
  
    -- Тело отчета
    query_to_sheet('SELECT ins.pkg_load_file_to_table.get_status_desc(row_status) row_status
                          ,row_comment
                          ,row_comment_ce
                          ,row_comment_nce
                          , val_1,  val_2,  val_3,  val_4,  val_5,  val_6,  val_7,  val_8,  val_9, val_10
                          ,val_11, val_12, val_13, val_14, val_15, val_16, val_17, val_18, val_19, val_20
                          ,val_21, val_22, val_23, val_24, val_25, val_26, val_27, val_28, val_29, val_30
                          ,val_31, val_32, val_33, val_34, val_35, val_36, val_37, val_38, val_39, val_40
                          ,val_41, val_42, val_43, val_44, val_45, val_46, val_47, val_48, val_49, val_50
                          ,val_51, val_52, val_53, val_54, val_55, val_56, val_57, val_58, val_59, val_60
                          ,val_61, val_62, val_63, val_64, val_65, val_66, val_67, val_68, val_69, val_70
                          ,val_71, val_72, val_73, val_74, val_75, val_76, val_77, val_78, val_79, val_80
                          ,val_81, val_82, val_83, val_84, val_85, val_86, val_87, val_88, val_89, val_90
                          ,val_91, val_92, val_93, val_94, val_95, val_96, val_97, val_98, val_99, val_100
                    FROM ins.load_file_rows
                    WHERE load_file_id = ' || par_load_file_id
                  ,FALSE
                  ,current_doc_id
                  ,current_sheet_id);
  
    ora_excel.save_to_blob(l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'load_bank_policy.xlsx';
    par_content_type := 'application/excel';
  
  END rep_universal_loader;

  /*
    Печатная форма по продукту Platinum Life
  */
  PROCEDURE rep_platinum_life
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
    v_signer       typ_signer;
  
    gv_chapter_num    PLS_INTEGER := 0;
    gv_default_height NUMBER := 3;
  
    v_text VARCHAR2(4000);
  
    PROCEDURE set_title(par_text VARCHAR2) IS
    BEGIN
    
      set_font(par_size => 20, par_style => gc_style_bold, par_color => gc_color_orange);
      plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    END set_title;
  
    PROCEDURE set_cotitle(par_text VARCHAR2) IS
    BEGIN
      set_font(par_size => 18, par_style => gc_style_bold, par_color => gc_color_orange);
      plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    END set_cotitle;
  
    PROCEDURE set_chapter
    (
      par_title VARCHAR2
     ,par_ln    INTEGER DEFAULT 1
    ) IS
      v_width NUMBER;
      v_text  VARCHAR2(500);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
    
      set_font(par_size => 9, par_style => gc_style_bold, par_color => gc_color_orange);
    
      v_text := gv_chapter_num || '. ' || par_title;
    
      IF par_ln != 1
      THEN
        v_width := plpdf.gettextwidth(v_text) + 5;
      ELSE
        v_width := 0;
      END IF;
    
      --plpdf.linebreak;
      plpdf.printcell(p_txt => v_text, p_align => 'L', p_w => v_width, p_h => -1, p_ln => par_ln);
      --plpdf.linebreak;
    END set_chapter;
  
    PROCEDURE print_info_element
    (
      par_element_name  VARCHAR2
     ,par_element_value VARCHAR2
    ) IS
    BEGIN
      set_font(par_size => 8, par_style => gc_style_bold);
      plpdf.printcell(p_w        => trunc(plpdf.getpagewidth * 0.4)
                     ,p_txt      => upper(par_element_name)
                     ,p_h        => gv_default_height
                     ,p_ln       => 0
                     ,p_clipping => 0);
      set_font;
      plpdf.printmultilinecell(p_txt => par_element_value, p_h => gv_default_height, p_clipping => 0);
    END print_info_element;
  
    /*
    FUNCTION get_passport(par_contact_id NUMBER) RETURN VARCHAR2 IS
      v_passport VARCHAR2(2000);
    BEGIN
      BEGIN
        v_passport := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(par_contact_id)
                                                                    ,REPLACE('<#TYPE_DESC>: <#DOC_SERNUM> Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>'
                                                                            ,'Паспорт гражданина РФ'
                                                                            ,'Паспорт'));
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
      RETURN v_passport;
    END get_passport;
    */
  
    PROCEDURE print_insuree_info(par_contact_info t_contact_summary) IS
    BEGIN
    
      print_contact_info(par_contact_info);
    
      set_font(par_style => gc_style_bold);
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_public_contact
                                        WHEN 1 THEN
                                         1
                                        ELSE
                                         2
                                      END);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        ELSE
                                         2
                                      END);
    
    END;
  
    PROCEDURE print_assured_info(par_contact_info t_contact_summary) IS
    BEGIN
      print_contact_info(par_contact_info);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_public_contact
                                        WHEN 1 THEN
                                         1
                                        ELSE
                                         2
                                      END);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        ELSE
                                         2
                                      END);
    END;
  
    PROCEDURE print_programs(par_is_detailed BOOLEAN DEFAULT TRUE) IS
      v_total_fee VARCHAR2(255);
    BEGIN
      delete_row_print_cache;
      set_font(par_style => gc_style_bold);
    
      gv_widths(1) := plpdf.getpagespace * 0.5;
      gv_widths(2) := plpdf.getpagespace * 0.25;
      gv_widths(3) := plpdf.getpagespace * 0.25;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      gv_datas(1) := 'Программа страхования (страховые риски)*';
      gv_datas(2) := 'Гарантированная страховая сумма (рубли)*';
      gv_datas(3) := 'Страховая премия по каждой программе (рубли)';
    
      gv_styles(1) := NULL;
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_aligns(1) := NULL;
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      row_print2(par_h => gv_default_height);
    
      FOR cover_rec IN (SELECT pl.description
                              ,pkg_rep_utils.to_money_sep(pc.ins_amount) AS ins_amount
                              ,pkg_rep_utils.to_money_sep(pc.fee) AS fee
                              ,pkg_rep_utils.to_money_sep(SUM(pc.fee) over()) AS total_fee
                              ,plo.brief
                          FROM as_asset           aa
                              ,p_cover            pc
                              ,t_prod_line_option plo
                              ,t_product_line     pl
                         WHERE aa.p_policy_id = v_policy_id
                           AND aa.as_asset_id = pc.as_asset_id
                           AND pc.t_prod_line_option_id = plo.id
                           AND plo.product_line_id = pl.id
                           AND pc.status_hist_id IN
                               (pkg_cover.get_status_hist_id_new, pkg_cover.get_status_hist_id_curr))
      LOOP
        gv_datas(1) := cover_rec.description;
        gv_datas(2) := cover_rec.ins_amount;
        gv_datas(3) := cover_rec.fee;
      
        IF cover_rec.brief = 'PEPR'
           AND par_is_detailed
        THEN
          gv_datas(1) := gv_datas(1) || ' (п. 3.1.1 Полисных условий):' || gc_new_line ||
                         ' - Смерть Застрахованного по любой причине (п. 3.1.1.1 Полисных условий);' ||
                         gc_new_line ||
                         ' - Дожитие Застрахованного до даты окончания срока действия Договора страхования (п. 3.1.1.2 Полисных условий).';
        END IF;
      
        row_print2(par_h => gv_default_height);
      
        v_total_fee := cover_rec.total_fee;
      END LOOP;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace * 0.75;
      gv_widths(2) := plpdf.getpagespace * 0.25;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
    
      gv_datas(1) := 'ИТОГО СТРАХОВАЯ ПРЕМИЯ (ВЗНОС):';
      gv_datas(2) := v_total_fee;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      row_print2(par_h => gv_default_height);
    
      set_font(par_style => gc_style_italic);
    
      IF NOT par_is_detailed
      THEN
        plpdf.linebreak(p_h => gv_default_height);
      
        plpdf.printmultilinecell(p_txt      => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.'
                                ,p_h        => gv_default_height
                                ,p_clipping => 0
                                ,p_ln       => 1);
        plpdf.linebreak(p_h => gv_default_height);
      END IF;
    
      plpdf.printmultilinecell(p_txt      => '* Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4 Полисных условий.'
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_ln       => 1);
    
      IF par_is_detailed
      THEN
        set_font();
        plpdf.printmultilinecell(p_txt      => '* Максимальные гарантированные страховые суммы по основной программе "Дожитие с возвратом страховых взносов в случае смерти Застрахованного" - 10 000 000 (десять миллионов) рублей.'
                                ,p_h        => gv_default_height
                                ,p_clipping => 0
                                ,p_ln       => 1);
        plpdf.printmultilinecell(p_txt      => 'Гарантированные страховые суммы по дополнительным программам страхования «Смерть НС», «Смерть АВИА/ЖД» не могут превышать гарантированную страховую сумму по основной программе страхования'
                                ,p_h        => gv_default_height
                                ,p_clipping => 0
                                ,p_ln       => 1);
      END IF;
    END print_programs;
  
    PROCEDURE print_periods IS
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_txt      => 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: с ' ||
                                    to_char(v_pol_sum.start_date, 'dd.mm.yyyy "г."') || ' по ' ||
                                    to_char(v_pol_sum.end_date, 'dd.mm.yyyy "г."') || ' ' ||
                                    v_pol_sum.policy_period_desc
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      plpdf.printcell(p_txt      => 'СРОК СТРАХОВАНИЯ ПО ОСНОВНОЙ ПРОГРАММЕ СТРАХОВАНИЯ'
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_txt      => '«ДОЖИТИЕ С ВОЗВРАТОМ СТРАХОВЫХ ВЗНОСОВ В СЛУЧАЕ СМЕРТИ ЗАСТРАХОВАННОГО»:'
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      plpdf.printcell(p_txt      => 'НАЧАЛО: 00:00 1-го дня, следующего за датой оплаты страховой премии (первого страхового взноса)'
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
      plpdf.printcell(p_txt      => 'ОКОНЧАНИЕ: 23:59 даты окончания срока действия договора страхования'
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_txt      => 'СРОК СТРАХОВАНИЯ ПО ДОПОЛНИТЕЛЬНЫМ ПРОГРАММАМ СТРАХОВАНИЯ (СТРАХОВЫМ РИСКАМ):'
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      set_font(par_style => gc_style_regular);
    
      plpdf.printcell(p_txt      => 'НАЧАЛО: 00:00 4 (четвертого) дня, следующего за датой оплаты страховой премии (первого страхового взноса)'
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
      plpdf.printcell(p_txt      => 'ОКОНЧАНИЕ: 23:59 даты окончания первого страхового года'
                     ,p_h        => gv_default_height
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      set_font(par_style => gc_style_bold_italic);
    
      plpdf.printmultilinecell(p_h        => gv_default_height
                              ,p_txt      => 'Если Страхователь за 30 (тридцать) календарных дней до дня окончания срока страхования по указанным дополнительным программам не направит письменное заявление Страховщику о намерении исключить какую-либо из указанных  программ или рисков из договора страхования или внести в них изменения, срок страхования по указанным дополнительным программам (страховым рискам) продлевается до даты наступления очередной страховой годовщины.'
                              ,p_ln       => 1
                              ,p_clipping => 0);
    
    END print_periods;
  
    PROCEDURE print_beneficiaries IS
    BEGIN
      delete_row_print_cache;
    
      set_font;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 2;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6 * 2;
      gv_widths(4) := plpdf.getpagespace / 6;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
      gv_styles(4) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
      gv_borders(4) := '1';
    
      gv_datas(1) := 'Ф.И.О.';
      gv_datas(2) := 'ДАТА РОЖДЕНИЯ';
      gv_datas(3) := 'РОДСТВЕННЫЕ И/ИЛИ ИНЫЕ ОТНОШЕНИЯ С ЗАСТРАХОВАННЫМ';
      gv_datas(4) := 'ДОЛЯ, %';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
    
      row_print2(par_h => gv_default_height);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_styles(4) := NULL;
    
      gv_aligns(1) := 'L';
    
      FOR rec IN (SELECT *
                    FROM (SELECT c.obj_name_orig
                                ,to_char(cp.date_of_birth, 'dd.mm.yyyy') date_of_birth
                                ,crt.relationship_dsc
                                ,to_char(ab.value) AS VALUE
                                ,rownum AS rn
                            FROM as_asset           aa
                                ,as_beneficiary     ab
                                ,contact            c
                                ,cn_contact_rel     cr
                                ,t_contact_rel_type crt
                                ,cn_person          cp
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = ab.as_asset_id
                             AND ab.contact_id = c.contact_id
                             AND ab.cn_contact_rel_id = cr.id
                             AND cr.relationship_type = crt.id
                             AND c.contact_id = cp.contact_id(+)) t
                        ,(SELECT LEVEL AS rn2 FROM dual CONNECT BY LEVEL <= 3)
                   WHERE rn2 = rn(+))
      LOOP
        gv_datas(1) := rec.obj_name_orig;
        gv_datas(2) := rec.date_of_birth;
        gv_datas(3) := rec.relationship_dsc;
        gv_datas(4) := rec.value;
      
        row_print2(par_h => gv_default_height);
      END LOOP;
    
    END print_beneficiaries;
  
    PROCEDURE print_declaration IS
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_txt      => 'Настоящим Страхователь заявляет, что Застрахованный:'
                     ,p_h        => gv_default_height
                     ,p_clipping => 0
                     ,p_ln       => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printmultilinecell(p_txt      => '9.1. НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, нервными расстройствами, психическими заболеваниями; НЕ употребляет  наркотики, токсические вещества, НЕ страдает алкоголизмом, или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита).'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.2. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.3. НЕ страдает/страдал(а) следующими заболеваниями: близорукостью более 7 (семи) диоптрий, хроническая почечная недостаточность, поликистоз почек, неспецифический язвенный колит, болезнь Крона, сахарный диабет, гемофилия, сердечно-сосудистая патология (включая ишемическую болезнь сердца, аритмии (включая мерцательную аритмию), гипертонию (II-IV степени), тромбоэмболии, аневризмы сосудов, перенесенные инфаркты, инсульты, операции на сердце и сосудах и т.п.), цирроз печени, хронический гепатит, злокачественные или доброкачественные опухоли, туберкулез, а также иными хроническими заболеваниями, требующими постоянных консультаций, лечения, обследований или наблюдения.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.4. За последние 5 (пять) лет НЕ находился на больничном листе сроком 3 (три) недели и более (счет по каждому году, не учитывая острую респираторную инфекцию, грипп, травмы, не требующие госпитализации) и/или НЕ был направлен на стационарное лечение, или за последние 12 месяцев НЕ обращался за медицинской помощью, обследованием или консультацией по причине одного и того же заболевания более одного раза.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.5. В настоящий момент НЕ находится под наблюдением врача, на лечении, НЕ принимает лекарства в связи с каким-либо заболеванием (нарушением здоровья) или в отношении него НЕ запланировано лечение/операция и он/она НЕ планирует обратиться к врачу по причине какого-либо заболевания в ближайшее время.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.6. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.) или хобби.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.7. НЕ занимается:  любым видом спорта на профессиональной основе и/или систематическими занятиями любым видом спорта, направленными на достижение спортивных результатов (включая тренировки, подготовку и участие в соревнованиях); опасными видами спорта и/или хобби (например: авиацией, погружением в воду (на глубину свыше 40 метров), парашютным спортом, дельтапланеризмом, авто- мото- гонками, парусным спортом, альпинизмом, спелеологией, экстремальными видами велоспорта, контактными боевыми искусствами, конным спортом); не планирует пребывание в «горячих» точках планеты (территории военных конфликтов или нестабильности), местах с экстремальными условиями (большие высоты, глубины, экстремальные температуры, биологические риски для жизни и т.п.), не пользуется  авиатранспортом более 2 раз в неделю, железнодорожным транспортом (исключая электрички) более 1 раза в неделю.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.8. НЕ подавал заявления на страхование жизни, утраты трудоспособности (инвалидность) и от несчастных случаев, в которых ему/ей было отказано, которые были отложены или приняты на особых условиях (с применением повышающих коэффициентов, исключений или особых условий), а также заключенных договоров страхования, которые были расторгнуты по причине невозможности заключения или существенные условия которых были изменены по  результатам оценки степени риска.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '9.9. НЕ выкуривает более 30 (тридцати) сигарет в день. Разница между ростом (в см.) и весом (в кг.) Застрахованного не менее 80 и не более 120 (например, рост - 180 см, вес - 85 кг, разница составляет - 95, можно ответить ДА; рост 160 см, вес 85 кг, разница - 75 - ответ - НЕТ).'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_txt => 'Да, я могу подписать настоящую Декларацию и заявляю:'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printmultilinecell(p_txt      => '-  что я согласен(-на) с утверждениями, заявленными в настоящей Декларации, т.е. я подтверждаю достоверность сведений содержащейся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '-  что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования;'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '-  что я обязуюсь незамедлительно письменно уведомить Страховщика в случае изменения степени риска при первой представившейся возможности. Я понимаю, что изменение степени риска может повлечь оплату дополнительной страховой премии и/или изменение условий договора страхования. Я также понимаю, что в случае моего отказа проинформировать Страховщика об изменении степени риска и уплатить дополнительную страховую премию и/или изменить условия страхования, договор страхования будет расторгнут Страховщиком в одностороннем порядке и страховые выплаты по нему будут невозможны;'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '-  что Страхователь/Застрахованный/его родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных корпорациях и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '-  что я прочел(-а), понял(-а) и согласен(-а) с «Полисными условиями» к Договору страхования по программе «' ||
                                             v_pol_sum.product_name || '»;'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '-  что на момент заключения данного договора страхования общая страховая сумма (сумма страховых сумм) по любым другим известным мне договорам страхования со Страховщиком в отношении Застрахованного по программе/страховым рискам: «Дожитие с возвратом страховых взносов в случае смерти Застрахованного» / «Смерть в результате несчастного случая» / «Смерть АВИА/ЖД» не превышает 10 000 000 (десять миллионов) рублей.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => '-  что размер годовой страховой премии по данному договору страхования не превышает 20% (двадцать процентов) годового дохода Страхователя, предшествующего заключению договора страхования;'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => 'Подписывая настоящий Договор, Страхователь/Застрахованный в соответствии c ФЗ РФ «О персональных данных» №152-ФЗ от 27.07.2006 выражает Страховщику согласие на обработку, в том числе передачу перестраховочным организациям (в том числе находящимся за рубежом) своих персональных данных, в том числе данных о состоянии здоровья, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путём осуществления прямых контактов с помощью средств связи, в том числе в целях обеспечения исполнения настоящего Договора, а также выражает Страховщику согласие на предоставление Выгодоприобретателю информации по настоящему Договору, об исполнении Страховщиком и/или Страхователем обязательств по настоящему Договору, в том числе информацию об оплате и размере страховой премии, размере страховой суммы, о возникновении и урегулировании претензий, наступлении/вероятности наступления страховых случаев, страховой выплате и другую имеющую отношение к настоящему Договору информацию'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_txt      => 'Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия Договора страхования и в течение 15 лет после окончания срока действия Договора и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.'
                              ,p_h        => gv_default_height
                              ,p_ln       => 1
                              ,p_clipping => 0);
    
    END print_declaration;
  
    PROCEDURE print_additional_conditions IS
    BEGIN
      delete_row_print_cache;
    
      set_font;
    
      gv_widths(1) := 10;
      gv_widths(2) := plpdf.getpagespace - 10;
    
      gv_datas(1) := 1;
      gv_datas(2) := 'Договор страхования заключен на основании Полисных условий к договору страхования жизни по программе «' ||
                     v_pol_sum.product_name ||
                     '», утвержденных Генеральным директором ООО «СК «Ренессанс Жизнь» № 73/ОД/14 от 19.05.2014.';
    
      row_print2(par_h => gv_default_height);
    
      gv_datas(1) := 2;
      gv_datas(2) := 'Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) на договоре страхования, а также в приложениях и дополнительных соглашениях к нему.';
    
      row_print2(par_h => gv_default_height);
    
      gv_datas(1) := 3;
      gv_datas(2) := 'Территория страхования весь мир.';
    
      row_print2(par_h => gv_default_height);
    
      gv_datas(1) := 4;
      gv_datas(2) := 'Время действия страховой защиты: 24 часа.';
    
      row_print2(par_h => gv_default_height);
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace * 0.9 / 3;
      gv_widths(2) := plpdf.getpagespace * (1 - 0.9 / 3);
    
      gv_styles(1) := 'I';
      gv_styles(2) := NULL;
    
      gv_datas(1) := 'К договору страхования прилагаются:';
      gv_datas(2) := '1. Приложение №1: Полисные условия к договору страхования жизни по программе «' ||
                     v_pol_sum.product_name || '»';
    
      row_print2;
    
      gv_datas(1) := NULL;
      gv_datas(2) := '2. Приложение № 2 Таблица гарантированных выкупных сумм по основной программе';
    
      row_print2;
    
    END print_additional_conditions;
  
    PROCEDURE print_signatures(par_is_detailed BOOLEAN DEFAULT TRUE) IS
    BEGIN
    
      IF v_pol_sum.policy_status_breif NOT IN ('B2B_PENDING', 'PROJECT')
      THEN
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - 5 - 45
                      ,p_y    => plpdf.getcurrenty
                      ,p_w    => 45
                      ,p_h    => 50);
      END IF;
    
      IF par_is_detailed
      THEN
        plpdf.printmultilinecell(p_txt      => 'Полисные условия к договору страхования жизни по программе «' ||
                                               v_pol_sum.product_name || '» получил'
                                ,p_w        => plpdf.getpagespace * 0.4
                                ,p_h        => gv_default_height
                                ,p_clipping => 0
                                ,p_ln       => 1);
      END IF;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'СТРАХОВАТЕЛЬ';
      gv_datas(2) := 'СТРАХОВЩИК';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_widths(1) := plpdf.getpagespace / 2;
      gv_widths(2) := plpdf.getpagespace / 2;
    
      row_print2;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Представитель по доверенности ' || v_signer.short_name || chr(13) || '(дов №' ||
                     v_signer.procuratory_num || ')';
    
      row_print2;
    
      gv_datas(1) := '___________ / ' || v_insuree_info.fio;
      gv_datas(2) := NULL;
      row_print2;
    
      gv_datas(1) := 'Подпись             ФИО Страхователя';
      gv_datas(2) := NULL;
    
      row_print2;
    
    END print_signatures;
  
    PROCEDURE print_cash_surr IS
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      set_font(par_style => gc_style_bold, par_size => 10);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 2')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО  ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма на дату досрочного прекращения (расторжения) договора страхования рассчитывается как % от сформированного резерва по договору страхования на дату начала периода, в котором произошло досрочное прекращение (расторжение) договора страхования'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      BEGIN
        SELECT DISTINCT ll.brief
          INTO v_main_program_lob_line_brief
          FROM as_asset            aa
              ,p_cover             pc
              ,t_prod_line_option  plo
              ,t_product_line      pl
              ,t_product_line_type plt
              ,t_lob_line          ll
         WHERE aa.p_policy_id = v_policy_id
           AND aa.as_asset_id = pc.as_asset_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND pl.product_line_type_id = plt.product_line_type_id
           AND pl.t_lob_line_id = ll.t_lob_line_id
           AND plt.brief = 'RECOMMENDED';
      EXCEPTION
        WHEN no_data_found THEN
          raise_application_error(-20001
                                 ,'Не удалось определить основную программу');
        WHEN too_many_rows THEN
          raise_application_error(-20001
                                 ,'Найдено несколько основных программ');
      END;
    
      print_cash_surr_table(par_policy_id      => v_policy_id
                           ,par_lob_line_brief => v_main_program_lob_line_brief);
    END print_cash_surr;
  
    PROCEDURE print_addendum IS
      v_addendum_num p_policy.version_order_num%TYPE;
    BEGIN
      gv_default_font_size := 10;
      gv_default_height    := 5;
      plpdf.newpage;
    
      SELECT nvl(MAX(pp.version_order_num), 0) + 1
        INTO v_addendum_num
        FROM p_policy pp
       WHERE pp.pol_header_id = v_pol_sum.policy_header_id;
    
      set_title('Дополнительное соглашение № ' || to_char(v_addendum_num));
      set_title('к Договору страхования № ' || v_pol_sum.pol_num || ' от ' ||
                to_char(v_pol_sum.start_date, 'DD.MM.YYYY') || ' г.');
    
      set_font;
      plpdf.linebreak(p_h => gv_default_height);
      plpdf.printmultilinecell(p_txt      => pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_city)
                              ,p_w        => plpdf.getpagespace * 0.5
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_border   => 1
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_txt      => to_char(v_pol_sum.policy_start_date, 'DD.MM.YYYY') || 'г.'
                              ,p_h        => gv_default_height
                              ,p_align    => 'R'
                              ,p_clipping => 0
                              ,p_border   => 1
                              ,p_ln       => 1);
    
      plpdf.linebreak(p_h => gv_default_height);
      plpdf.printmultilinecell(p_txt      => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_name) ||
                                             ', именуемое в дальнейшем «Страховщик», в лице ' ||
                                             v_signer.genitive_job_position || ' ' ||
                                             v_signer.genitive_name ||
                                             ', действующего на основании Доверенности №' ||
                                             v_signer.procuratory_num || ', с одной стороны, и ' ||
                                             v_insuree_info.fio || ', Дата рождения: ' ||
                                             to_char(v_insuree_info.date_of_birth, 'DD.MM.YYYY') ||
                                             ' г. ' ||
                                             pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                                           ,REPLACE('<#TYPE_DESC>: <#DOC_SERNUM> Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>'
                                                                                                   ,'Паспорт гражданина РФ'
                                                                                                   ,'Паспорт')) ||
                                             ', именуемый(ая) в дальнейшем «Страхователь», с другой стороны, заключили настоящее Дополнительное Соглашение к Договору страхования № ' ||
                                             v_pol_sum.pol_num || ' от ' ||
                                             to_char(v_pol_sum.start_date, 'DD.MM.YYYY') || ' г.' ||
                                             '(далее - Договор) о нижеследующем:'
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_ln       => 1);
    
      plpdf.linebreak(p_h => gv_default_height);
      set_font;
      gv_chapter_num := 4;
      plpdf.printmultilinecell(p_txt      => '1. Стороны договорились п. ' ||
                                             to_char(gv_chapter_num + 1) ||
                                             ' Договора изложить в следующей редакции:'
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_ln       => 1);
    
      set_chapter('ПРОГРАММЫ СТРАХОВАНИЯ (СТРАХОВЫЕ РИСКИ). СТРАХОВЫЕ СУММЫ. СТРАХОВАЯ ПРЕМИЯ (ВЗНОС)');
    
      print_programs(FALSE);
    
      plpdf.linebreak(p_h => gv_default_height);
      set_font;
      plpdf.printmultilinecell(p_txt      => '2. Во всем остальном, что не предусмотрено настоящим Дополнительным Соглашением Стороны руководствуются положениями Договора.'
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_ln       => 1);
      plpdf.printmultilinecell(p_txt      => '3. Настоящее Дополнительное соглашение вступает в силу с момента подписания его сторонами.'
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_ln       => 1);
      plpdf.printmultilinecell(p_txt      => '4. Настоящее Дополнительное соглашение является составной и неотъемлемой частью Договора страхования №' ||
                                             v_pol_sum.pol_num || ' от ' ||
                                             to_char(v_pol_sum.start_date, 'DD.MM.YYYY') || ' г.'
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_ln       => 1);
      plpdf.printmultilinecell(p_txt      => '5. Настоящее Дополнительное Соглашение подписано в двух экземплярах, имеющих одинаковую силу, по одному экземпляру для каждой Стороны.'
                              ,p_h        => gv_default_height
                              ,p_clipping => 0
                              ,p_ln       => 1);
    
      plpdf.linebreak(p_h => gv_default_height);
      print_signatures(FALSE);
    
    END print_addendum;
  
  BEGIN
    v_policy_id := to_number(repcore.get_context('POL_ID'));
  
    v_pol_sum := get_policy_summary(v_policy_id);
  
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
  
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
  
    v_signer := get_signer('pkg_rep_plpdf.rep_platinum_life');
  
    init(par_default_font_size => 8);
  
    -- Title
    set_title('ДОГОВОР СТРАХОВАНИЯ №' || v_pol_sum.pol_num);
    set_title('ПО ПРОГРАММЕ ' || v_pol_sum.product_name);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('СТРАХОВЩИК'));
    set_font(par_style => gc_style_bold);
    plpdf.printmultilinecell(p_txt      => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_def_info)
                            ,p_h        => gv_default_height
                            ,p_clipping => 0
                            ,p_ln       => 1);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('СТРАХОВАТЕЛЬ'));
    print_insuree_info(par_contact_info => v_insuree_info);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('ЗАСТРАХОВАННОЕ ЛИЦО'));
    print_assured_info(par_contact_info => v_assured_info);
  
    -------------------------------------------------------------------------------------------------
    --ВАЛЮТА
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('ВАЛЮТА'), 0);
    set_font(par_size => 9);
    plpdf.printcell(p_txt => v_pol_sum.fund_name, p_h => -1, p_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('ПРОГРАММЫ СТРАХОВАНИЯ'));
    print_programs;
  
    -------------------------------------------------------------------------------------------------
    --СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. СРОК СТРАХОВАНИЯ.
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. СРОК СТРАХОВАНИЯ'));
    print_periods;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ВЗНОСОВ):
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ВЗНОСОВ): ')
               ,0);
    set_font(par_size => 9);
    plpdf.printcell(p_txt => v_pol_sum.payment_terms, p_h => -1, p_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ
    ------------------------------------------------------------------------------------------------
    set_chapter(upper('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ'));
    print_beneficiaries;
  
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО
    ------------------------------------------------------------------------------------------------
    set_chapter(upper('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО'));
    print_declaration;
  
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО
    ------------------------------------------------------------------------------------------------
    set_chapter(upper('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ'));
    print_additional_conditions;
  
    -------------------------------------------------------------------------------------------------
    --ПОДПИСИ
    ------------------------------------------------------------------------------------------------
    print_signatures;
  
    -------------------------------------------------------------------------------------------------
    --ТАБЛИЦА ВЫКУПНЫХ СУММ
    ------------------------------------------------------------------------------------------------
    print_cash_surr;
  
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНОЕ СОГЛАШЕНИЕ
    ------------------------------------------------------------------------------------------------
    print_addendum;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_platinum_life;

  /*
    Капля П.
    09.06.2014
    Процедура формирования полиса по продуктам "Медицина без границ"
  */
  PROCEDURE rep_best_doctors_full
  (
    par_is_full_dec  IN BOOLEAN
   ,par_is_orig_dec  IN BOOLEAN
   ,par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    c_default_fund          CONSTANT fund.brief%TYPE := 'RUR';
    c_default_payment_terms CONSTANT t_payment_terms.brief%TYPE := 'Единовременно';
    v_is_real_policy   BOOLEAN;
    v_policy_id        p_policy.policy_id%TYPE;
    v_pol_sum          t_policy_summary;
    v_insuree_info     t_contact_summary;
    v_assured_info     t_contact_summary;
    v_number_of_copies INTEGER;
  
    --gv_chapter_num INTEGER;
  
    v_tmp_bso_info cur_tmp_bso%ROWTYPE;
  
    PROCEDURE set_title(par_text VARCHAR2) IS
    BEGIN
      print_default_title(par_text, 12);
    END;
  
    PROCEDURE set_chapter
    (
      par_title VARCHAR2
     ,par_ln    NUMBER DEFAULT 1
    ) IS
    BEGIN
      print_default_chapter(par_title, par_ln);
    END set_chapter;
  
    PROCEDURE print_currency IS
      v_multi_currency BOOLEAN := FALSE;
      v_currency_name  fund.name%TYPE;
    BEGIN
      BEGIN
        SELECT upper(f.name)
          INTO v_currency_name
          FROM t_prod_currency pc
              ,fund            f
         WHERE pc.product_id = v_pol_sum.product_id
           AND pc.currency_id = f.fund_id;
      EXCEPTION
        WHEN too_many_rows THEN
          v_multi_currency := TRUE;
        WHEN no_data_found THEN
          NULL;
      END;
    
      print_default_chapter('ВАЛЮТА: ', 0);
      set_font(par_size => gv_default_font_size + 1);
      plpdf.printcell(p_txt => upper(nvl(v_pol_sum.fund_name, v_currency_name)), p_ln => 1);
    
    END print_currency;
  
    PROCEDURE print_programs IS
      v_total_fee VARCHAR2(500);
      PROCEDURE pl(par_text VARCHAR2) IS
      BEGIN
        plpdf.printmultilinecell(p_txt => par_text, p_h => 3, p_clipping => 0, p_ln => 1);
      END pl;
    BEGIN
      set_font;
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 4;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
    
      gv_datas(1) := 'Программа страхования';
      gv_datas(2) := 'Страховые суммы*';
      gv_datas(3) := 'Страховая премия (взнос)';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2;
    
      gv_aligns(1) := 'L';
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
    
      FOR rec IN (SELECT pl.public_description AS description
                        ,CASE
                           WHEN plo.brief = 'WOP_DD_SURGERY' THEN
                            'величина страховой премии по договору страхования'
                           ELSE
                            pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0))
                         END ins_amount
                        ,pkg_rep_utils.to_money_sep(pc.fee) AS fee
                        ,row_number() over(ORDER BY pl.sort_order) AS rn
                        ,pkg_rep_utils.to_money_sep(SUM(pc.fee) over()) AS total_fee
                        ,plo.brief
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                   ORDER BY pl.sort_order)
      LOOP
      
        gv_datas(1) := rec.description;
      
        IF NOT v_is_real_policy
           AND rec.brief != 'WOP_DD_SURGERY'
        THEN
          IF v_pol_sum.fund_brief = 'RUR'
          THEN
            gv_datas(2) := pkg_rep_utils.to_money_sep(12500000);
          ELSE
            gv_datas(2) := pkg_rep_utils.to_money_sep(250000);
          END IF;
        ELSE
          gv_datas(2) := rec.ins_amount;
        END IF;
      
        IF rec.rn = 1
        THEN
          v_total_fee := rec.total_fee;
          gv_datas(3) := rec.total_fee;
          gv_borders(3) := 'RTL';
        ELSE
          gv_datas(3) := NULL;
          gv_borders(3) := 'RBL';
        END IF;
      
        row_print2(par_h => 3);
      
      END LOOP;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 5;
      gv_widths(2) := plpdf.getpagespace / 6;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_datas(1) := 'Страховая премия (взнос) по договору страхования';
      gv_datas(2) := v_total_fee;
    
      row_print2;
    
      IF v_pol_sum.fund_brief = 'RUR'
      THEN
        pl('* Примечание: Страховая сумма по программе "Обращение Застрахованного лица в Сервисную компанию/к Страховщику с последующей организацией лечения в связи с диагностированием смертельно опасного заболевания и/или назначением проведения хирургического вмешательства" равна 12 500 000 рублей в год, но не более 25 000 000 рублей за весь срок действия договора страхования, включая все очередные сроки страхования или его пролонгации.');
        pl('Настоящим договором устанавливаются следующие лимиты в пределах страховой суммы в течение страхового года:');
        pl(' - При оплате услуг на транспортировку Застрахованного и Сопровождающего его лица - в размере 250 000 рублей');
        pl(' - При оплате услуг на проживание Застрахованного и Сопровождающего его лица -  в размере 250 000 рублей (максимум 10 000 рублей за ночь).');
        pl('Оплата услуг по транспортировке и проживанию при превышении указанных лимитов осуществляется страхователем /застрахованным самостоятельно.');
        pl('Страховая сумма по  программе страхования  «Освобождение от уплаты страховых взносов в результате первичного диагностирования смертельно опасного заболевания и/или назначения проведения хирургического вмешательства» равна величине страховой премии по договору страхования.');
        pl('Поскольку все страховые выплаты осуществляются в Евро, то для целей расчета в рублях общей стоимости оказанной медицинской и иной помощи фиксируется валютный курс в размере 1 евро = 50 рублей. В случае, если оплата стоимости медицинской и иной помощи, оказанной Застрахованному, осуществлена в валюте, отличной от Евро, то она конвертируется в Евро по курсу ЕЦБ на дату оплаты. Максимальный размер общей стоимости оказанной медицинской и иной помощи по настоящему договору составляет 250 000 Евро на срок, указанный в настоящем Договоре, и 500 000 Евро за весь срок действия настоящей программы, включая очередные сроки страхования.');
      ELSE
        pl('* Примечание: Страховая сумма по программе "Обращение Застрахованного лица в Сервисную компанию/к Страховщику с последующей организацией лечения  в связи с диагностированием смертельно опасного заболевания и/или необходимостью хирургического вмешательства" равна 250 000 Евро в год, но не более 500 000 Евро за весь срок действия договора страхования, включая все очередные сроки страхования или его пролонгации.');
        pl('Настоящим договором устанавливаются следующие лимиты в пределах страховой суммы в течение страхового года:');
        pl(' - При оплате услуг на транспортировку Застрахованного и Сопровождающего его лица - в размере 5 000 Евро;');
        pl(' - При оплате услуг на проживание Застрахованного и Сопровождающего его лица - в размере 5 000 Евро  (максимум 200 Евро за ночь).');
        pl('Оплата услуг по транспортировке и проживанию при превышении указанных лимитов осуществляется страхователем / застрахованным самостоятельно.');
        pl('Страховая сумма по  программе страхования  "Освобождение от уплаты страховых взносов в результате первичного диагностирования смертельно опасного заболевания и/или назначения проведения хирургического вмешательства" равна величине страховой премии по договору страхования.');
        pl('Все страховые выплаты осуществляются в Евро. В случае, если оплата стоимости медицинской и иной помощи, оказанной Застрахованному, осуществлена в валюте, отличной от Евро, то она конвертируется в Евро по курсу ЕЦБ на дату оплаты.');
      END IF;
    
    END print_programs;
  
    PROCEDURE print_declaration IS
      c_space CONSTANT VARCHAR2(20) := '        ';
      PROCEDURE pl(par_text VARCHAR2) IS
      BEGIN
        plpdf.printmultilinecell(p_txt => par_text, p_h => 3, p_clipping => 0, p_ln => 1);
      END pl;
    BEGIN
      set_font(par_style => gc_style_bold);
      pl('Заключение договора страхования невозможно в случае, если Страхователь/Застрахованный не может подписать настоящую декларацию.');
    
      set_font;
      pl(c_space || 'Настоящим Страхователь/Застрахованный заявляет, что Застрахованный:');
      pl('в настоящее время или в течение последних 10 лет не проходит/проходил(-а)  стационарное, амбулаторное, восстановительное или превентивное лечение, либо Застрахованному лицу не устанавливался  по результатам обследования диагноз, либо не находится/находился под наблюдением врача-специалиста по поводу любого из нижеследующих заболеваний или состояний: ');
      pl('- рак или злокачественное новообразование любого типа, в т.ч. болезнь Ходжкина;');
      --pl(' - любые виды опухолей или кист головного мозга и других внутричерепных структур, костей черепа,  придаточных пазух или спинного мозга; ');
      pl(' - лейкемия (лейкоз) или любое заболевание крови, требующее лечения  сроком не менее одного месяца (например, анемия, лимфома, миелома, нарушение свертываемости крови, гемофилия или повышенная кровоточивость сосудов и т.д.);');
      pl(' - рак in situ  (неинвазивный рак, без прорастания) или любые предраковые (предопухолевые) заболевания или патологические изменения органов и тканей (дисплазии), имеющие высокую вероятность перерождения в злокачественные новообразования, включая, но не ограничиваясь предраковыми изменениями в области молочных желез/женских половых органов, мочевого пузыря или простаты;');
      pl(' - любые формы заболеваний сердца (например, сердечный приступ, стенокардия, перенесенный инфаркт миокарда, кардиосклероз, кардиомиопатия, нарушения клапанов сердца, стеноз/порок, шумы в сердце или ревматизм; (не включая лечение только в связи с высоким кровяным давлением и/или высоким уровнем холестерина);');
      pl(' - любые формы инсульта; ');
      pl(' - любая форма диабета.');
    
      IF par_is_full_dec
      THEN
        pl(c_space ||
           'Также не находится/находился под наблюдением врача-специалиста по поводу любого из нижеследующих заболеваний или состояний:');
        pl('Психического или нервного расстройств, гепатит В или С, туберкулез, расстройства системы пищеварения (язва желудка, болезнь Крона,  язвенный колит) заболеваний поджелудочной железы и желчного пузыря (панкреатит, желчнокаменная болезнь, холецистит); заболеваний или расстройств почек, мочевого пузыря (гломерулонефрит, пиелонефрит, цистит, почечная недостаточность, камни в почках и мочевом пузыре). ');
        pl('Если в настоящее время Застрахованный проходит обследование по поводу симптомов, которые могут быть проявлением  какого-либо из вышеуказанных  заболеваний или состояний, либо  ожидает результатов диагностики, Застрахованному следует дождаться получения результатов, чтобы корректно ответить на утверждения.');
      ELSE
        pl(c_space ||
           'Если в настоящее время Застрахованный проходит обследование по поводу симптомов, которые могут быть проявлением  какого-либо из вышеуказанных  заболеваний или состояний, либо  ожидает результатов диагностики, Застрахованному следует дождаться получения результатов, чтобы корректно ответить на утверждения.');
      END IF;
    
      set_font(par_style => gc_style_bold);
      pl('Да, я могу подписать настоящую декларацию и заявляю:');
    
      set_font;
    
      pl('что я согласен (-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, могут стать основанием для непризнания Страховщиком наступившего события страховым случаем. Я признаю, что  собственноручная подпись и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) имеют равную юридическую силу.');
      pl(c_space ||
         'Я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.), предоставлять по требованию ООО «СК «Ренессанс Жизнь» и Сервисной компании медицинские документы и/или их заверенные копии (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по заключаемому договору страхования. Я обязуюсь предоставить по требованию Страховщика дополнительную информацию и обеспечить прохождение Застрахованным медицинского обследования.');
      pl(c_space ||
         'Я обязуюсь незамедлительно письменно уведомить Страховщика в случае изменения степени риска, т.е. обо всех значительных изменениях рода деятельности и увлечениях в течение срока действия договора страхования, если эти изменения существенно влияют на степень страхового риска, при первой представившейся возможности. Я также понимаю, что значительность изменений будет определяться Страховщиком и это необходимо для определения страхового риска. Я понимаю, что изменение степени риска может повлечь оплату дополнительной страховой премии и/или изменение условий договора страхования. Я также понимаю, что в случае моего отказа проинформировать Страховщика об изменении степени риска и уплатить дополнительную страховую премию и/или изменить условия страхования, договор страхования будет расторгнут Страховщиком в одностороннем порядке и страховые выплаты по нему будут невозможны.');
    
      IF par_is_orig_dec
      THEN
        pl(c_space ||
           'Подписывая настоящий Договор, Страхователь (Застрахованный) в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» своей волей и в своем интересе предоставляет(ют) Страховщику и Сервисной компании и Агенту по Агентскому договору право на обработку (в том числе сбор, систематизацию, накопление, хранение, уточнение, обновление, изменение, использования, распространение, передачу (в том числе трансграничную), обезличивание, блокирование и уничтожение) указанных в настоящем Договоре персональных данных Страхователя (Застрахованного), в том числе в целях заключения между Страхователем и Страховщиком договора страхования, при этом такое согласие дается Страхователем (Застрахованным)  Страховщику на 70 лет и может быть отозвано Страхователем (Застрахованным) в любой момент времени путем передачи Страховщику подписанного Страхователем (Застрахованным) письменного уведомления.');
      ELSE
        pl(c_space ||
           'Подписывая настоящий Договор,  Страхователь (Застрахованный) в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» своей волей и в своем интересе предоставляет(ют) Страховщику, Банку и Сервисной компании и Агенту по Агентскому договору право на смешанную обработку с использованием и без использования средств автоматизации (в том числе сбор, систематизацию, накопление, хранение, уточнение, обновление, изменение, использования, распространение, передачу (в том числе трансграничную), обезличивание, блокирование и уничтожение) указанных в настоящем Договоре персональных данных Страхователя (Застрахованного), в том числе в целях заключения между Страхователем и Страховщиком договора страхования. При этом выражаю согласие Страховщику и Банку на смешанную обработку с использованием и без использования средств автоматизации также специальных категорий моих персональных данных, включая копии либо подлинники документов с указанием состояния здоровья.');
        pl(c_space ||
           'Данное согласие вступает в силу со дня его подписания и действует в течение 5 (Пяти) лет, но в любом случае не менее срока, необходимого для достижения целей обработки персональных данных, и может быть отозвано путем направления письменного уведомления по адресу Агента и/или Страховщика. В случае отзыва Страхователем (Застрахованным) согласия на обработку персональных данных, Агент и Страховщик вправе не прекращать обработку персональных данных, необходимых для исполнения заключенных договоров, а также в иных случаях предусмотренных законодательством.');
      END IF;
      pl(c_space ||
         'Подписывая настоящий Договор, Страхователь/Застрахованный подтверждает,  что его  родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных корпорациях и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях.');
    
    END print_declaration;
  
    PROCEDURE print_additional_conditions IS
    BEGIN
      set_font;
      plpdf.printmultilinecell(p_txt      => '1. ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН НА ОСНОВАНИИ КОМЛЕКСНЫХ УСЛОВИЙ СТРАХОВАНИЯ ПО ПРОГРАММЕ «МЕДИЦИНА БЕЗ ГРАНИЦ»;'
                              ,p_h        => 3
                              ,p_clipping => 0
                              ,p_ln       => 1);
      plpdf.printmultilinecell(p_txt      => '2. СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ДОГОВОРЕ (ПОЛИСЕ), А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ.'
                              ,p_h        => 3
                              ,p_clipping => 0
                              ,p_ln       => 1);
      plpdf.linebreak;
      plpdf.printmultilinecell(p_txt      => 'К договору страхования прилагаются: Приложение № 1: Комплексные условия страхования по программе страхования «Медицина без границ»'
                              ,p_h        => 3
                              ,p_clipping => 0
                              ,p_ln       => 1);
    END print_additional_conditions;
  
    PROCEDURE print_signes IS
      v_signs pkg_report_signer.typ_signer;
    BEGIN
      v_signs := pkg_report_signer.get_signer_id_by_exe_name('pkg_rep_plpdf.rep_best_doctors_is_full_dec');
    
      plpdf.putimage(p_name => 'image_sign_jpg'
                    ,p_data => v_signs.image_sign_jpg
                    ,p_x    => plpdf.getpagespace - 5 - 45
                    ,p_y    => plpdf.getcurrenty
                    ,p_w    => 45
                    ,p_h    => 50);
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace / 3;
      gv_widths(3) := plpdf.getpagespace / 3;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_datas(1) := 'Страхователь';
      gv_datas(2) := 'Застрахованный';
      gv_datas(3) := 'Страховщик';
    
      gv_borders(1) := 'LTR';
      gv_borders(2) := 'LTR';
      gv_borders(3) := 'LTR';
    
      row_print2;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
    
      gv_datas(1) := 'Подписывая настоящий Договор страхования, Страхователь подтверждает достоверность утверждений в вышеуказанной декларации, комплексные условия страхования по программе страхования «Медицина без границ» получил и  ознакомился.';
      gv_datas(2) := 'Подписывая настоящий Договор страхования, Застрахованный подтверждает достоверность утверждений в вышеуказанной декларации, с комплексными условиями страхования по программе страхования «Медицина без границ» ознакомился.';
      gv_datas(3) := 'Представитель по доверенности ' || v_signs.short_name || ' (дов №' ||
                     v_signs.procuratory_num || ')';
    
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      row_print2(par_clipping => 0, par_h => 3);
    
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      row_print2;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_datas(1) := '___________/' || nvl(v_insuree_info.fio, '__________________');
      gv_datas(2) := '___________/' || nvl(v_assured_info.fio, '__________________');
      gv_datas(3) := NULL;
    
      row_print2;
    
      gv_datas(1) := 'Подпись      ФИО Страхователя';
      gv_datas(2) := 'Подпись      ФИО Застрахованного';
      gv_datas(3) := NULL;
    
      gv_borders(1) := 'LBR';
      gv_borders(2) := 'LBR';
      gv_borders(3) := 'LBR';
    
      row_print2;
    
    END print_signes;
  
    PROCEDURE print_custom_chapter(par_title VARCHAR2) IS
      v_width NUMBER;
      v_text  VARCHAR2(500);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
    
      set_font(par_size  => gv_default_font_size + 1
              ,par_style => gc_style_bold
              ,par_color => gc_color_orange);
    
      v_text := gv_chapter_num || '. ' || par_title;
    
      v_width := plpdf.gettextwidth(v_text) + 5;
    
      plpdf.printcell(p_txt => v_text, p_align => 'L', p_w => v_width, p_h => -1, p_ln => 0);
      set_font;
    END print_custom_chapter;
  
  BEGIN
    BEGIN
      v_is_real_policy := nvl(repcore.get_context('PRINT_EMPTY'), 0) = 0;
    EXCEPTION
      -- В случае,если context не задан, выдается -20000 ошибка.
      -- Клево было бы выдавать ex.no_data_found
      WHEN OTHERS THEN
        v_is_real_policy := TRUE;
    END;
  
    IF v_is_real_policy
    THEN
      v_policy_id    := to_number(repcore.get_context('POL_ID'));
      v_pol_sum      := get_policy_summary(v_policy_id);
      v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    
      BEGIN
        SELECT aas.assured_contact_id
          INTO v_assured_info.contact_id
          FROM as_asset   aa
              ,as_assured aas
         WHERE aa.p_policy_id = v_policy_id
           AND aa.as_asset_id = aas.as_assured_id;
      
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      IF v_assured_info.contact_id IS NOT NULL
      THEN
        v_assured_info := get_contact_summary(v_assured_info.contact_id);
      END IF;
    
    ELSE
      v_insuree_info.is_rpdl           := NULL;
      v_insuree_info.is_public_contact := NULL;
    
      v_assured_info.is_rpdl           := NULL;
      v_assured_info.is_public_contact := NULL;
    
      BEGIN
        v_pol_sum.payment_terms_brief := nvl(repcore.get_context('PAYMENT_TERMS')
                                            ,c_default_payment_terms);
      
      EXCEPTION
        -- В случае,если context не задан, выдается -20000 ошибка.
        -- Клево было бы выдавать ex.no_data_found
        WHEN OTHERS THEN
          v_pol_sum.payment_terms_brief := c_default_payment_terms;
      END;
    
      v_pol_sum.payment_terms := dml_t_payment_terms.get_rec_by_brief(v_pol_sum.payment_terms_brief)
                                 .description;
    
      BEGIN
        v_pol_sum.fund_brief := nvl(repcore.get_context('FUND'), c_default_fund);
      
      EXCEPTION
        -- В случае,если context не задан, выдается -20000 ошибка.
        -- Клево было бы выдавать ex.no_data_found
        WHEN OTHERS THEN
          v_pol_sum.fund_brief := c_default_fund;
      END;
    
      v_pol_sum.fund_name := dml_fund.get_rec_by_brief(v_pol_sum.fund_brief).name;
    
      BEGIN
        v_number_of_copies := repcore.get_context('NUMBER_OF_COPIES');
      EXCEPTION
        WHEN OTHERS THEN
          v_number_of_copies := 1;
      END;
    
      v_pol_sum.product_id    := dml_t_product.get_id_by_brief(repcore.get_context('BRIEF'));
      v_pol_sum.product_brief := dml_t_product.get_rec_by_brief(repcore.get_context('BRIEF')).brief;
    
    END IF;
  
    gv_current_copy := 0;
  
    -- Инициализация
    init(par_default_font_size => 8, par_top_margin => 15, par_bottom_margin => 0);
  
    plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
    plpdf.setfooterprocname(p_proc_name => 'ins.pkg_rep_plpdf.footer_best_doctors', p_height => 27);
  
    OPEN cur_tmp_bso(par_number_of_copies => v_number_of_copies);
    LOOP
      FETCH cur_tmp_bso
        INTO v_tmp_bso_info;
      EXIT WHEN cur_tmp_bso%NOTFOUND AND NOT v_is_real_policy;
    
      /* Номер текущей копии печатной формы для правильной номерации страниц */
      gv_current_copy := gv_current_copy + 1;
    
      gv_chapter_num := 0;
    
      IF NOT v_is_real_policy
         AND cur_tmp_bso%ROWCOUNT /*v_tmp_bso_info.rn*/
         > 1
      THEN
        plpdf.newpage;
      END IF;
    
      IF v_is_real_policy
      THEN
        set_title('ДОГОВОР СТРАХОВАНИЯ "МЕДИЦИНА БЕЗ ГРАНИЦ" №' || v_pol_sum.ids);
      ELSE
        set_title('ДОГОВОР СТРАХОВАНИЯ "МЕДИЦИНА БЕЗ ГРАНИЦ" №' || v_tmp_bso_info.ids);
      END IF;
    
      -------------------------------------------------------------------------------------------------
      -- СТРАХОВЩИК
      -------------------------------------------------------------------------------------------------
      set_chapter(upper('СТРАХОВЩИК'));
      set_font(par_style => gc_style_bold);
      IF v_pol_sum.agent_num = '57397'
      THEN
        plpdf.printmultilinecell(p_txt => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_nameaddr || ', ' ||
                                                                                             pkg_contact_rep_utils.gc_company_def_phones || ', ' ||
                                                                                             pkg_contact_rep_utils.gc_company_website || ', ' ||
                                                                                             pkg_contact_rep_utils.gc_company_inn || ', ' ||
                                                                                             pkg_contact_rep_utils.gc_company_kpp ||
                                                                                             ', Р/С 40701810400070015952 в Филиале ОАО «МДМ Банк» в г. Москва, К/С 30101810900000000495 в ОПЕРУ МОСКОВСКОГО ГТУ БАНКА РОССИИ,  ОКПО 62728901 БИК 044525495')
                                ,p_h   => -1
                                ,p_ln  => 1);
      ELSE
        plpdf.printmultilinecell(p_txt => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_def_info)
                                ,p_h   => -1
                                ,p_ln  => 1);
      END IF;
    
      -------------------------------------------------------------------------------------------------
      -- СТРАХОВАТЕЛЬ
      -------------------------------------------------------------------------------------------------
      print_insuree_info(par_contact_info          => v_insuree_info
                        ,par_print_blanks_for_null => TRUE
                        ,par_version_num           => gc_contact_info_ver1);
    
      -------------------------------------------------------------------------------------------------
      -- ЗАСТРАХОВАННЫЕ  - СУПРУГИ, РОДИТЕЛИ (УСЫНОВИТЕЛИ) ДЕТЕЙ, ЗАСТРАХОВАННЫХ ПО НАСТОЯЩЕМУ ДОГОВОРУ:
      -------------------------------------------------------------------------------------------------
      print_assured_info(par_contact_info          => v_assured_info
                        ,par_print_blanks_for_null => TRUE
                        ,par_version_num           => gc_contact_info_ver1);
    
      -------------------------------------------------------------------------------------------------
      -- ВАЛЮТА
      -------------------------------------------------------------------------------------------------
      print_currency;
    
      -------------------------------------------------------------------------------------------------
      -- ТЕРРИТОРИЯ
      -------------------------------------------------------------------------------------------------
      print_default_chapter('ТЕРРИТОРИЯ ОКАЗАНИЯ МЕДИЦИНСКИХ УСЛУГ: ');
      set_font(par_size => gv_default_font_size + 1);
      plpdf.printmultilinecell(p_txt => 'СТРАНА, РЕКОМЕНДОВАННАЯ СЕРВИСНОЙ КОМПАНИЕЙ/СТРАХОВЩИКОМ, ЗА ИСКЛЮЧЕНИЕМ ТЕРРИТОРИИ РОССИЙСКОЙ ФЕДЕРАЦИИ И СОЕДИНЕННЫХ ШТАТОВ АМЕРИКИ'
                              ,p_ln  => 1);
    
      -------------------------------------------------------------------------------------------------
      -- СРОК СТРАХОВАНИЯ
      -------------------------------------------------------------------------------------------------
      print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ', 0);
      set_font(par_size => gv_default_font_size + 1);
      plpdf.printcell(p_txt => upper(nvl(v_pol_sum.policy_period_desc, '1 Год') || ', C ' ||
                                     nvl(to_char(v_pol_sum.start_date, 'dd.mm.yyyy "г."')
                                        ,'____.____________.20____ г.') || ' ПО ' ||
                                     nvl(to_char(v_pol_sum.end_date, 'dd.mm.yyyy "г."')
                                        ,'____.____________.20____ г.'))
                     ,p_ln  => 1);
    
      -------------------------------------------------------------------------------------------------
      -- ПРОГРАММА СТРАХОВАНИЯ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ
      -------------------------------------------------------------------------------------------------
      set_chapter(upper('ПРОГРАММА СТРАХОВАНИЯ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ'));
      print_programs;
    
      -------------------------------------------------------------------------------------------------
      -- ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ
      -------------------------------------------------------------------------------------------------
      print_custom_chapter('ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ: ');
      set_font(par_size => gv_default_font_size + 1);
      plpdf.printcell(p_txt => upper(v_pol_sum.payment_terms), p_ln => 1);
    
      -------------------------------------------------------------------------------------------------
      -- ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО
      -------------------------------------------------------------------------------------------------
      set_chapter(upper('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО'));
      print_declaration;
    
      -------------------------------------------------------------------------------------------------
      -- ПРИ НАСТУПЛЕНИИ СТРАХОВОГО СЛУЧАЯ ЗВОНИТЬ ПО ТЕЛЕФОНУ: 8-800-100-2981
      -------------------------------------------------------------------------------------------------
      set_chapter(upper('ПРИ НАСТУПЛЕНИИ СТРАХОВОГО СЛУЧАЯ ЗВОНИТЬ ПО ТЕЛЕФОНУ: 8-800-100-2981'));
    
      -------------------------------------------------------------------------------------------------
      -- ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
      -------------------------------------------------------------------------------------------------
      set_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
      print_additional_conditions;
    
      -------------------------------------------------------------------------------------------------
      -- ПОДПИСИ
      -------------------------------------------------------------------------------------------------
      print_signes;
    
      EXIT WHEN v_is_real_policy;
    
    END LOOP;
  
    CLOSE cur_tmp_bso;
  
    plpdf.senddoc(p_blob => par_data);
    par_content_type := gc_pdf_content_type;
  
    IF v_is_real_policy
    THEN
      par_file_name := 'policy_' || v_pol_sum.pol_num || '.pdf';
    ELSE
      par_file_name := 'BSO_POOL.pdf';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      IF cur_tmp_bso%ISOPEN
      THEN
        CLOSE cur_tmp_bso;
      END IF;
      RAISE;
  END rep_best_doctors_full;

  PROCEDURE footer_best_doctors IS
    v_is_real_policy BOOLEAN;
    v_current_page   INTEGER;
    v_text           VARCHAR2(255);
  BEGIN
  
    BEGIN
      v_is_real_policy := nvl(repcore.get_context('PRINT_EMPTY'), 0) = 0;
    EXCEPTION
      -- В случае,если context не задан, выдается -20000 ошибка.
      -- Клево было бы выдавать ex.no_data_found
      WHEN OTHERS THEN
        v_is_real_policy := TRUE;
    END;
  
    set_font;
  
    v_current_page := plpdf.currentpagenumber;
  
    IF v_is_real_policy
    THEN
      v_text := 'Страница  ' || to_char(v_current_page) || ' из {nb}';
    ELSE
      v_text := 'Страница  ' || to_char(MOD(v_current_page - 1, 2) + 1) || ' из 2';
    END IF;
  
    plpdf.printcell(p_txt        => v_text
                   ,p_border     => 0
                   ,p_align      => 'C'
                   ,p_ln         => 0
                   ,p_h          => -1
                   ,p_vert_align => 'B');
  
  END footer_best_doctors;

  /*
    Пиядин А.
    323482 Более 1 ошибки(ТЗ по кредитным договорам)
    Строки файла загрузки с состоянием и диагностикой
  */
  PROCEDURE rep_universal_loader_log
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT BLOB
  ) IS
  
    v_load_file_id      load_file.load_file_id%TYPE;
    v_number_of_cols    NUMBER;
    v_val_list          VARCHAR2(4000);
    v_max_log_order_num NUMBER;
    v_query             VARCHAR2(4000);
    l_blob              BLOB;
  
    CURSOR cur_alphabet
    (
      par_start_chr CHAR
     ,par_end_chr   CHAR
    ) IS
      SELECT chr(LEVEL) sgn
        FROM dual
       WHERE LEVEL >= ascii(par_start_chr)
      CONNECT BY LEVEL <= ascii(par_end_chr);
  
    FUNCTION get_number_of_cols(par_load_file_id load_file.load_file_id%TYPE) RETURN NUMBER IS
      v_result NUMBER;
    BEGIN
      SELECT COUNT(*)
        INTO v_result
        FROM load_file         lf
            ,load_csv_settings lcs
       WHERE 1 = 1
         AND lf.load_csv_list_id = lcs.load_csv_list_id
         AND lf.load_file_id = par_load_file_id;
    
      RETURN v_result;
    END get_number_of_cols;
  
    FUNCTION get_val_list_by_num(par_number NUMBER) RETURN VARCHAR2 IS
      v_result VARCHAR2(4000);
    BEGIN
      SELECT str
        INTO v_result
        FROM (SELECT ltrim(sys_connect_by_path('val_' || rn, ','), ',') str
                    ,connect_by_isleaf islf
                FROM (SELECT LEVEL rn FROM dual CONNECT BY LEVEL <= par_number)
               START WITH rn = 1
              CONNECT BY PRIOR rn = rn - 1)
       WHERE islf = 1;
    
      RETURN v_result;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN NULL;
    END get_val_list_by_num;
  
    FUNCTION column_numeric2alpha(p_col PLS_INTEGER) RETURN VARCHAR2 IS
    BEGIN
      RETURN CASE WHEN p_col > 702 THEN chr(64 + trunc((p_col - 27) / 676)) || chr(65 + MOD(trunc((p_col - 1) / 26) - 1
                                                                                           ,26)) || chr(65 +
                                                                                                        MOD(p_col - 1
                                                                                                           ,26)) WHEN p_col > 26 THEN chr(64 +
                                                                                                                                          trunc((p_col - 1) / 26)) || chr(65 +
                                                                                                                                                                          MOD(p_col - 1
                                                                                                                                                                             ,26)) ELSE chr(64 +
                                                                                                                                                                                            p_col) END;
    END column_numeric2alpha;
  
    PROCEDURE query_to_sheet(query CLOB) IS
      c                NUMBER;
      v_col_desc       dbms_sql.desc_tab;
      v_col_count      NUMBER;
      v_col_string     VARCHAR2(4000);
      v_col_number     NUMBER;
      v_col_date       DATE;
      i                NUMBER;
      v_col_alpha_desc VARCHAR2(10);
    BEGIN
      c := dbms_sql.open_cursor;
      dbms_sql.parse(c, query, dbms_sql.native);
      dbms_sql.describe_columns(c, v_col_count, v_col_desc);
    
      FOR i IN 1 .. v_col_count
      LOOP
        IF v_col_desc(i).col_type IN (2, 100, 101)
        THEN
          dbms_sql.define_column(c, i, v_col_number);
        ELSIF v_col_desc(i).col_type IN (12, 178, 179, 180, 181, 231)
        THEN
          dbms_sql.define_column(c, i, v_col_date);
        ELSE
          dbms_sql.define_column(c, i, v_col_string, 4000);
        END IF;
      END LOOP;
      i := dbms_sql.execute(c);
    
      WHILE dbms_sql.fetch_rows(c) > 0
      LOOP
        ora_excel.add_row;
      
        FOR i IN 1 .. v_col_count
        LOOP
          v_col_alpha_desc := column_numeric2alpha(i);
          IF (v_col_desc(i).col_type = 1)
          THEN
            dbms_sql.column_value(c, i, v_col_string);
            ora_excel.set_cell_value(v_col_alpha_desc, v_col_string);
          ELSIF (v_col_desc(i).col_type = 2)
          THEN
            dbms_sql.column_value(c, i, v_col_number);
            ora_excel.set_cell_value(v_col_alpha_desc, v_col_number);
          ELSIF (v_col_desc(i).col_type = 12)
          THEN
            dbms_sql.column_value(c, i, v_col_date);
            ora_excel.set_cell_value(v_col_alpha_desc, v_col_date);
          END IF;
        
          ora_excel.set_cell_align_left(v_col_alpha_desc);
          ora_excel.set_cell_vert_align_middle(v_col_alpha_desc);
          ora_excel.set_cell_wrap_text(v_col_alpha_desc);
          ora_excel.set_cell_border(v_col_alpha_desc);
        END LOOP;
      END LOOP;
    
      dbms_sql.close_cursor(c);
    
    EXCEPTION
      WHEN OTHERS THEN
        dbms_sql.close_cursor(c);
        raise_application_error(-20100, SQLCODE || ' ' || SQLERRM);
    END query_to_sheet;
  
  BEGIN
    v_load_file_id      := to_number(repcore.get_context('P_LOAD_FILE_ID'));
    v_number_of_cols    := get_number_of_cols(v_load_file_id);
    v_val_list          := get_val_list_by_num(v_number_of_cols);
    v_max_log_order_num := pkg_load_logging.get_max_log_order_num(v_load_file_id);
    v_query := 'SELECT pkg_load_file_to_table.get_status_desc(fr.row_status) row_stat
                      ,pkg_load_logging.get_log_row_status_desc(lfr.load_file_row_log_id) err_desc
                      ,pkg_load_logging.get_log_load_stage(lfr.load_file_row_log_id) load_stage
                      ,pkg_load_logging.get_check_type_name_by_id(lfr.t_load_check_type_id) check_type
                      ,pkg_load_logging.get_log_msg(lfr.load_file_row_log_id) log_msg' || CASE
                 WHEN v_val_list IS NOT NULL THEN
                  ', ' || v_val_list
                 ELSE
                  ''
               END || ' FROM load_file_rows    fr
                    ,load_file_row_log lfr
                WHERE 1 = 1
                  AND fr.load_file_rows_id = lfr.load_file_rows_id(+)
                  AND fr.load_file_id = ' || v_load_file_id || CASE
                 WHEN v_max_log_order_num > 0 THEN
                  ' AND lfr.load_order_num = ' || to_char(v_max_log_order_num)
                 ELSE
                  ''
               END;
  
    ------------------------------------------------------------------------------
    -- Создание документа
    ------------------------------------------------------------------------------
    ora_excel.new_document;
    ora_excel.add_sheet('Журнал диагностики');
  
    ------------------------------------------------------------------------------
    -- Создание шапки
    ------------------------------------------------------------------------------
    ora_excel.add_row;
  
    -- Column Width, Cell align center, wrap text, font, border, Cell Text
    FOR cur_cols IN (SELECT -4 num
                           ,'Статус' column_name
                       FROM dual
                     UNION ALL
                     SELECT -3 num
                           ,'Тип ошибки' column_name
                       FROM dual
                     UNION ALL
                     SELECT -2 num
                           ,'Стадия загрузки' column_name
                       FROM dual
                     UNION ALL
                     SELECT -1 num
                           ,'Тип проверки' column_name
                       FROM dual
                     UNION ALL
                     SELECT 0 num
                           ,'Текст ошибки' column_name
                       FROM dual
                     UNION ALL
                     SELECT lcs.num
                           ,lcs.column_name
                       FROM load_file         lf
                           ,load_csv_settings lcs
                      WHERE 1 = 1
                        AND lf.load_csv_list_id = lcs.load_csv_list_id
                        AND lf.load_file_id = v_load_file_id
                      ORDER BY num)
    LOOP
      ora_excel.set_column_width(column_numeric2alpha(cur_cols.num + 5), 40);
      ora_excel.set_cell_align_center(column_numeric2alpha(cur_cols.num + 5));
      ora_excel.set_cell_vert_align_middle(column_numeric2alpha(cur_cols.num + 5));
      ora_excel.set_cell_wrap_text(column_numeric2alpha(cur_cols.num + 5));
      ora_excel.set_cell_border(column_numeric2alpha(cur_cols.num + 5));
      ora_excel.set_cell_bg_color(column_numeric2alpha(cur_cols.num + 5), 'C6EFCE');
      ora_excel.set_cell_value(column_numeric2alpha(cur_cols.num + 5), cur_cols.column_name);
    END LOOP;
  
    ------------------------------------------------------------------------------
    -- Создание тела
    ------------------------------------------------------------------------------
    query_to_sheet(v_query);
  
    ------------------------------------------------------------------------------
    -- Вывод документа
    ------------------------------------------------------------------------------
    ora_excel.save_to_blob(l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'Строки файла загрузки с состоянием и диагностикой.xlsx';
    par_content_type := 'application/excel';
  
  END rep_universal_loader_log;

  /*
    Пиядин А.
    323482 Более 1 ошибки(ТЗ по кредитным договорам)
    Строки файла загрузки с состоянием и диагностикой
  */
  PROCEDURE rep_universal_loader_log_short
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT BLOB
   ,par_status       IN VARCHAR2 DEFAULT NULL
  ) IS
  
    v_load_file_id      load_file.load_file_id%TYPE;
    v_number_of_cols    NUMBER;
    v_val_list          VARCHAR2(4000);
    v_max_log_order_num NUMBER;
    v_max_logs_by_row   NUMBER;
    l_blob              BLOB;
  
    CURSOR cur_alphabet
    (
      par_start_chr CHAR
     ,par_end_chr   CHAR
    ) IS
      SELECT chr(LEVEL) sgn
        FROM dual
       WHERE LEVEL >= ascii(par_start_chr)
      CONNECT BY LEVEL <= ascii(par_end_chr);
  
    FUNCTION get_number_of_cols(par_load_file_id load_file.load_file_id%TYPE) RETURN NUMBER IS
      v_result NUMBER;
    BEGIN
      SELECT COUNT(*)
        INTO v_result
        FROM load_file         lf
            ,load_csv_settings lcs
       WHERE 1 = 1
         AND lf.load_csv_list_id = lcs.load_csv_list_id
         AND lf.load_file_id = par_load_file_id;
    
      RETURN v_result;
    END get_number_of_cols;
  
    FUNCTION get_val_list_by_num(par_number NUMBER) RETURN VARCHAR2 IS
      v_result VARCHAR2(4000);
    BEGIN
      SELECT str
        INTO v_result
        FROM (SELECT ltrim(sys_connect_by_path('val_' || rn, ','), ',') str
                    ,connect_by_isleaf islf
                FROM (SELECT LEVEL rn FROM dual CONNECT BY LEVEL <= par_number)
               START WITH rn = 1
              CONNECT BY PRIOR rn = rn - 1)
       WHERE islf = 1;
    
      RETURN v_result;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN NULL;
    END get_val_list_by_num;
  
    FUNCTION get_query(par_load_file_rows_id load_file_rows.load_file_rows_id%TYPE) RETURN VARCHAR2 IS
      v_result VARCHAR2(4000);
    
      FUNCTION get_log_list_by_row
      (
        par_load_file_rows_id load_file_rows.load_file_rows_id%TYPE
       ,par_load_order_num    load_file_row_log.load_order_num%TYPE
      ) RETURN VARCHAR2 IS
        v_result VARCHAR2(4000);
      BEGIN
        SELECT wm_concat('pkg_load_logging.get_log_msg(' || load_file_row_log_id || ') log')
          INTO v_result
          FROM load_file_row_log
         WHERE load_file_rows_id = par_load_file_rows_id
           AND load_order_num = CASE par_load_order_num
                 WHEN 0 THEN
                  load_order_num
                 ELSE
                  par_load_order_num
               END;
      
        IF v_result IS NOT NULL
        THEN
          v_result := ',' || v_result;
        END IF;
      
        RETURN v_result;
      END get_log_list_by_row;
    
    BEGIN
      v_result := 'SELECT pkg_load_file_to_table.get_status_desc(row_status) row_stat' || CASE
                    WHEN v_val_list IS NOT NULL THEN
                     ', ' || v_val_list
                    ELSE
                     ''
                  END || get_log_list_by_row(par_load_file_rows_id, v_max_log_order_num) ||
                  ' FROM load_file_rows
                  WHERE load_file_rows_id = ' || par_load_file_rows_id;
      RETURN v_result;
    END get_query;
  
    FUNCTION get_max_logs_by_row
    (
      par_load_file_id   load_file.load_file_id%TYPE
     ,par_load_order_num load_file_row_log.load_order_num%TYPE
    ) RETURN NUMBER IS
      v_result NUMBER;
    BEGIN
      SELECT nvl(MAX(cnt), 0)
        INTO v_result
        FROM (SELECT fr.load_file_rows_id
                    ,COUNT(*) cnt
                FROM load_file_row_log frl
                    ,load_file_rows    fr
               WHERE 1 = 1
                 AND frl.load_file_rows_id = fr.load_file_rows_id
                 AND fr.load_file_id = par_load_file_id
                 AND frl.load_order_num = CASE par_load_order_num
                       WHEN 0 THEN
                        load_order_num
                       ELSE
                        par_load_order_num
                     END
               GROUP BY fr.load_file_rows_id);
    
      RETURN v_result;
    END get_max_logs_by_row;
  
    FUNCTION column_numeric2alpha(p_col PLS_INTEGER) RETURN VARCHAR2 IS
    BEGIN
      RETURN CASE WHEN p_col > 702 THEN chr(64 + trunc((p_col - 27) / 676)) || chr(65 + MOD(trunc((p_col - 1) / 26) - 1
                                                                                           ,26)) || chr(65 +
                                                                                                        MOD(p_col - 1
                                                                                                           ,26)) WHEN p_col > 26 THEN chr(64 +
                                                                                                                                          trunc((p_col - 1) / 26)) || chr(65 +
                                                                                                                                                                          MOD(p_col - 1
                                                                                                                                                                             ,26)) ELSE chr(64 +
                                                                                                                                                                                            p_col) END;
    END column_numeric2alpha;
  
    PROCEDURE query_to_sheet
    (
      query         CLOB
     ,par_col_count NUMBER DEFAULT NULL
    ) IS
      c                NUMBER;
      v_col_desc       dbms_sql.desc_tab;
      v_col_count      NUMBER;
      v_col_string     VARCHAR2(4000);
      v_col_number     NUMBER;
      v_col_date       DATE;
      i                NUMBER;
      v_col_alpha_desc VARCHAR2(10);
    BEGIN
      c := dbms_sql.open_cursor;
      dbms_sql.parse(c, query, dbms_sql.native);
      dbms_sql.describe_columns(c, v_col_count, v_col_desc);
    
      FOR i IN 1 .. v_col_count
      LOOP
        IF v_col_desc(i).col_type IN (2, 100, 101)
        THEN
          dbms_sql.define_column(c, i, v_col_number);
        ELSIF v_col_desc(i).col_type IN (12, 178, 179, 180, 181, 231)
        THEN
          dbms_sql.define_column(c, i, v_col_date);
        ELSE
          dbms_sql.define_column(c, i, v_col_string, 4000);
        END IF;
      END LOOP;
      i := dbms_sql.execute(c);
    
      WHILE dbms_sql.fetch_rows(c) > 0
      LOOP
        ora_excel.add_row;
      
        FOR i IN 1 .. v_col_count
        LOOP
          v_col_alpha_desc := column_numeric2alpha(i);
          IF (v_col_desc(i).col_type = 1)
          THEN
            dbms_sql.column_value(c, i, v_col_string);
            ora_excel.set_cell_value(v_col_alpha_desc, v_col_string);
          ELSIF (v_col_desc(i).col_type = 2)
          THEN
            dbms_sql.column_value(c, i, v_col_number);
            ora_excel.set_cell_value(v_col_alpha_desc, v_col_number);
          ELSIF (v_col_desc(i).col_type = 12)
          THEN
            dbms_sql.column_value(c, i, v_col_date);
            ora_excel.set_cell_value(v_col_alpha_desc, v_col_date);
          END IF;
        
          ora_excel.set_cell_align_left(v_col_alpha_desc);
          ora_excel.set_cell_vert_align_middle(v_col_alpha_desc);
          ora_excel.set_cell_wrap_text(v_col_alpha_desc);
          ora_excel.set_cell_border(v_col_alpha_desc);
        END LOOP;
      
        IF par_col_count <> v_col_count
        THEN
          FOR i IN v_col_count + 1 .. par_col_count
          LOOP
            v_col_alpha_desc := column_numeric2alpha(i);
            ora_excel.set_cell_border(v_col_alpha_desc);
          END LOOP;
        END IF;
      END LOOP;
    
      dbms_sql.close_cursor(c);
    
    EXCEPTION
      WHEN OTHERS THEN
        dbms_sql.close_cursor(c);
        raise_application_error(-20100, SQLCODE || ' ' || SQLERRM);
    END query_to_sheet;
  
  BEGIN
    v_load_file_id      := to_number(repcore.get_context('P_LOAD_FILE_ID'));
    v_number_of_cols    := get_number_of_cols(v_load_file_id);
    v_val_list          := get_val_list_by_num(v_number_of_cols);
    v_max_log_order_num := pkg_load_logging.get_max_log_order_num(v_load_file_id);
    v_max_logs_by_row   := get_max_logs_by_row(v_load_file_id, v_max_log_order_num);
  
    ------------------------------------------------------------------------------
    -- Создание документа
    ------------------------------------------------------------------------------
    ora_excel.new_document;
    ora_excel.add_sheet('Журнал диагностики');
  
    ------------------------------------------------------------------------------
    -- Создание шапки
    ------------------------------------------------------------------------------
    ora_excel.add_row;
  
    -- Column Width, Cell align center, wrap text, font, border, Cell Text
    FOR cur_cols IN (SELECT 0 num
                           ,'Статус' column_name
                       FROM dual
                     UNION ALL
                     SELECT lcs.num
                           ,lcs.column_name
                       FROM load_file         lf
                           ,load_csv_settings lcs
                      WHERE 1 = 1
                        AND lf.load_csv_list_id = lcs.load_csv_list_id
                        AND lf.load_file_id = v_load_file_id
                     UNION ALL
                     SELECT LEVEL num
                           ,'Ошибка_' || to_char(LEVEL - v_number_of_cols) column_name
                       FROM dual
                      WHERE LEVEL > v_number_of_cols
                     CONNECT BY LEVEL <= v_number_of_cols + v_max_logs_by_row
                      ORDER BY num)
    LOOP
      ora_excel.set_column_width(column_numeric2alpha(cur_cols.num + 1), 40);
      ora_excel.set_cell_align_center(column_numeric2alpha(cur_cols.num + 1));
      ora_excel.set_cell_vert_align_middle(column_numeric2alpha(cur_cols.num + 1));
      ora_excel.set_cell_wrap_text(column_numeric2alpha(cur_cols.num + 1));
      ora_excel.set_cell_border(column_numeric2alpha(cur_cols.num + 1));
      ora_excel.set_cell_bg_color(column_numeric2alpha(cur_cols.num + 1), 'C6EFCE');
      ora_excel.set_cell_value(column_numeric2alpha(cur_cols.num + 1), cur_cols.column_name);
    END LOOP;
    ------------------------------------------------------------------------------
    -- Создание тела
    ------------------------------------------------------------------------------
    FOR cur IN (SELECT load_file_rows_id
                  FROM load_file_rows
                 WHERE load_file_id = v_load_file_id
                   AND (CASE
                         WHEN par_status = 'ALL_ERRORS' THEN
                          (CASE
                            WHEN row_status < 0 THEN
                             1
                            ELSE
                             0
                          END)
                         ELSE
                          1
                       END) = 1)
    LOOP
      query_to_sheet(query         => get_query(cur.load_file_rows_id)
                    ,par_col_count => v_number_of_cols + v_max_logs_by_row + 1);
    END LOOP;
  
    ------------------------------------------------------------------------------
    -- Вывод документа
    ------------------------------------------------------------------------------
    ora_excel.save_to_blob(l_blob);
  
    par_data := l_blob;
    IF par_status = 'ALL_ERRORS'
    THEN
      par_file_name := 'Журнал диагностики загруженного файла (ошибки).xlsx';
    ELSE
      par_file_name := 'Строки файла загрузки с состоянием и диагностикой (сокращенный).xlsx';
    END IF;
    par_content_type := 'application/excel';
  
  END rep_universal_loader_log_short;

  /*
  Доброхотова И.
  328575: Создать загрузочный файл для импорта в BI ДИД.
  Строки файла загрузки с состоянием и диагностикой не прошедшие проверку
  */
  PROCEDURE rep_universal_loader_log_error
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    rep_universal_loader_log_short(par_content_type => par_content_type
                                  ,par_file_name    => par_file_name
                                  ,par_data         => par_data
                                  ,par_status       => 'ALL_ERRORS');
  END rep_universal_loader_log_error;

  /*
    Пиядин А.
    222780 Формирование письма об окончании периода оценки риска
    Письмо об истечении ВП за 14 дней
  */
  PROCEDURE rep_letter_14vp
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT BLOB
  ) IS
  
    v_rep_image dml_t_rep_image.tt_t_rep_image;
    v_signer    typ_signer;
    v_body      VARCHAR2(4000);
    l_blob      BLOB;
  
    TYPE t_record IS RECORD(
       contact_name VARCHAR2(2000)
      ,contact_addr VARCHAR2(4000)
      ,pol_num      VARCHAR2(1024)
      ,end_date     DATE
      ,end_date_inc DATE
      ,amount       NUMBER);
  
    v_record t_record;
  
  BEGIN
    SELECT c.obj_name_orig contact_name
          ,nvl(ca.name, pkg_contact.get_address_name(ca.id)) contact_addr_full
          ,pp.pol_num pol_num
          ,pp.end_date end_date
          ,pp.end_date + 1 end_date_inc
          ,(SELECT SUM(part_pay_amount)
              FROM v_policy_payment_schedule pps
             WHERE pps.pol_header_id = pp.pol_header_id) amount
      INTO v_record
      FROM p_policy pp
          ,p_policy_contact pc
          ,t_contact_pol_role cpr
          ,contact c
          ,(SELECT c2.contact_id
                  ,coalesce(pkg_contact_rep_utils.get_last_active_address_id(c2.contact_id
                                                                            ,'FK_LEGAL')
                           ,pkg_contact_rep_utils.get_last_active_address_id(c2.contact_id, 'LEGAL')
                           ,pkg_contact_rep_utils.get_last_active_address_id(c2.contact_id)) address_id
              FROM contact c2) contact_addr
          ,cn_contact_address cca
          ,cn_address ca
     WHERE 1 = 1
       AND pp.policy_id = pc.policy_id
       AND pc.contact_policy_role_id = cpr.id
       AND cpr.brief = 'Страхователь'
       AND pc.contact_id = c.contact_id
       AND c.contact_id = contact_addr.contact_id(+)
       AND contact_addr.address_id = cca.id(+)
       AND cca.adress_id = ca.id(+)
       AND pp.policy_id = to_number(repcore.get_context('POL_ID'));
  
    -------------------------------------------------------------------------------------------------
    -- ИНИЦИАЛИЗАЦИЯ
    -------------------------------------------------------------------------------------------------
    init(par_default_font_size => 9);
  
    -------------------------------------------------------------------------------------------------
    -- ШАПКА
    -------------------------------------------------------------------------------------------------
    v_rep_image := dml_t_rep_image.get_rec_by_brief('LOGO_RENLIFE');
    IF v_rep_image.image IS NOT NULL
    THEN
      plpdf.putimage(p_name => 'Логотип'
                    ,p_data => v_rep_image.image
                    ,p_x    => 10
                    ,p_y    => 5
                    ,p_w    => 48
                    ,p_h    => 23);
    END IF;
  
    blank_cell(par_width => 0, par_height => 20, par_ln => 1);
  
    set_font(par_style => gc_style_bold, par_size => 10);
    plpdf.printmultilinecell(p_txt   => 'Общество с ограниченной ответственностью "Страховая Компания "Ренессанс Жизнь"' ||
                                        chr(13) || '(' ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_name) || ')'
                            ,p_h     => -1
                            ,p_w     => 80
                            ,p_align => 'C'
                            ,p_ln    => 1);
  
    set_font(par_style => gc_style_regular, par_size => 8);
    plpdf.printmultilinecell(p_txt   => pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_address) ||
                                        chr(13) ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_phone) || '; ' ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_fax) ||
                                        chr(13) ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_website) || '; ' ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_mask_email) ||
                                        chr(13) ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_okpo) || '; ' ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_ogrn) ||
                                        chr(13) ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_inn) || '; ' ||
                                        pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_kpp)
                            ,p_h     => -1
                            ,p_w     => 80
                            ,p_align => 'C'
                            ,p_ln    => 0);
  
    blank_cell(par_width => 40);
    set_font(par_style => gc_style_bold, par_size => 9);
    plpdf.printmultilinecell(p_txt   => 'Кому: ' || v_record.contact_name || chr(13) || 'Адрес: ' ||
                                        v_record.contact_addr
                            ,p_h     => -1
                            ,p_w     => 70
                            ,p_align => 'L'
                            ,p_ln    => 1);
  
    blank_cell(par_width => 0, par_height => 20, par_ln => 1);
    set_font(par_style => gc_style_bold, par_size => 9);
    plpdf.printmultilinecell(p_txt   => '           _______________  №  _______________'
                            ,p_h     => -1
                            ,p_align => 'L'
                            ,p_ln    => 1);
    plpdf.printmultilinecell(p_txt   => 'На. № _______________ от _______________'
                            ,p_h     => -1
                            ,p_align => 'L'
                            ,p_ln    => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    set_font(par_style => gc_style_italic, par_size => 9);
    plpdf.printmultilinecell(p_txt   => 'Уважаемый(ая)' || v_record.contact_name || '!'
                            ,p_h     => -1
                            ,p_align => 'C'
                            ,p_ln    => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ТЕЛО ПИСЬМА
    -------------------------------------------------------------------------------------------------
    set_font(par_style => gc_style_regular);
  
    blank_cell(par_width => 0, par_height => 5, par_ln => 1);
    v_body := '        Сообщаем Вам о том, что согласно условиям Договора страхования № ' ||
              v_record.pol_num || ' ' || 'установленный период оценки страхового риска истек ' ||
              to_char(v_record.end_date, 'dd.mm.yyyy');
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    v_body := '        К сожалению, до указанного момента Вами не были предоставлены заполненные анкеты, необходимые для ' ||
              'достоверной оценки степени страхового риска, и/или не было пройдено медицинское обследование.';
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    v_body := '        Согласно п. 5.6.2 Полисных условий, которые являются составной и неотъемлемой ' ||
              'частью договора страхования, Компания имеет право проверить сведения, указанные Страхователем ' ||
              'в заявлении на страхование и имеющие существенное значение для определения вероятности ' ||
              'наступления страхового случая и размера возможных убытков, а также запросить у Страхователя ' ||
              'дополнительные сведения о состоянии здоровья, опасных видах деятельности, доходах и финансовых ' ||
              'обязательствах, а также требовать в течение периода оценки страхового риска прохождения ' ||
              'Застрахованным медицинского обследования в необходимом объеме и указанном лечебном учреждении.';
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    v_body := '        В случае, если Компания не получает дополнительную информацию, необходимую для оценки риска, ' ||
              'договор страхования прекращает свое действие.';
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    v_body := '        С учетом вышесказанного, договор страхования № ' || v_record.pol_num ||
              ' прекратил ' || 'свое действие с ' || to_char(v_record.end_date_inc, 'dd.mm.yyyy');
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    v_body := '        В связи с расторжением договора страхования Вам будет возвращена сумма, ' ||
              'причитающаяся к возврату в соответствии с Полисными условиями ' ||
              TRIM(to_char(v_record.amount, '999g999g999g999d99')) || ' руб.';
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    v_body := '        Для перечисления сумм, причитающихся к выплате в связи с расторжением договора ' ||
              'страхования, просим предоставить Ваши банковские реквизиты.';
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    blank_cell(par_width => 0, par_ln => 1);
    v_body := '        В случае, если документы Вами были предоставлены, Вы ответили на все запросы ' ||
              'Компании и/или прошли медицинское обследование, а Компания не располагает ' ||
              'об этом информацией, или Вы не получили информацию, что именно необходимо ' ||
              'предоставить для оценки степени риска или какие именно действия необходимо ' ||
              'совершить, мы просим Вас срочно связаться с нами по ' ||
              lower(pkg_contact_rep_utils.get_insurer_info(pkg_contact_rep_utils.gc_company_phone)) || ' ' ||
              'либо со страховым представителем Страховой компании "Ренессанс Жизнь" в любом ' ||
              'филиале / агентстве Компании.';
    plpdf.printmultilinecell(p_txt => v_body, p_h => -1, p_w => 190, p_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ПОДПИСИ
    -------------------------------------------------------------------------------------------------
    blank_cell(par_width => 0, par_height => 10, par_ln => 1);
  
    v_signer := get_signer('pkg_rep_plpdf.rep_letter_14vp');
  
    set_font(par_style => gc_style_italic, par_size => 10);
    plpdf.printmultilinecell(p_txt => 'С уважением,', p_ln => 1);
    plpdf.printmultilinecell(p_txt => v_signer.job_position, p_h => -1, p_w => 80, p_ln => 0);
    plpdf.printmultilinecell(p_txt => v_signer.short_name, p_align => 'R', p_ln => 1);
  
    IF v_signer.image_sign IS NOT NULL
    THEN
      plpdf.putimage(p_name => 'Подпись'
                    ,p_data => v_signer.image_sign
                    ,p_x    => plpdf.getpagespace - 70
                    ,p_y    => plpdf.getcurrenty - 25
                    ,p_w    => 45
                    ,p_h    => 50);
    END IF;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'Письмо об истечении ВП за 14 дней.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_letter_14vp;

  /*
    Процедура формирования полиса по продукту Инвестор Партнер с ед.ф.опл. АкБарс
  */
  PROCEDURE rep_investor_lump_akbars
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
  
    v_cash_surr_table_cur typ_cur_cash_surr_table;
  
    PROCEDURE print_programs IS
      c_height  NUMBER := 30;
      c_weights plpdf_type.t_row_widths;
    
      v_ins_amount     VARCHAR2(255);
      v_fee            VARCHAR2(255);
      v_prod_line_desc VARCHAR2(255);
    
    BEGIN
      delete_row_print_cache;
    
      set_font(par_style => gc_style_bold);
      gv_widths(1) := plpdf.getpagespace / 12 * 3;
      gv_widths(2) := plpdf.getpagespace / 12 * 2;
      gv_widths(3) := plpdf.getpagespace / 12 * 3;
      gv_widths(4) := plpdf.getpagespace / 12 * 2;
      gv_widths(5) := plpdf.getpagespace / 12 * 2;
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
      gv_borders(4) := 1;
      gv_borders(5) := 1;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := gc_style_bold;
      gv_styles(5) := gc_style_bold;
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
      gv_aligns(5) := 'C';
    
      gv_datas(1) := 'Страховые риски';
      gv_datas(2) := 'Программы страхования';
      gv_datas(3) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
      gv_datas(4) := 'Доля от общей страховой премии' || gc_new_line || '(%)';
      gv_datas(5) := 'Страховая премия по каждой программе' || gc_new_line || '(рубли)';
    
      row_print2;
    
      gv_borders(1) := 'LR';
      gv_aligns(1) := 'L';
    
      FOR rec IN (SELECT rownum rn
                        ,t.*
                        ,COUNT(*) over() total_rn
                    FROM (SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
                                ,pl.description
                                ,pkg_rep_utils.to_money_sep(100 * pc.fee / SUM(pc.fee) over()) fee_part
                                ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                            FROM as_asset           aa
                                ,p_cover            pc
                                ,t_prod_line_option plo
                                ,t_product_line     pl
                                ,status_hist        sh
                           WHERE pc.as_asset_id = aa.as_asset_id
                             AND aa.p_policy_id = v_policy_id
                             AND pc.t_prod_line_option_id = plo.id
                             AND plo.product_line_id = pl.id
                             AND pc.status_hist_id = sh.status_hist_id
                             AND sh.brief != 'DELETED'
                             AND plo.brief IN ('PEPR_A', 'PEPR_A_PLUS', 'PEPR_B')
                           ORDER BY CASE plo.brief
                                      WHEN 'PEPR_A' THEN
                                       1
                                      WHEN 'PEPR_B' THEN
                                       2
                                      WHEN 'PEPR_A_PLUS' THEN
                                       3
                                    END) t)
      LOOP
        CASE rec.rn
          WHEN 1 THEN
            gv_styles(1) := gc_style_regular;
            gv_datas(1) := 'Дожитие Застрахованного до даты окончания срока действия договора страхования;' ||
                           gc_new_line || 'Смерть Застрахованного по любой причине*';
          WHEN 2 THEN
            gv_styles(1) := gc_style_italic;
            gv_datas(1) := '*Страховая выплата в случае смерти равна сумме уплаченной страховой премии и 100% от дополнительной страховой суммы на дату наступления страхового случая, согласно п. 10.3. Полисных условий.';
          WHEN 3 THEN
            gv_styles(1) := gc_style_italic;
            gv_datas(1) := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4 Полисных условий.';
        END CASE;
      
        gv_datas(2) := rec.description;
        gv_datas(3) := rec.ins_amount;
        gv_datas(4) := rec.fee_part;
        gv_datas(5) := rec.fee;
      
        IF rec.rn = rec.total_rn
        THEN
          gv_borders(1) := 'LBR';
        END IF;
      
        row_print2;
      
      END LOOP;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'Любая причина  —  событие (болезнь или несчастный случай), возникшее в течение действия договора, а также  самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.';
      gv_styles(1) := 'I';
      gv_borders(1) := 1;
      gv_widths(1) := plpdf.getpagespace;
    
      row_print2;
    
      BEGIN
        SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
              ,pl.description
              ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
          INTO v_fee
              ,v_prod_line_desc
              ,v_ins_amount
          FROM as_asset           aa
              ,p_cover            pc
              ,t_prod_line_option plo
              ,t_product_line     pl
              ,status_hist        sh
         WHERE pc.as_asset_id = aa.as_asset_id
           AND aa.p_policy_id = v_policy_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND plo.brief = 'AD'
           AND pc.status_hist_id = sh.status_hist_id
           AND sh.brief != 'DELETED';
      
        set_font(par_size  => gv_default_font_size + 1
                ,par_style => gc_style_bold
                ,par_color => gc_color_orange);
      
        --plpdf.linebreak;
        plpdf.printcell(p_txt   => 'Дополнительная программа «Страхование от несчастных случаев»'
                       ,p_align => 'L'
                       ,p_h     => -1
                       ,p_ln    => 1);
      
        set_font;
      
        delete_row_print_cache;
      
        gv_widths(1) := plpdf.getpagespace / 2;
        gv_widths(2) := plpdf.getpagespace / 4;
        gv_widths(3) := plpdf.getpagespace / 4;
      
        gv_styles(1) := gc_style_bold;
        gv_styles(2) := gc_style_bold;
        gv_styles(3) := gc_style_bold;
      
        gv_aligns(1) := 'L';
        gv_aligns(2) := 'C';
        gv_aligns(3) := 'C';
      
        gv_borders(1) := 1;
        gv_borders(2) := 1;
        gv_borders(3) := 1;
      
        gv_datas(1) := 'Страховые риски';
        gv_datas(2) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
        gv_datas(3) := 'Страховая премия' || gc_new_line || '(рубли)';
      
        row_print2;
      
        gv_styles(1) := gc_style_regular;
        gv_styles(2) := gc_style_regular;
        gv_styles(3) := gc_style_regular;
      
        gv_datas(1) := v_prod_line_desc;
        gv_datas(2) := v_ins_amount;
        gv_datas(3) := v_fee;
      
        row_print2;
      
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'ИТОГО ОБЩАЯ СТРАХОВАЯ ПРЕМИЯ (уплачивается единовременно):';
      gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_policy_fee(par_policy_id          => v_policy_id
                                                                         ,par_include_admin_cost => FALSE));
    
      gv_widths(1) := plpdf.getpagespace / 4 * 3;
      gv_widths(2) := plpdf.getpagespace / 4;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      row_print2;
    
      -- Безумный способ получить админ издержки.
      -- Люди, когда появится вминяемая функция для получения админ издержек, заменити это место пожалуйста!!!     
      gv_datas(1) := 'АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ (уплачиваются единовременно):';
      gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_policy_fee(v_policy_id, TRUE) -
                                                pkg_policy.get_policy_fee(v_policy_id, FALSE));
    
      row_print2;
    
      set_font(par_style => gc_style_italic);
      plpdf.printmultilinecell(p_txt => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.'
                              ,p_ln  => 1);
    
    END print_programs;
  
    PROCEDURE print_periods IS
    BEGIN
      set_font;
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 6;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
      gv_widths(4) := plpdf.getpagespace / 6;
      gv_widths(5) := plpdf.getpagespace / 6;
      gv_widths(6) := plpdf.getpagespace / 6;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := NULL;
      gv_styles(5) := gc_style_bold;
      gv_styles(6) := NULL;
    
      gv_datas(1) := 'СРОК СТРАХОВАНИЯ:';
      gv_datas(2) := v_pol_sum.policy_period_desc;
      gv_datas(3) := 'НАЧАЛО:';
      gv_datas(4) := to_char(v_pol_sum.start_date, 'hh24:mi dd.mm.yyyy');
      gv_datas(5) := 'ОКОНЧАНИЕ:';
      gv_datas(6) := to_char(v_pol_sum.end_date, 'hh24:mi dd.mm.yyyy');
    
      row_print2;
    
      plpdf.printmultilinecell(p_h        => 3
                              ,p_clipping => 0
                              ,p_txt      => 'Договор страхования (Полис) вступает в силу с 00:00 (ноля часов ноля минут) дня, следующего за датой принятия банком платежного поручения с исполнением на оплату страховой премии в полном объеме. В случае если страховая премия не поступит на расчетный счет Страховщика в течение 5-ти рабочих дней с даты подписания Страхователем договора страхования (Полиса), договор страхования (Полис) считается не вступившем в силу.'
                              ,p_ln       => 1);
    
    END print_periods;
  
    PROCEDURE print_payment_terms IS
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'ДАТА УПЛАТЫ СТРАХОВОЙ ПРЕМИИ: '
                     ,p_ln  => 0);
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => to_char(v_pol_sum.fist_payment_date, 'dd.mm.yyyy')
                     ,p_ln  => 1);
    
    END print_payment_terms;
  
    PROCEDURE prn(par_text VARCHAR2) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => 1
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text);
    END;
  
    PROCEDURE print_declaration IS
    BEGIN
      set_font(par_style => gc_style_bold);
    
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
    
      set_font;
      prn('8.1. НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ страдает мышечной дистрофией, тяжелыми нервными расстройствами, психическими заболеваниями, онкологическими заболеваниями;  НЕ употребляет  наркотики, токсические вещества; НЕ страдает алкоголизмом, или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита);');
      prn('8.2. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;');
      prn('8.3. Мне не известно о каких-либо внешних факторах, представляющих угрозу жизни или здоровью Застрахованного.');
    
      set_font(par_style => gc_style_bold);
      prn('Да, я могу подписать настоящую декларацию и заявляю:');
    
      set_font;
      prn('- что я согласен(-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;');
      prn('- что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования.');
      prn('- Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом Российской Федерации «О персональных данных» № 152-ФЗ выражают Страховщику согласие на обработку своих персональных данных, включающих: фамилию, имя, отчество, пол, дату рождения, паспортные данные (серия, номер кем и когда выдан), адрес проживания, контактный телефон, данные о состоянии моего здоровья, заболеваниях, травмах, случаях обращения за медицинской помощью, - в целях продвижения товаров, работ, услуг на рынке путем осуществления прямых контактов с помощью средств связи, в целях обеспечения исполнения настоящего Договора.');
      prn('Обработка персональных данных, в том числе автоматизированная, осуществляется посредством сбора, систематизации, накопления, хранения, уточнения (обновления, изменения), использования, распространения, передачу, обезличивания, блокирования, уничтожения персональных данных, как на бумажных, так и на электронных носителях.');
      prn('Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия Договора страхования и в течение 15 лет после окончания срока действия Договора и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
      prn('Подписывая настоящий Договор, Страхователь/Застрахованный подтверждает,  что его  родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных корпорациях и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях.');
    
    END print_declaration;
  
    PROCEDURE print_declaration_ad IS
    BEGIN
      set_font(par_style => gc_style_bold);
    
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
    
      set_font;
      prn('9.1. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания и т.п.);');
      prn('9.2. НЕ занимается опасными видами спорта или опасными видами увлечений (например, альпинизм, погружение под воду на глубину более 40 метров, в подводные пещеры, к останкам судов или строений, находящихся на дне, независимо от глубины погружения, прыжки с парашютом, скалолазание, автоспорт, непрофессиональная авиация) и не намеревается путешествовать в горячие точки планеты;');
      prn('9.3. Дополнительно я подтверждаю, что общая страховая сумма по любым договорам страхования, заключенным в отношении Застрахованного по риску «смерть в результате несчастного случая», учитывая также настоящее Заявление на страхование, не превышает 3 000 000 рублей.');
    END print_declaration_ad;
  
    PROCEDURE print_additional_conds IS
    BEGIN
      set_font;
      IF v_pol_sum.product_brief = 'INVESTOR_LUMP_GLOBEKS'
      THEN
        prn('10.1  Договор страхования заключен на основании Полисных условий страхования жизни по программе «Инвестор» (с единовременной формой оплаты), утвержденных приказом Генерального директора ООО «СК «Ренессанс Жизнь» № 138/ОД/14 от 08.08.2014. (далее «Полисные условия»).');
      ELSE
        prn('10.1  Договор страхования заключен на основании Полисных условий страхования жизни по программе «Инвестор» (с единовременной формой оплаты), утвержденных приказом Генерального директора ООО «СК «Ренессанс Жизнь» № 131/ОД/14 от 04.08.2014. (далее «Полисные условия»).');
      END IF;
      prn('10.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) на полисе, а также в приложениях и дополнительных соглашениях к нему.');
      prn('10.3. Территория страхования: весь мир.');
      prn('10.4. Время действия страховой защиты: 24 часа.');
      prn('10.5. Валюта договора страхования: Рубль РФ.');
      prn('10.6. При досрочном прекращении действия договора выплата предусмотренной соответствующей программой страхования гарантированной выкупной суммы производится согласно таблице гарантированных выкупных сумм (Приложение № 1).');
      prn('10.7. К полису прилагаются:');
    
      prn('Приложение № 1 - Таблица гарантированных выкупных сумм');
      prn('Приложение № 2 - "Полисные условия"');
    END print_additional_conds;
  
    PROCEDURE print_signes IS
      v_signs pkg_report_signer.typ_signer;
    BEGIN
      v_signs := pkg_report_signer.get_signer_id_by_exe_name('pkg_rep_plpdf.rep_best_doctors');
    
      plpdf.putimage(p_name => 'image_sign_jpg'
                    ,p_data => v_signs.image_sign_jpg
                    ,p_x    => plpdf.getpagespace - 5 - 45
                    ,p_y    => plpdf.getcurrenty
                    ,p_w    => 45
                    ,p_h    => 50);
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace / 3;
      gv_widths(3) := plpdf.getpagespace / 3;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_datas(1) := 'Страхователь';
      gv_datas(2) := 'Застрахованный';
      gv_datas(3) := 'Страховщик';
    
      gv_borders(1) := 'LTR';
      gv_borders(2) := 'LTR';
      gv_borders(3) := 'LTR';
    
      row_print2;
    
      gv_datas(1) := 'Подписывая настоящий Договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации, «Полисные условия» получил и ознакомился.';
      gv_datas(2) := 'Подписывая настоящий Договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации, с «Полисными условиями» ознакомился. С назначением Выгодоприобретателей согласен.';
      gv_datas(3) := 'Представитель по доверенности ' || v_signs.short_name || ' (дов №' ||
                     v_signs.procuratory_num || ')';
    
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      row_print2;
    
      gv_datas(1) := '___________/' || nvl(v_insuree_info.fio_initials, '__________________');
      gv_datas(2) := '___________/' || nvl(v_assured_info.fio_initials, '__________________');
      gv_datas(3) := NULL;
    
      row_print2;
    
      gv_datas(1) := 'Подпись      ФИО Страхователя';
      gv_datas(2) := 'Подпись      ФИО Застрахованного';
      gv_datas(3) := NULL;
    
      gv_borders(1) := 'LBR';
      gv_borders(2) := 'LBR';
      gv_borders(3) := 'LBR';
    
      row_print2;
    
    END print_signes;
  
    PROCEDURE print_cash_surr IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 1')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма рассчитывается как % от сформированного резерва по договору страхования на дату окончания страхового года,  в течение которого произошло расторжение договора страхования.'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr;
  
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
  
    init(par_default_font_size => 8);
  
    print_default_title('ИНВЕСТОР');
    print_default_cotitle('(с единовременной формой оплаты)');
    print_default_title('Договор страхования № ' || v_pol_sum.ids);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_default_insurer_info;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_insuree_info(par_contact_info => v_insuree_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    print_assured_info(par_contact_info => v_assured_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПРОГРАММЫ СТРАХОВАНИЯ');
    print_programs;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОД СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПЕРИОД СТРАХОВАНИЯ');
    print_periods;
  
    -------------------------------------------------------------------------------------------------
    --УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ');
    print_payment_terms;
  
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННОГО');
    print_benificiary_table(v_policy_id, 3);
  
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО');
    print_declaration;
  
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО В СЛУЧАЕ ВЫБОРА ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЫ «СТРАХОВАНИЕ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ»
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО В СЛУЧАЕ ВЫБОРА ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЫ «СТРАХОВАНИЕ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ»');
    print_declaration_ad;
  
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    print_additional_conds;
  
    print_signes;
  
    print_cash_surr;
  
    --open v_cash_surr_table_cur for 
  
    --print_cash_surr_table;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_investor_lump_akbars;

  /*
  Печать полисов по продуктам ХКФ Банк
  18.04.2014 Черных М.
  */
  PROCEDURE rep_hkf_credit
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT BLOB
   ,par_period_type  VARCHAR2
  ) IS
  
    v_policy_id    p_policy.policy_id%TYPE;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
  
    gv_chapter_num PLS_INTEGER := 0;
  
    l_blob      BLOB;
    l_text      VARCHAR2(4000);
    v_image_rlp BLOB;
    /*Виды шапок отчета*/
    vc_header_life CONSTANT VARCHAR2(50) := '<#H_LIFE>'; --страхование жизни
    vc_header_life_and_health    VARCHAR2(50) := '<#H_LIFE_HEALTH>'; --страхование жизни и здоровья
    vc_header_life_and_h_one_row VARCHAR2(50) := '<#H_LIFE_ONE>'; --страхование жизни и здоровья (однострочная шапка)
    vc_header_job_loss           VARCHAR2(50) := '<#JOB_LOSS>'; --страхование потери работы
    vc_header_active             VARCHAR2(50) := '<#ACTIVE>'; --Актив +
    vc_header_combo              VARCHAR2(50) := '<#COMBO>'; --Комбо +    
    /*Виды сроков действия*/
    vc_period_write_off CONSTANT VARCHAR2(50) := '<#P_WRITE_OFF>'; --с даты списания
    vc_period_payment   CONSTANT VARCHAR2(50) := '<#P_PAY>'; --с даты оплаты
    /*Виды текста в разделе рисков про страховой случай*/
    vc_ins_accident_except4     CONSTANT VARCHAR2(50) := '<#I_PC_EXC4>'; --страховой случай - в разделе текущем разделе, кроме 4 ПУ
    vc_ins_accident_except3     CONSTANT VARCHAR2(50) := '<#I_PC_EXC3>'; --страховой случай - в разделе текущем разделе, кроме 3 ПУ    
    vc_ins_accident_except3_job CONSTANT VARCHAR2(50) := '<#I_PC_EXC3_JOB>'; --страховой случай - в разделе текущем разделе, кроме 3 ПУ Дожитие    
    vc_ins_accident_except34    CONSTANT VARCHAR2(50) := '<#I_PC_EXC34>'; --страховой случай - в разделе текущем разделе, кроме 3 и 4 ПУ     
    vc_ins_accident_huge        CONSTANT VARCHAR2(50) := '<#I_PC_HUGE>'; --страховой случай - длинный текст
    /*Виды выгодоприобретателей*/
    vc_benif_law     CONSTANT VARCHAR2(50) := '<#B_LAW>'; --по закону
    vc_benif_insuree CONSTANT VARCHAR2(50) := '<#B_INSUREE>'; --застрахованный
    /*Виды документов на выплату*/
    vc_doc_death_disability     CONSTANT VARCHAR2(50) := '<#D_DEAH_DISABILITY>'; --смерть и инвалидность
    vc_doc_job_loss             CONSTANT VARCHAR2(50) := '<#D_JOB_LOSS>'; --потеря работы
    vc_doc_job_loss_short       CONSTANT VARCHAR2(50) := '<#D_JOB_LOSS_SHORT>'; --краткий список при потере работы
    vc_doc_job_loss_long        CONSTANT VARCHAR2(50) := '<#D_JOB_LOSS_LONG>'; --длинный список при потере работы
    vc_doc_death_disability_job CONSTANT VARCHAR2(50) := '<#D_DDJ>'; --смерть, инвалидность или потеря работы
    vc_doc_active               CONSTANT VARCHAR2(50) := '<#D_ACTIVE>'; --Актив +
    vc_doc_combo                CONSTANT VARCHAR2(50) := '<#D_COMBO>'; --Комбо +    
    /*Порядок выплат*/
    vc_order_benif_many   CONSTANT VARCHAR2(50) := '<#O_MANY>'; --выгодоприобретателЯм
    vc_order_benif_one    CONSTANT VARCHAR2(50) := '<#O_ONLY>'; --выгодоприобретателЮ
    vc_order_hkf_1        CONSTANT VARCHAR2(50) := '<#O_HKF_1>'; --единовременно в ХКФ
    vc_order_hkf_3        CONSTANT VARCHAR2(50) := '<#O_HKF_3>'; --раз в три месяца в ХКФ
    vc_order_hkf_61_62_63 CONSTANT VARCHAR2(50) := '<#O_HKF_61_62_63>'; --порядок выплат для рисков 6.1, 6.2 и 6.3
    vc_order_hkf_61_62    CONSTANT VARCHAR2(50) := '<#O_HKF_61_62>'; --порядок выплат для рисков 6.1 и 6.2
    vc_order_active       CONSTANT VARCHAR2(50) := '<#O_ACTIVE>'; --порядок выплат для Актив+ и Комбо+
    /*Особые условия*/
    vc_conditions_denial CONSTANT VARCHAR2(50) := '<#C_DENIAL>'; --условия при отказе
    vc_conditions_break  CONSTANT VARCHAR2(50) := '<#C_BREAK>'; --условия при расторжении
    /*Подпись*/
    vc_sign_director       CONSTANT VARCHAR2(50) := '<#S_DIRECTOR>'; --подпись директора
    vc_sign_representative CONSTANT VARCHAR2(50) := '<#S_REPRESENT>'; --подпись представителя по доверенности
    /*Рисует поля страницы*/
    PROCEDURE print_margine IS
    BEGIN
      plpdf.drawrect(p_x     => plpdf.getleftmargin
                    ,p_y     => plpdf.gettopmargin
                    ,p_w     => plpdf.getpagewidth - plpdf.getrightmargin - plpdf.getleftmargin
                    ,p_h     => plpdf.getpageheight - plpdf.getbottommargin - plpdf.gettopmargin
                    ,p_style => 'D');
    END print_margine;
  
    PROCEDURE line IS
    BEGIN
      /*Двойная линия*/
      plpdf.printcell(p_h => 0.05, p_border => '1', p_ln => 1);
    END line;
    /*Возвращает картинку по брифу*/
    FUNCTION get_image(par_brief VARCHAR2) RETURN BLOB IS
      v_image_blob BLOB;
    BEGIN
      SELECT t.image INTO v_image_blob FROM t_rep_image t WHERE t.brief = par_brief;
      RETURN v_image_blob;
    END get_image;
  
    /*определить печатную версию заголовка по данным полиса*/
    FUNCTION define_header RETURN VARCHAR2 IS
      v_result VARCHAR2(50);
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN ('CR92_1', 'CR92_1.1', 'CR92_2', 'CR92_2.1') THEN
        
          IF v_pol_sum.start_date >= to_date('12.08.2013', 'dd.mm.rrrr')
          THEN
            /*Свежие полисы с надписью "страхование жизни и здоровья"*/
            v_result := vc_header_life_and_health;
          ELSE
            v_result := vc_header_life;
          END IF;
        WHEN v_pol_sum.product_brief IN ('CR92_3', 'CR92_3.1') THEN
          IF v_pol_sum.start_date >= to_date('12.08.2013', 'dd.mm.rrrr')
          THEN
            /*Свежие полисы с надписью "дожитие до потери работы"*/
            v_result := vc_header_job_loss;
          ELSE
            v_result := vc_header_life;
          END IF;
        WHEN v_pol_sum.product_brief IN ('CR92_5') THEN
          v_result := vc_header_life_and_h_one_row;
        WHEN v_pol_sum.product_brief IN ('CR92_4', 'CR92_6') THEN
          v_result := vc_header_life_and_health;
        WHEN v_pol_sum.product_brief IN ('CR92_7', 'CR92_9') THEN
          v_result := vc_header_active;
        WHEN v_pol_sum.product_brief IN ('CR92_8', 'CR92_10') THEN
          v_result := vc_header_combo;
        ELSE
          ex.raise(par_message => 'Не прописан заголовок полиса для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
      RETURN v_result;
    END define_header;
  
    /*Печать загововка
    @par_type - тип версии заголовка*/
    PROCEDURE print_header(par_type VARCHAR2) IS
      l_text                VARCHAR2(500);
      v_policy_title        VARCHAR2(500);
      v_policy_terms        VARCHAR2(500);
      v_spaсe_before_title NUMBER; --ширина пространства перед названием полиса (опредеяет место переноса слов в разных версиях)
      v_spaсe_before_terms NUMBER; --ширина пространства перед ПУ
      v_adjust_title        NUMBER; --пространство для выравнивания заголовка договора (перенос слов в нужном месте)
      v_picture_h           NUMBER;
      v_picture_w           NUMBER;
      v_version             NUMBER; --однострочная (1) шапка или двухстрочная (2)
      v_policy_w            NUMBER;
      v_font_size           NUMBER;
    BEGIN
      /*Картинка для печати*/
      v_image_rlp := get_image(par_brief => 'RENLIFE_LABEL');
      /*тексты*/
      CASE par_type
        WHEN vc_header_life THEN
          v_policy_title := 'ДОГОВОР СТРАХОВАНИЯ ЖИЗНИ ЗАЕМЩИКОВ КРЕДИТА (ПОЛИС) №';
          v_policy_terms := 'заключен на основании Полисных условий страхования жизни заемщиков кредита';
          v_font_size    := 9;
          v_version      := 1;
        WHEN vc_header_job_loss THEN
          v_policy_title := 'ДОГОВОР СТРАХОВАНИЯ ЗАЕМЩИКОВ КРЕДИТА (ПОЛИС) №';
          v_policy_terms := 'заключен на основании Полисных условий по программе по программе «Дожитие Застрахованного до потери постоянной работы по независящим от него условиям»';
          v_font_size    := 9;
          v_version      := 1;
        WHEN vc_header_life_and_h_one_row THEN
          v_policy_title := 'ДОГОВОР СТРАХОВАНИЯ ЖИЗНИ И ЗДОРОВЬЯ ЗАЕМЩИКОВ КРЕДИТА (ПОЛИС) №';
          v_policy_terms := 'заключен на основании Полисных условий страхования жизни и здоровья заемщиков кредита (далее "Полисные условия")';
          v_font_size    := 7;
          v_version      := 1;
        WHEN vc_header_life_and_health THEN
          v_policy_title := 'ДОГОВОР СТРАХОВАНИЯ ЖИЗНИ И ЗДОРОВЬЯ ЗАЕМЩИКОВ КРЕДИТА (ПОЛИС) №';
          v_policy_terms := 'заключен на основании Полисных условий страхования жизни и здоровья заемщиков кредита (далее "Полисные условия")';
          v_font_size    := 9;
          v_version      := 2;
        WHEN vc_header_active THEN
          v_policy_title := 'ДОГОВОР СТРАХОВАНИЯ ЖИЗНИ И ЗДОРОВЬЯ ЗАЕМЩИКОВ КРЕДИТА (ПОЛИС) "Актив +" №';
          v_policy_terms := 'заключен на основании Полисных условий страхования жизни и здоровья заемщиков кредита (далее "Полисные условия")';
          v_font_size    := 9;
          v_version      := 2;
        WHEN vc_header_combo THEN
          v_policy_title := 'ДОГОВОР СТРАХОВАНИЯ ЖИЗНИ И ЗДОРОВЬЯ ЗАЕМЩИКОВ КРЕДИТА (ПОЛИС) "Комбо +" №';
          v_policy_terms := 'заключен на основании Полисных условий страхования жизни и здоровья заемщиков кредита (далее "Полисные условия")';
          v_font_size    := 9;
          v_version      := 2;
        
        ELSE
          ex.raise(par_message => 'Не определены Полисные условия для печати');
      END CASE;
    
      IF v_version = 1 /*Однострочная печать шапки*/
      THEN
        v_spaсe_before_title := 33;
        v_spaсe_before_terms := 33;
        v_adjust_title        := 0;
        v_version             := 1; --Однострочный вариант заголовка
        v_picture_h           := 11;
        v_picture_w           := 33;
        v_policy_w            := 125;
      
        set_font(par_size => v_font_size, par_style => gc_style_bold);
      
        plpdf.putimage(p_name => 'image_rlp.jpg'
                      ,p_data => v_image_rlp
                      ,p_x    => 11
                      ,p_y    => 6.5
                      ,p_h    => v_picture_h
                      ,p_w    => v_picture_w);
        /*Пустая 1-я строка*/
        plpdf.printcell(p_h => 2, p_border => 'LTR', p_ln => 1);
        /*Оставляем место под картинку*/
        plpdf.printcell(p_h => 10, p_w => v_spaсe_before_title + v_adjust_title, p_border => 'L');
        /*Текст названия полиса*/
        plpdf.printmultilinecell(p_h        => 5
                                ,p_w        => v_policy_w
                                ,p_txt      => v_policy_title
                                ,p_border   => 'R'
                                ,p_align    => 'R'
                                ,p_clipping => 1
                                ,p_ln       => 0);
        /*Номер договра на сером фоне*/
        plpdf.setcolor4filling(p_color => gc_color_light_grey);
        plpdf.printcell(p_h      => 5
                       ,p_w      => 30
                       ,p_txt    => v_pol_sum.pol_num
                       ,p_border => '1'
                       ,p_ln     => 0
                       ,p_align  => 'C'
                       ,p_fill   => 1);
        plpdf.printmultilinecell(p_h => 5, p_ln => 1, p_align => 'C', p_border => 'R');
        /*Оставляем место под картинку*/
        plpdf.printcell(p_h => 10, p_w => v_spaсe_before_terms, p_border => 'L');
        IF par_type IN (vc_header_job_loss, vc_header_life_and_h_one_row)
        THEN
          /*Уменьшаем шрифт и увеличиваем ширину, чтобы поместился длинный текст ПУ*/
          set_font(par_size => 5.5, par_style => gc_style_regular);
          v_policy_w := v_policy_w + 30;
        ELSE
          set_font(par_size => 8, par_style => gc_style_regular);
        END IF;
        /*текст про полисные условия*/
        plpdf.printmultilinecell(p_h      => 5
                                ,p_w      => v_policy_w
                                ,p_txt    => v_policy_terms
                                ,p_border => 0
                                ,p_ln     => 0
                                ,p_align  => 'C');
        plpdf.printmultilinecell(p_h => 5, p_ln => 1, p_border => 'R');
      END IF;
    
      IF v_version = 2 /*Двухстрочная версия*/
      THEN
        v_spaсe_before_title := 44;
        v_spaсe_before_terms := 70;
        v_adjust_title        := 0;
        v_version             := 2; --Двухстрочный вариант заголовка
        v_picture_h           := 14.9;
        v_picture_w           := 43.7;
        set_font(par_size => 9, par_style => gc_style_bold);
        plpdf.putimage(p_name => 'image_rlp.jpg'
                      ,p_data => v_image_rlp
                      ,p_x    => 11
                      ,p_y    => 6.5
                      ,p_h    => v_picture_h
                      ,p_w    => v_picture_w);
        /*Оставляем место под картинку*/
        plpdf.printcell(p_h => 10, p_w => v_spaсe_before_title + v_adjust_title, p_border => 'LT');
        /*Текст названия полиса*/
        plpdf.printmultilinecell(p_h        => 4
                                ,p_w        => 100 - v_adjust_title
                                ,p_txt      => v_policy_title
                                ,p_border   => 'TR'
                                ,p_align    => 'R'
                                ,p_clipping => 0
                                ,p_ln       => 0);
        /*Номер договра на сером фоне*/
        plpdf.setcolor4filling(p_color => gc_color_light_grey);
        plpdf.printcell(p_h      => 8 --10
                       ,p_w      => 46
                       ,p_txt    => v_pol_sum.pol_num
                       ,p_border => 'LRTB'
                       ,p_ln     => 1
                       ,p_align  => 'C'
                       ,p_fill   => 1);
        /*Оставляем место под картинку*/
        plpdf.printcell(p_h => 8 /*10*/, p_w => v_spaсe_before_terms, p_border => 'L');
        set_font(par_size => 9, par_style => gc_style_regular);
        /*текст про полисные условия*/
        plpdf.printmultilinecell(p_h        => 4 /*5*/
                                ,p_txt      => v_policy_terms
                                ,p_border   => 'R'
                                ,p_ln       => 1
                                ,p_align    => 'R'
                                ,p_clipping => 0);
      END IF;
      /*Город*/
      plpdf.printcell(p_h        => -1
                     ,p_w        => v_spaсe_before_title /*по ширине картинки*/
                     ,p_txt      => 'г.Москва'
                     ,p_border   => 'L'
                     ,p_clipping => 0
                     ,p_ln       => 0
                     ,p_align    => 'C');
      /*Белая часть строки до даты*/
      plpdf.printcell(p_h => -1, p_w => 50);
      /*Дата*/
      plpdf.printcell(p_h      => -1
                     ,p_txt    => pkg_rep_utils.date_to_genitive_case_quotes(v_pol_sum.start_date) ||
                                  ' г.'
                     ,p_align  => 'R'
                     ,p_border => 'R'
                     ,p_ln     => 1
                     ,p_fill   => 1);
    
      /*Двойная линия*/
      line;
    END print_header;
  
    /*Страховщик*/
    PROCEDURE print_insurer IS
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h        => 4
                     ,p_txt      => gv_chapter_num || '. СТРАХОВЩИК:'
                     ,p_border   => 'LRT'
                     ,p_ln       => 1
                     ,p_clipping => 0);
      /*Нименование страховщика жирным*/
      l_text := pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_name) || ',';
      plpdf.printcell(p_h        => 3
                     ,p_w        => plpdf.gettextwidth(l_text) + 2 /*т.к. не учитывается жирность*/
                     ,p_txt      => l_text
                     ,p_border   => 'L'
                     ,p_clipping => 0);
      /*Адрес страховщика обычным*/
      set_font(par_style => gc_style_regular);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => ', 115114, г. Москва, Дербеневская наб., д.7, стр. 22' /*Требуется именно этот адрес с набережной*/
                              ,p_border   => 'R'
                              ,p_ln       => 1
                              ,p_clipping => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => 'Тел. 8 (495) 981 2 981, Факс 8 (495) 589 18 65/67,  8 800 200 54 33 (бесплатный номер), www.renlife.com, Лицензия С № 3972 77 от 17.01.2006 года'
                              ,p_border   => 'R'
                              ,p_ln       => 1
                              ,p_clipping => 0);
      /*Остальная инфа по страховщику*/
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => 'ИНН 7725520440, КПП 775001001, Р/С 40701810600010000030 в ООО  «ХКФ Банк», БИК 044585216, К/С 30101810400000000216'
                              ,p_border   => 'LRB'
                              ,p_ln       => 1
                              ,p_clipping => 0);
      /*Двойная линия*/
      line;
    
    END print_insurer;
  
    /*Страхователь/застрахованный*/
    PROCEDURE print_insuree IS
      v_date_of_birth VARCHAR2(20);
      v_day1          VARCHAR2(1);
      v_day2          VARCHAR2(1);
      v_passport_ser  VARCHAR2(10);
      v_passport_num  VARCHAR2(10);
      vc_fio_width             CONSTANT NUMBER := 65; --ширина текстовых полей ФИО
      vc_label_width           CONSTANT NUMBER := 14; --ширина наименований полей для ФИО и др.
      vc_space_width           CONSTANT NUMBER := 2; --ширина первого отступа
      vc_long_space            CONSTANT NUMBER := 55; --ширина отступа между ФИО и датой рождения, паспортом
      vc_cell_size             CONSTANT NUMBER := 5; --размер клеточки для печати одной цифры
      vc_passport_text_width   CONSTANT NUMBER := vc_cell_size * 10; --ширина текстового поля "паспорт"
      vc_small_font_size       CONSTANT NUMBER := 6; --Размер мелкго шрифта нижней подписи к полям (число, месяц, год и др.)
      vc_passport_giving_width CONSTANT NUMBER := 170; --Размер поля вывода Кем и когда выдан паспорт
      vc_zip_width             CONSTANT NUMBER := 21; --Ширина поля индекса
      vc_address_width         CONSTANT NUMBER := 116; --Ширина поля адреса
      vc_phone_width           CONSTANT NUMBER := 33; --Ширина поля телефон
      v_address_id        NUMBER;
      v_adress_id_for_zip NUMBER;
      vс_small_line_h CONSTANT NUMBER := 2.5; --выстора маленькой линии
      vc_line_h        CONSTANT NUMBER := 5; --высота обычной строки
      --Список номеров телефонов через запятую
      FUNCTION get_phones(par_contact_id NUMBER) RETURN VARCHAR2 IS
        v_phones_sting VARCHAR2(1024);
      BEGIN
        FOR vr_row IN (SELECT cct.telephone_number
                         FROM cn_contact_telephone cct
                             ,t_telephone_type     ttt
                        WHERE cct.contact_id = par_contact_id
                          AND cct.telephone_type = ttt.id)
        LOOP
          v_phones_sting := v_phones_sting || vr_row.telephone_number || ', ';
        END LOOP;
        RETURN substr(v_phones_sting, 1, length(v_phones_sting) - 2);
      END get_phones;
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num || '. СТРАХОВАТЕЛЬ / ЗАСТРАХОВАННЫЙ:'
                     ,p_border => 'LRT'
                     ,p_ln     => 1);
      /*--------------строка ФАМИЛИЯ-------------------*/
      /*Первый отступ*/
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_border => 'L', p_w => vc_space_width, p_h => vc_line_h);
      /*Название поля вывода*/
      plpdf.printcell(p_h => vc_line_h, p_txt => 'Фамилия', p_w => vc_label_width);
      set_font(par_style => gc_style_bold);
      /*Поле вывода*/
      plpdf.printcell(p_h      => vc_line_h
                     ,p_w      => vc_fio_width
                     ,p_txt    => v_insuree_info.name
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
    
      set_font(par_style => gc_style_regular);
      plpdf.printmultilinecell(p_h     => vc_line_h
                              ,p_w     => vc_long_space
                              ,p_txt   => 'Дата рождения'
                              ,p_ln    => 0
                              ,p_align => 'R');
    
      set_font(par_style => gc_style_bold);
      v_date_of_birth := to_char(v_insuree_info.date_of_birth, 'dd.mm.yyyy');
      /*Первая цифра дня рождения*/
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 1, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*Вторая цифра дня рождения*/
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 2, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*Пробел*/
      plpdf.printcell(p_h => vc_cell_size, p_w => vc_cell_size);
      /*Первая цифра месяца рождения*/
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 4, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*Вторая цифра месяца рождения*/
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 5, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*Пробел*/
      plpdf.printcell(p_h => vc_cell_size, p_w => vc_cell_size);
      /*Год рождения по отдельным цифрам*/
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 7, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 8, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 9, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_date_of_birth, 10, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      plpdf.printcell(p_border => 'R', p_ln => 1);
      /*Подпись к дате рождения*/
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_space_width + vc_label_width + vc_fio_width + vc_long_space
                     ,p_border   => 'L'
                     ,p_ln       => 0
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular, par_size => vc_small_font_size);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_cell_size * 2
                     ,p_txt      => 'Число'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      /*Пробел*/
      plpdf.printcell(p_h => vс_small_line_h, p_w => vc_cell_size);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_cell_size * 2
                     ,p_txt      => 'Месяц'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      /*Пробел*/
      plpdf.printcell(p_h => vс_small_line_h, p_w => vc_cell_size, p_clipping => 0);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_cell_size * 4
                     ,p_txt      => 'Год'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      /*--------------строка ИМЯ-------------------*/
      set_font(par_style => gc_style_regular);
      /*Отступ*/
      plpdf.printcell(p_h => vc_line_h, p_w => vc_space_width, p_border => 'L');
      /*Название поля вывода*/
      plpdf.printcell(p_h => vc_line_h, p_txt => 'Имя', p_w => vc_label_width, p_ln => 0);
      set_font(par_style => gc_style_bold);
      /*Поле вывода*/
      plpdf.printcell(p_h      => vc_line_h
                     ,p_w      => vc_fio_width
                     ,p_txt    => v_insuree_info.first_name
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*Паспорт*/
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h     => vc_line_h
                     ,p_w     => vc_long_space
                     ,p_txt   => 'Документ, удостоверяющий личность'
                     ,p_align => 'R');
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => vc_line_h
                     ,p_w      => vc_passport_text_width
                     ,p_txt    => pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                                ,'<#TYPE_DESC>')
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      /*Название к документу (строчкой ниже)*/
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_space_width + vc_label_width + vc_fio_width + vc_long_space
                     ,p_border   => 'L'
                     ,p_ln       => 0
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular, par_size => 6);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_passport_text_width
                     ,p_txt      => 'название'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      /*--------------строка ОТЧЕСТВО-------------------*/
      set_font(par_style => gc_style_regular);
      /*Отступ*/
      plpdf.printcell(p_h => vc_line_h, p_w => vc_space_width, p_border => 'L');
      /*Название поля вывода*/
      plpdf.printcell(p_h => vc_line_h, p_txt => 'Отчество', p_w => vc_label_width);
      set_font(par_style => gc_style_bold);
      /*Поле вывода*/
      plpdf.printcell(p_h      => vc_line_h
                     ,p_w      => vc_fio_width
                     ,p_txt    => v_insuree_info.middle_name
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*Серия и номер паспорта отдельными цифрами*/
      v_passport_ser := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                      ,pkg_contact_rep_utils.gc_mask_doc_series);
      plpdf.printcell(p_h => vc_line_h, p_w => vc_long_space - vc_cell_size);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_ser, 1, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_ser, 2, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_ser, 3, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_ser, 4, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*Пробел*/
      plpdf.printcell(p_h => vc_cell_size, p_w => vc_cell_size);
      /*Номер паспорта*/
      v_passport_num := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                      ,pkg_contact_rep_utils.gc_mask_doc_number);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_num, 1, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_num, 2, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_num, 3, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_num, 4, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_num, 5, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_h      => vc_cell_size
                     ,p_w      => vc_cell_size
                     ,p_txt    => substr(v_passport_num, 6, 1)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_border => 'R', p_ln => 1);
      /*Подпись к номеру паспорта (строкой ниже)*/
      set_font(par_style => gc_style_regular, par_size => vc_small_font_size);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_space_width + vc_label_width + vc_fio_width + vc_long_space -
                                    vc_cell_size
                     ,p_border   => 'L'
                     ,p_ln       => 0
                     ,p_clipping => 0);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_cell_size * 4
                     ,p_txt      => 'серия'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_h => vс_small_line_h, p_w => vc_cell_size, p_clipping => 0);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_cell_size * 6
                     ,p_txt      => 'номер'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      /*кем и когда выдан паспорт*/
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h => vc_line_h, p_w => vc_space_width + vc_label_width, p_border => 'L');
      plpdf.printcell(p_h      => vc_line_h
                     ,p_w      => vc_passport_giving_width
                     ,p_txt    => pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                                ,'Выдан: <#DOC_PLACE> Дата выдачи: <#DOC_DATE>')
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_border => 'R', p_ln => 1);
      /*Подпись к "кем и когда выдан" (строкой ниже)*/
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_space_width + vc_label_width
                     ,p_border   => 'L'
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular, par_size => vc_small_font_size);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_passport_giving_width
                     ,p_txt      => 'Кем и когда выдан'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_border => 'R', p_ln => 1);
    
      /*Адрес*/
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_border => 'L', p_w => vc_space_width, p_h => vc_line_h);
      plpdf.printcell(p_h => vc_line_h, p_txt => 'Адрес', p_w => vc_label_width, p_ln => 0);
      set_font(par_style => gc_style_bold);
      /*Последний адрес*/
      v_address_id := pkg_contact_rep_utils.get_last_active_address_id(par_contact_id => v_insuree_info.contact_id
                                                                       /*,par_brief      => 'CONST' Убрано 01.07.2014*/);
      BEGIN
        SELECT c.adress_id
          INTO v_adress_id_for_zip
          FROM cn_contact_address c
         WHERE c.id = v_address_id;
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
      /*Индекс*/
      plpdf.printcell(p_h      => -1
                     ,p_w      => vc_zip_width
                     ,p_txt    => pkg_contact.get_index(v_adress_id_for_zip)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*город, улица, дом, квартира*/
      plpdf.printcell(p_h      => -1
                     ,p_w      => vc_address_width
                     ,p_txt    => pkg_contact_rep_utils.get_address_by_mask(v_address_id
                                                                           ,pkg_contact_rep_utils.gc_address_no_zip)
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_ln     => 0
                     ,p_fill   => 1);
      /*телефон*/
      plpdf.printcell(p_h      => -1
                     ,p_w      => vc_phone_width
                     ,p_txt    => get_phones(v_insuree_info.contact_id) /*pkg_contact.get_telephone(v_insuree_info.contact_id)*/
                     ,p_align  => 'C'
                     ,p_border => '1'
                     ,p_fill   => 1);
      plpdf.printcell(p_border => 'R', p_ln => 1);
      /*Подпись к адресу (строкой ниже)*/
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_space_width + vc_label_width
                     ,p_border   => 'L'
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular, par_size => vc_small_font_size);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_zip_width
                     ,p_txt      => 'индекс'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_address_width
                     ,p_txt      => 'город, улица, дом, квартира'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_h        => vс_small_line_h
                     ,p_w        => vc_phone_width
                     ,p_txt      => 'телефон'
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printcell(p_border => 'R', p_ln => 1);
      /*Являетя ли страхователь иностр. лицом*/
      set_font(par_style => gc_style_regular);
      plpdf.setcolor4filling(p_color => gc_color_black);
      plpdf.printcell(p_border => 'L', p_w => vc_space_width, p_h => -1);
      plpdf.printcell(p_h   => -1
                     ,p_txt => 'Является ли Страхователь Иностранным публичным должностным лицом?'
                     ,p_w   => 100);
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => 'D');
      plpdf.printcell(p_h => -1, p_w => 5, p_ln => 0);
      plpdf.printcell(p_h => -1, p_txt => 'ДА', p_w => 15, p_ln => 0);
      plpdf.drawrect(p_x     => plpdf.getcurrentx
                    ,p_y     => plpdf.getcurrenty + 1
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => 'DF');
      plpdf.printcell(p_h => -1, p_w => 5, p_ln => 0);
      plpdf.printcell(p_h => -1, p_txt => 'НЕТ', p_w => 15, p_ln => 0);
      plpdf.printcell(p_border => 'R', p_ln => 1);
      /*Двойная линия*/
      line;
    END print_insuree;
  
    /*СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ*/
    PROCEDURE print_period(par_type VARCHAR2) IS
      v_period_text  VARCHAR2(1000);
      v_period_text2 VARCHAR2(4000);
      vc_period_width CONSTANT NUMBER := 12;
      v_line_h NUMBER := 3;
    BEGIN
    
      IF v_pol_sum.product_brief IN ('CR92_5', 'CR92_6')
         AND par_type = vc_period_payment
      THEN
        set_font(par_size => 6);
        v_line_h := 2.5;
      END IF;
    
      CASE
        WHEN par_type = vc_period_payment THEN
          v_period_text  := ' дней, с 00:00 часов дня, следующего за датой оплаты Страхователем в полном объеме страховой премии. Датой оплаты страховой премии является дата поступления денежных средств на расчетный счет Страховщика.';
          v_period_text2 := 'Страхователь обязан оплатить страховую премию единовременно в полном объеме, в течение 5 (пяти) календарных дней с даты выдачи настоящего полиса путем безналичного перечисления денежных средств на расчетный счет Страховщика. Если страховая премия не оплачена в полном объеме и/или в указанный срок, то договор страхования считается незаключенным и не вступает в силу, настоящий полис аннулируется Страховщиком и перечисленные Страхователем денежные средства подлежат возврату в течение 30 (тридцати) календарных дней с даты отплаты.';
        WHEN par_type = vc_period_write_off THEN
          v_period_text := ' дней, с даты списания со счета Страхователя в Банке страхового взноса в полном объеме.';
        ELSE
          ex.raise(par_message => 'Не прописан СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
    
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.setcolor4filling(p_color => gc_color_light_grey);
      plpdf.printcell(p_h        => 3
                     ,p_txt      => gv_chapter_num || '. СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ:'
                     ,p_border   => 'LR'
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h => v_line_h * 2, p_w => 3, p_border => 'L');
      plpdf.printcell(p_h        => v_line_h
                     ,p_txt      => to_char(ROUND(v_pol_sum.end_date - v_pol_sum.start_date))
                     ,p_w        => vc_period_width
                     ,p_border   => '0'
                     ,p_ln       => 0
                     ,p_fill     => 1
                     ,p_align    => 'C'
                     ,p_clipping => 0);
      plpdf.printmultilinecell(p_h        => v_line_h
                              ,p_txt      => v_period_text
                              ,p_border   => 'R'
                              ,p_clipping => 0
                              ,p_ln       => 1);
      IF v_period_text2 IS NOT NULL
      THEN
        plpdf.printmultilinecell(p_h        => v_line_h
                                ,p_txt      => v_period_text2
                                ,p_border   => 'LR'
                                ,p_clipping => 0
                                ,p_ln       => 1);
      END IF;
      /*Двойная линия*/
      line;
    END print_period;
    PROCEDURE print_currency IS
      v_text VARCHAR2(500);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.setcolor4filling(p_color => gc_color_black);
      v_text := gv_chapter_num || '. ВАЛЮТА ДОГОВОРА:';
      plpdf.printcell(p_h      => -1
                     ,p_txt    => v_text
                     ,p_w      => plpdf.gettextwidth(v_text) + 5
                     ,p_border => 'LTB'
                     ,p_ln     => 0);
    
      FOR rec IN (SELECT f.name
                        ,nvl2(lead(1) over(ORDER BY f.fund_id DESC), 0, 1) is_last
                        ,decode(f.brief, v_pol_sum.fund_brief, 'DF', 'D') marked
                    FROM t_product       p
                        ,t_prod_currency pc
                        ,fund            f
                   WHERE p.product_id = pc.product_id
                     AND pc.currency_id = f.fund_id
                     AND p.product_id = v_pol_sum.product_id
                     AND f.brief = 'RUR' /*Печатаем только рубли*/
                   ORDER BY pc.is_default DESC NULLS LAST
                           ,f.fund_id     DESC)
      LOOP
        plpdf.drawrect(p_x     => plpdf.getcurrentx
                      ,p_y     => plpdf.getcurrenty + 1
                      ,p_w     => 2
                      ,p_h     => 2
                      ,p_style => rec.marked);
      
        plpdf.printcell(p_border => 'TB', p_w => 5, p_ln => 0);
      
        plpdf.printcell(p_h      => -1
                       ,p_w      => plpdf.gettextwidth(rec.name) + 5
                       ,p_txt    => rec.name
                       ,p_border => 'TB'
                       ,p_ln     => 0);
      END LOOP;
    
      plpdf.printcell(p_ln => 1, p_border => 'BTR');
      /*Двойная линия*/
      line;
    
    END print_currency;
  
    PROCEDURE print_territory IS
      v_text VARCHAR2(500);
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      v_text := gv_chapter_num || '. ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ:';
      plpdf.printcell(p_h      => -1
                     ,p_txt    => v_text
                     ,p_w      => plpdf.gettextwidth(v_text) + 5
                     ,p_border => 'LTB'
                     ,p_ln     => 0);
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => lower('ВЕСЬ МИР, 24 ЧАСА В СУТКИ')
                     ,p_border => 'RTB'
                     ,p_ln     => 1);
      /*Двойная линия*/
      line;
    END print_territory;
  
    /*Возвращает вид текста страхового случая*/
    FUNCTION define_programs RETURN VARCHAR2 IS
      v_result VARCHAR2(50);
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN
             ('CR92_1', 'CR92_1.1', 'CR92_2', 'CR92_2.1', 'CR92_7', 'CR92_8', 'CR92_9', 'CR92_10') THEN
          v_result := vc_ins_accident_except4;
        WHEN v_pol_sum.product_brief IN ('CR92_3', 'CR92_3.1') THEN
          IF v_pol_sum.start_date >= to_date('12.08.2013', 'dd.mm.rrrr')
          THEN
            /*Свежие полисы с надписью "дожитие до потери работы"*/
            v_result := vc_ins_accident_except3_job;
          ELSE
            v_result := vc_ins_accident_except3;
          END IF;
        WHEN v_pol_sum.product_brief IN ('CR92_4', 'CR92_4.1', 'CR92_5', 'CR92_5.1') THEN
          v_result := vc_ins_accident_except34;
        WHEN v_pol_sum.product_brief IN ('CR92_6') THEN
          v_result := vc_ins_accident_huge;
        ELSE
          ex.raise(par_message => 'Не прописан тип страхового случая для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
      RETURN v_result;
    END define_programs;
  
    PROCEDURE print_programs(par_type VARCHAR2) IS
      v_total_fee          p_cover.fee%TYPE;
      vc_space_width       NUMBER := 2; --щирина отступа
      vc_program_width     NUMBER := 65; --ширина страх. рисков/программ
      vc_ins_amount_width  NUMBER := 27; --ширина страх. суммы
      vc_ins_premium_width NUMBER := 29; --ширина страх. премии
      vc_payment_width     NUMBER := 65; --ширина размера выплаты
      v_x                  NUMBER;
      v_y                  NUMBER;
      v_new_y              NUMBER;
      v_line_h             NUMBER := 2.5; --высота строки
      v_ins_accident_text  VARCHAR2(4000); --текст страхового случая
      /*Печатает правильный текст "Размера выплаты" в зависимости от даты договора*/
      FUNCTION get_note_by_date(par_product_line_id t_product_line.id%TYPE) RETURN VARCHAR2 IS
        v_result VARCHAR2(4000);
      BEGIN
        FOR rec_line IN (SELECT t.public_description description
                               ,t.note
                           FROM t_product_line t
                          WHERE t.id = par_product_line_id)
        LOOP
          IF v_pol_sum.start_date >= to_date('12.08.2013', 'dd.mm.rrrr')
          THEN
            IF rec_line.description LIKE '%Дожитие Страхователя%'
            THEN
              v_result := 'При наступлении страхового случая по настоящей программе каждая страховая выплата рассчитывается в размере трех страховых сумм, но не более 12 (двенадцати) страховых сумм по одному страховому случаю и не более 18 (восемнадцати) страховых сумм за весь срок действия договора страхования.';
            ELSE
              v_result := rec_line.note;
            END IF;
          ELSE
            v_result := rec_line.note;
          END IF;
        END LOOP;
        RETURN v_result;
      END get_note_by_date;
    
      /*Печатает правильный текст рисков в зависимости от даты договора и продукта
      (замечание Рустама) 28.07.2014
      */
      FUNCTION get_description_by_date(par_product_line_id t_product_line.id%TYPE) RETURN VARCHAR2 IS
        v_result VARCHAR2(4000);
      BEGIN
        FOR rec_line IN (SELECT t.public_description description
                               ,t.note
                           FROM t_product_line t
                          WHERE t.id = par_product_line_id)
        LOOP
          IF v_pol_sum.start_date >= to_date('1.02.2012', 'dd.mm.rrrr')
             AND rec_line.description LIKE '%Инвалидность 1 и 2 группы%'
             AND v_pol_sum.product_brief IN ('CR92_1', 'CR92_2')
          THEN
            CASE v_pol_sum.product_brief
              WHEN 'CR92_1' THEN
                v_result := 'Инвалидность 1 и 2 группы в результате несчастного случая или болезни';
              WHEN 'CR92_2' THEN
                v_result := 'Инвалидность 1 и 2 группы в результате несчастного случая';
              ELSE
                v_result := rec_line.description;
            END CASE;
          ELSE
            v_result := rec_line.description;
          END IF;
        END LOOP;
        RETURN v_result;
      END get_description_by_date;
    
    BEGIN
    
      CASE par_type
        WHEN vc_ins_accident_except4 THEN
          v_ins_accident_text := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4 Полисных условий.';
        WHEN vc_ins_accident_except3 THEN
          v_ins_accident_text := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 3 Приложения № 1 к  Полисным условиям.';
        WHEN vc_ins_accident_except3_job THEN
          v_ins_accident_text := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 3 Полисных условий по программе "Дожитие Застрахованного до потери постоянной работы по независящим от него условиям".';
        WHEN vc_ins_accident_except34 THEN
          v_ins_accident_text := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4 Полисных условий и в Разделе 3 Приложения № 1 к Полисным условиям.';
        WHEN vc_ins_accident_huge THEN
          v_ins_accident_text := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4 Полисных условий и в Разделе 3 Приложения № 1 к Полисным условиям. ' ||
                                 'Страховая премия рассчитывается за весь срок действия Договора страхования и равняется произведению утвержденного Страховщиком Страхового тарифа и Страховой суммы, умноженные на количество месяцев Срока страхования. ' ||
                                 '*Любая причина – событие (болезнь или несчастный случай), возникшее в течение действия договора, а также  самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.                                                                                                                 При уплате страховой премии в рассрочку неуплата страхователем всей суммы очередного страхового взноса в установленный договором срок его уплаты означает для сторон договора страхования выраженное страхователем волеизъявление об отказе от договора страхования с 00 часов 00 минут дня, следующего за днем окончания установленного договором срока уплаты очередного страхового взноса, который не был уплачен в указанный срок. Руководствуясь п. 1 ст. 452 ГК РФ, стороны договорились, что отдельное соглашение о расторжении договора страхования в данном случае сторонами не составляется';
        ELSE
          ex.raise('Не корректный тип страхового случая');
      END CASE;
    
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h      => -1
                     ,p_txt    => gv_chapter_num ||
                                  '. СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ (ВЗНОСЫ):'
                     ,p_border => 'LRT'
                     ,p_ln     => 1);
      set_font(par_style => gc_style_regular);
      delete_row_print_cache;
      gv_widths(1) := vc_space_width;
      gv_widths(2) := vc_program_width;
      gv_widths(3) := vc_ins_amount_width;
      gv_widths(4) := vc_ins_premium_width;
      gv_widths(5) := vc_payment_width;
      gv_widths(6) := vc_space_width;
    
      gv_aligns(1) := NULL;
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
      gv_aligns(5) := 'C';
      gv_aligns(6) := NULL;
    
      gv_styles(1) := NULL;
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
      gv_styles(4) := 'B';
      gv_styles(5) := 'B';
      gv_styles(6) := NULL;
    
      gv_borders(1) := 'LR';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
      gv_borders(4) := '1';
      gv_borders(5) := '1';
      gv_borders(6) := 'LR';
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховые риски';
      gv_datas(3) := 'Страховая сумма';
      gv_datas(4) := 'Страховая премия (взнос)';
      gv_datas(5) := 'Размер выплаты';
      gv_datas(6) := NULL;
    
      row_print2;
    
      gv_borders(1) := 'LR';
      gv_borders(2) := '1';
      gv_borders(3) := '0';
      gv_borders(4) := '0';
      gv_borders(5) := '1';
      gv_borders(6) := 'LR';
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_styles(4) := NULL;
      gv_styles(5) := NULL;
      gv_styles(6) := NULL;
    
      gv_aligns(2) := 'L';
      gv_aligns(5) := 'J';
    
      v_x := plpdf.getcurrentx;
      v_y := plpdf.getcurrenty;
      FOR rec_product_lines IN (SELECT pl.description
                                      ,pc.ins_amount
                                      ,pc.fee
                                      ,pl.note
                                      ,row_number() over(ORDER BY plt.sort_order) rn
                                      ,pl.id
                                  FROM p_cover             pc
                                      ,as_asset            aa
                                      ,t_prod_line_option  plo
                                      ,t_product_line      pl
                                      ,t_product_line_type plt
                                 WHERE aa.p_policy_id = v_policy_id
                                   AND aa.as_asset_id = pc.as_asset_id
                                   AND pc.t_prod_line_option_id = plo.id
                                   AND plo.product_line_id = pl.id
                                   AND pl.product_line_type_id = plt.product_line_type_id
                                   AND plo.brief != 'NonInsuranceClaims' /*Исключаем нестраховые убытки*/
                                 ORDER BY plt.sort_order
                                         ,pl.sort_order)
      LOOP
        gv_datas(1) := NULL;
        gv_datas(2) := gv_chapter_num || '.' || rec_product_lines.rn || ' ' ||
                       get_description_by_date(rec_product_lines.id);
        gv_datas(3) := NULL;
        gv_datas(4) := NULL;
        gv_datas(5) := get_note_by_date(rec_product_lines.id);
        gv_datas(6) := NULL;
      
        row_print2(par_h => v_line_h);
      
      END LOOP;
    
      SELECT nvl(SUM(pc.fee), 0)
        INTO v_total_fee
        FROM p_cover  pc
            ,as_asset aa
       WHERE aa.p_policy_id = v_policy_id
         AND aa.as_asset_id = pc.as_asset_id;
      v_new_y := plpdf.getcurrenty;
      set_font(par_style => gc_style_bold);
      /*Переводим курсор на нужную позицию для печати объединенной ячейки*/
      plpdf.setcurrentxy(p_x => vc_space_width + vc_program_width + plpdf.getleftmargin, p_y => v_y);
      plpdf.setcolor4filling(p_color => gc_color_light_grey);
      plpdf.printmultilinecell(p_w      => vc_ins_amount_width
                              ,p_h      => v_new_y - v_y
                              ,p_txt    => v_pol_sum.ins_amount
                              ,p_border => 1
                              ,p_align  => 'C'
                              ,p_ln     => 0
                              ,p_fill   => 1);
      plpdf.printmultilinecell(p_w      => vc_ins_premium_width
                              ,p_h      => v_new_y - v_y
                              ,p_txt    => v_total_fee
                              ,p_border => 1
                              ,p_align  => 'C'
                              ,p_ln     => 1
                              ,p_fill   => 1);
    
      delete_row_print_cache;
    
      /*Большой текст страхового случая печатаем мелко, т.к. не помещается на 1 старницу*/
      IF par_type = vc_ins_accident_huge
      THEN
        set_font(par_size => 5.5);
        v_line_h := 2.5;
      ELSE
        set_font(par_style => gc_style_regular);
      END IF;
      plpdf.printmultilinecell(p_h        => v_line_h
                              ,p_txt      => v_ins_accident_text
                              ,p_border   => 'LR'
                              ,p_ln       => 1
                              ,p_clipping => 0);
      /*Пустая строка*/
      set_font(par_style => gc_style_regular);
      v_line_h := 3;
      plpdf.printcell(p_h => 2, p_border => 'LR', p_ln => 1, p_clipping => 0);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h        => v_line_h
                     ,p_txt      => 'ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ:'
                     ,p_border   => 'LR'
                     ,p_ln       => 1
                     ,p_clipping => 0);
      plpdf.setcolor4filling(p_color => gc_color_black);
      plpdf.drawrect(p_x     => plpdf.getcurrentx + vc_space_width
                    ,p_y     => plpdf.getcurrenty + 0.5
                    ,p_w     => 2
                    ,p_h     => 2
                    ,p_style => 'DF');
    
      plpdf.printcell(p_h => v_line_h, p_w => vc_space_width + 3, p_border => 'L', p_clipping => 0);
      plpdf.printcell(p_h        => v_line_h
                     ,p_w        => plpdf.gettextwidth(v_pol_sum.payment_terms || ':') + 2
                     ,p_txt      => lower(v_pol_sum.payment_terms) || ':'
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular);
      plpdf.printcell(p_h        => v_line_h
                     ,p_txt      => 'оплата страховой премии производится один раз'
                     ,p_border   => 'R'
                     ,p_ln       => 1
                     ,p_clipping => 0);
      /*Двойная линия*/
      line;
    END print_programs;
  
    /*Определить тип печати текста выгодоприобретателя по БРИФ*/
    FUNCTION define_beneficiaries RETURN VARCHAR2 IS
      v_result VARCHAR2(50);
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN ('CR92_1'
                                        ,'CR92_1.1'
                                        ,'CR92_2'
                                        ,'CR92_2.1'
                                        ,'CR92_4'
                                        ,'CR92_4.1'
                                        ,'CR92_5'
                                        ,'CR92_5.1'
                                        ,'CR92_6'
                                        ,'CR92_7'
                                        ,'CR92_8'
                                        ,'CR92_9'
                                        ,'CR92_10') THEN
          v_result := vc_benif_law;
        WHEN v_pol_sum.product_brief IN ('CR92_3', 'CR92_3.1') THEN
          v_result := vc_benif_insuree;
        ELSE
          ex.raise(par_message => 'Не прописан ВЫГОДОПРИОБРЕТАТЕЛЬ для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
      RETURN v_result;
    END define_beneficiaries;
  
    /*Определяем подписанта*/
    FUNCTION define_signer RETURN VARCHAR2 IS
      v_result VARCHAR2(100);
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN
             ('CR92_1', 'CR92_1.1', 'CR92_2', 'CR92_2.1', 'CR92_3', 'CR92_3.1') THEN
          v_result := vc_sign_director; /*Киселев*/
        WHEN v_pol_sum.product_brief IN
             ('CR92_4', 'CR92_5', 'CR92_6', 'CR92_7', 'CR92_8', 'CR92_9', 'CR92_10') THEN
          v_result := vc_sign_representative; /*Голованов*/
        ELSE
          ex.raise(par_message => 'Не прописан подписант для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
    
      RETURN v_result;
    END;
  
    /*Вывод печати*/
    PROCEDURE print_seal IS
      v_signer typ_signer;
    
      v_adjust_seal_x NUMBER := 50; --Сдвиг координат для рисования штампа печати на разделе ОСОБЫЕ УСЛОВИЯ
      vc_image_h CONSTANT NUMBER := 50;
      vc_image_w CONSTANT NUMBER := 45;
      v_adjust_seal_y NUMBER := plpdf.getpageheight - plpdf.getbottommargin - plpdf.gettopmargin -
                                vc_image_h + 5;
    
    BEGIN
      /*Корректировка положения печати для разных ДС*/
      CASE
        WHEN v_pol_sum.product_brief IN ('CR92_3', 'CR92_2.1')
             AND par_period_type = '<#P_WRITE_OFF>' /*Поднимаем печать для "С даты списния" (т.к. мало текста)*/
         THEN
          v_adjust_seal_y := v_adjust_seal_y - 15;
        ELSE
          NULL;
      END CASE;
    
      IF v_pol_sum.policy_status_desc NOT IN
         ('Ожидает подтверждения из B2B', 'Проект')
      THEN
        IF define_signer = vc_sign_director
        
        THEN
          v_signer := get_signer('pkg_rep_plpdf.rep_hkf_credit_pay', 'Ген.дир');
        ELSE
          v_signer := get_signer('pkg_rep_plpdf.rep_hkf_credit_pay', 'ОПЕРУ');
        END IF;
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - v_adjust_seal_x
                      ,p_y    => v_adjust_seal_y
                      ,p_w    => vc_image_w
                      ,p_h    => vc_image_h);
      END IF;
    END print_seal;
  
    PROCEDURE print_beneficiaries(par_type VARCHAR2) IS
      v_benif_array        tt_one_col;
      v_beneficiaries_text VARCHAR2(1000);
      vc_line_h CONSTANT NUMBER := 3; --высота строки
    BEGIN
      CASE
        WHEN par_type = vc_benif_law THEN
          v_beneficiaries_text := '.1. Выгодоприобретателем по настоящему договору является Застрахованный, в случае смерти Застрахованного Выгодоприобретателями признаются наследники Застрахованного в соответствии с действующим законодательством.';
        WHEN par_type = vc_benif_insuree THEN
          v_beneficiaries_text := '.1. Выгодоприобретателем по настоящему договору является Застрахованный.';
        ELSE
          ex.raise(par_message => 'Не прописан СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h        => vc_line_h
                     ,p_txt      => gv_chapter_num || '. ВЫГОДОПРИОБРЕТАТЕЛЬ:'
                     ,p_border   => 'LR'
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      set_font(par_style => gc_style_regular);
    
      plpdf.printmultilinecell(p_h        => vc_line_h
                              ,p_txt      => gv_chapter_num || v_beneficiaries_text
                              ,p_border   => 'LBR'
                              ,p_ln       => 1
                              ,p_clipping => 0);
      /*Двойная линия*/
      line;
    END print_beneficiaries;
  
    /*ДЕЙСТВИЯ ПРИ НАСТУПЛЕНИИ СТРАХОВОГО СЛУЧАЯ*/
    PROCEDURE print_insured_accident_actions IS
      vc_line_h CONSTANT NUMBER := 3; --высота строки
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h        => vc_line_h
                     ,p_txt      => gv_chapter_num || '. ДЕЙСТВИЯ ПРИ НАСТУПЛЕНИИ СТРАХОВОГО СЛУЧАЯ:'
                     ,p_border   => 'LR'
                     ,p_ln       => 1
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular);
    
      plpdf.printmultilinecell(p_h        => vc_line_h
                              ,p_txt      => 'При наступлении страхового случая Застрахованный (наследники Застрахованного) должны известить' ||
                                             ' Страховщика о наступлении события, имеющего признаки страхового ' ||
                                             'случая, в течение 35 (тридцати пяти) суток, начиная со дня, когда любому из указанных лиц стало известно о наступлении события,' ||
                                             ' имеющего признаки страхового случая, любым доступным способом, позволяющим объективно зафиксировать факт сообщения.'
                              ,p_clipping => 0
                              ,p_border   => 'LBR'
                              ,p_ln       => 1);
      /*Двойная линия*/
      line;
    END print_insured_accident_actions;
  
    /*Возвращает вид текста документов на выплату*/
    FUNCTION define_docs RETURN VARCHAR2 IS
      v_result VARCHAR2(50);
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN ('CR92_1', 'CR92_1.1', 'CR92_2', 'CR92_2.1') THEN
          v_result := vc_doc_death_disability;
        WHEN v_pol_sum.product_brief IN ('CR92_3', 'CR92_3.1') THEN
          IF v_pol_sum.start_date >= to_date('12.08.2013', 'dd.mm.rrrr')
          THEN
            v_result := vc_doc_job_loss_short;
          ELSE
            v_result := vc_doc_job_loss;
          END IF;
        WHEN v_pol_sum.product_brief IN ('CR92_4', 'CR92_4.1', 'CR92_5', 'CR92_5.1') THEN
          v_result := vc_doc_death_disability_job;
        WHEN v_pol_sum.product_brief IN ('CR92_6') THEN
          v_result := vc_doc_job_loss_long;
        WHEN v_pol_sum.product_brief IN ('CR92_7', 'CR92_9') THEN
          v_result := vc_doc_active;
        WHEN v_pol_sum.product_brief IN ('CR92_8', 'CR92_10') THEN
          v_result := vc_doc_combo;
        ELSE
          ex.raise(par_message => 'Не прописан тип документов на выплату для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
      RETURN v_result;
    END define_docs;
  
    /*ДОКУМЕНТЫ, НЕОБХОДИМЫЕ ДЛЯ СТРАХОВОЙ ВЫПЛАТЫ*/
    PROCEDURE print_insurance_payout_docs(par_type VARCHAR2) IS
      v_payout_docs_text1_italic VARCHAR2(1000);
      v_payout_docs_text1_after  VARCHAR2(1000);
      v_payout_docs_text1        VARCHAR2(4000);
      v_payout_docs_text2_italic VARCHAR2(1000);
      v_payout_docs_text2_after  VARCHAR2(1000);
      v_payout_docs_text2        VARCHAR2(4000);
      v_payout_docs_text3_italic VARCHAR2(1000);
      v_payout_docs_text3_after  VARCHAR2(1000);
      v_payout_docs_text3        VARCHAR2(4000);
      v_line_h                   NUMBER := 3; --высота строки
    BEGIN
      CASE par_type
        WHEN vc_doc_death_disability THEN
          v_payout_docs_text1_italic := 'При установлении инвалидности Застрахованного:';
          v_payout_docs_text1_after  := 'оригинал страхового полиса и всех дополнительных соглашений к нему; заявление на';
          v_payout_docs_text1        := 'страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Застрахованного; документ, удостоверяющий личность получателя страховой выплаты; оригинал справки органа МСЭ, если применимо, об установлении группы инвалидности или его нотариально заверенную копию; оригинал направления на МСЭ, если применимо, выданный медицинским учреждением (копия, заверенная выдавшим учреждением, либо нотариально заверенная копия); оригиналы или заверенные лечебно-профилактическим или медицинским учреждением документы медицинского учреждения (выписка из истории болезни, амбулаторной карты Застрахованного, карты из органа МСЭ, рентгенологические снимки и т.п.), подтверждающие факт наступления страхового случая и степень ущерба для здоровья Застрахованного; иные документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1 и т.д.).';
          v_payout_docs_text2_italic := 'При наступлении смерти Застрахованного:';
          v_payout_docs_text2_after  := 'оригинал страхового полиса и всех дополнительных соглашений к нему; нотариально';
          v_payout_docs_text2        := 'заверенное заявление на страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Выгодоприобретателя; документ, удостоверяющий личность получателя страховой выплаты; нотариально заверенную копию свидетельства о смерти Застрахованного; нотариально заверенную копию справки о смерти Застрахованного; копию медицинского заключения о причине смерти, заверенную учреждением его выдавшим, либо нотариально заверенную копию; иные документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1 и т.д.).';
        WHEN vc_doc_death_disability_job THEN
          v_payout_docs_text1_italic := 'При установлении инвалидности Застрахованного:';
          v_payout_docs_text1_after  := 'оригинал страхового полиса и всех дополнительных соглашений к нему; заявление на';
          v_payout_docs_text1        := 'страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Застрахованного; документ, удостоверяющий личность получателя страховой выплаты; оригинал справки органа МСЭ, если применимо, об установлении группы инвалидности или его нотариально заверенную копию; оригинал направления на МСЭ, если применимо, выданный медицинским учреждением (копия, заверенная выдавшим учреждением, либо нотариально заверенная копия); оригиналы или заверенные лечебно-профилактическим или медицинским учреждением документы медицинского учреждения (выписка из истории болезни, амбулаторной карты Застрахованного, карты из органа МСЭ, рентгенологические снимки и т.п.), подтверждающие факт наступления страхового случая и степень ущерба для здоровья Застрахованного; иные документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1 и т.д.).';
        
          v_payout_docs_text2_italic := 'При наступлении смерти Застрахованного:';
          v_payout_docs_text2_after  := 'оригинал страхового полиса и всех дополнительных соглашений к нему; нотариально';
          v_payout_docs_text2        := 'заверенное заявление на страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Выгодоприобретателя; документ, удостоверяющий личность получателя страховой выплаты; нотариально заверенную копию свидетельства о смерти Застрахованного; нотариально заверенную копию справки о смерти Застрахованного; копию медицинского заключения о причине смерти, заверенную учреждением его выдавшим, либо нотариально заверенную копию; иные документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1 и т.д.).';
        
          v_payout_docs_text3_italic := 'При наступление страхового случая по риску "Дожитие Застрахованного до потери постоянной работы по независящим от него причинам":';
          v_payout_docs_text3_after  := '';
          v_payout_docs_text3        := 'заявление на страховую выплату, установленной Страховщиком формы; документ, удостоверяющий личность получателя страховой выплаты; оригинал, либо копия трудовой книжки, заверенная нотариально, с записью, подтверждающей увольнение Застрахованного по основаниям, предусмотренным п.1 ч. 1 ст.81 ТК РФ, п.2 ч. 1 ст.81 ТК РФ,  п.4 части 1. ст.81  ТК РФ, п.2 части 1 ст.83 ТК РФ, п.9 части 1 ст.77 ТК РФ; документ, содержащий информацию о размере платежей по кредитному договору; иные документы по запросу Страховщика.';
        
        WHEN vc_doc_job_loss THEN
          v_payout_docs_text1_italic := NULL;
          v_payout_docs_text1_after  := NULL;
          v_payout_docs_text1        := 'Заявление на страховую выплату, установленной Страховщиком формы; документ, удостоверяющий личность получателя страховой выплаты; оригинал, либо копия трудовой книжки, заверенная нотариально, с записью, подтверждающей увольнение Застрахованного по основаниям, предусмотренным п.1 ч. 1 ст.81 ТК РФ и п.2 ч. 1 ст.81 ТК РФ; оригинал справки о доходах за последние 12 месяцев до даты увольнения по форме 2-НДФЛ или детальная выписка с зарплатного счета Застрахованного, подтверждающая размер дохода по постоянному месту работы за последние 12 месяцев; оригинал, либо заверенная работодателем или нотариально копия уведомления работодателя с последнего постоянного места работы о намерении расторгнуть трудовой договор с Застрахованным, с отметкой о получении Застрахованным данного уведомления; справка из государственной службы занятости населения с подтверждением, что Застрахованный встал там на учет;выписка из банка со счета Застрахованного о перечислении ему государственной службой занятости населения пособия по безработице; документ из государственной службы занятости населения, подтверждающий период, за который произведена выплата пособия по безработице; иные документы по запросу Страховщика.';
        
        WHEN vc_doc_job_loss_short THEN
          v_payout_docs_text1_italic := NULL;
          v_payout_docs_text1_after  := NULL;
          v_payout_docs_text1        := 'Заявление на страховую выплату, установленной Страховщиком формы; документ, удостоверяющий личность получателя страховой выплаты; оригинал, либо копия трудовой книжки, заверенная нотариально, с записью, подтверждающей увольнение Застрахованного по основаниям, предусмотренным п.1 ч. 1 ст.81 ТК РФ, п.2 ч. 1 ст.81 ТК РФ,  п.4 части 1. ст.81  ТК РФ, п.2 части 1 ст.83 ТК РФ, п.9 части 1 ст.77 ТК РФ; документ, содержащий информацию о размере платежей по кредитному договору; иные документы по запросу Страховщика.';
        WHEN vc_doc_job_loss_long THEN
          v_payout_docs_text1_italic := NULL;
          v_payout_docs_text1_after  := NULL;
          v_payout_docs_text1        := 'При наступление страхового случая по риску "Дожитие Застрахованного до потери постоянной работы по независящим от него причинам": заявление на страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов получателя страховой выплаты; документ, удостоверяющий личность получателя страховой выплаты;оригинал либо копия трудовой книжки, заверенная нотариально, с записью, подтверждающей увольнение Застрахованного по основаниям, предусмотренным п.1 ч. 1 ст.81 ТК РФ, п.2 ч. 1 ст.81 ТК РФ, п.4 ч.1 ст.81 ТК РФ, п.2 части 1 ст.83 ТК РФ, п.9 части 1 ст.77 ТК РФ;  копию кредитныйого договора и документ, содержащий информацию о размере платежей по кредитному договору;  документ из государственной службы занятости населения, подтверждающий выплату пособия по безработице.';
        
          v_payout_docs_text2_italic := NULL;
          v_payout_docs_text2_after  := NULL;
          v_payout_docs_text2        := 'При наступлении смерти Застрахованного:  нотариально заверенное заявление на страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Выгодоприобретателя; документ, удостоверяющий личность получателя страховой выплаты; нотариально заверенную копию справки о смерти Застрахованного;нотариально заверенную копию свидетельства о смерти Застрахованного;копию медицинского свидетельства о смерти, заверенную учреждением его выдавшим;копию акта судебно-медицинской экспертизы/акта патологоанатомического исследования заверенную учреждением его выдавшим;заверенную надлежащим образом копию справки о ДТП, с указанием участников;заверенную надлежащим образом копию карты амбулаторного больного;заверенную надлежащим образом копию карты стационарного больного;нотариально заверенную копию свидетельства о праве на наследство (для наследников);заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, документы из правоохранительных органов, копию постановления суда;заверенную надлежащим образом копию акта о несчастном случае на производстве по форме Н-1.';
        WHEN vc_doc_active THEN
          v_payout_docs_text1_italic := 'При установлении инвалидности Застрахованного:';
          v_payout_docs_text1_after  := 'копию страхового полиса и всех дополнительных соглашений к нему; заявление на';
          v_payout_docs_text1        := 'страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Застрахованного; документ, удостоверяющий личность получателя страховой выплаты; оригинал справки органа МСЭ, если применимо, об установлении группы инвалидности или его нотариально заверенную копию; оригинал направления на МСЭ, если применимо, выданный медицинским учреждением (копия, заверенная выдавшим учреждением, либо нотариально заверенная копия); оригиналы или заверенные лечебно-профилактическим или медицинским учреждением документы медицинского учреждения (выписка из истории болезни, амбулаторной карты Застрахованного, карты из органа МСЭ, рентгенологические снимки и т.п.), подтверждающие факт наступления страхового случая и степень ущерба для здоровья Застрахованного, листок временной нетрудоспособности; заверенную копию акта освидетельствования в МСЭ; заверенную копию индивидуальной программы реабилитации инвалида; оригинал письма из банка с указанием суммы ссудной задолженности на дату наступления страхового случая;  копию кредитного договора и первичный график платежей по кредиту; документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1 , заверенная копия справки о ДТП).';
        
          v_payout_docs_text2_italic := 'При наступлении смерти Застрахованного:';
          v_payout_docs_text2_after  := 'оригинал страхового полиса и всех дополнительных соглашений к нему; нотариально';
          v_payout_docs_text2        := 'заверенное заявление на страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Выгодоприобретателя; документ, удостоверяющий личность получателя страховой выплаты; нотариально заверенную копию свидетельства о смерти Застрахованного; нотариально заверенную копию справки о смерти Застрахованного; копию медицинского заключения о причине смерти, заверенную учреждением его выдавшим, либо нотариально заверенную копию; заверенную лечебным учреждением копию карты стационарного больного/истории болезни; заверенную лечебным учреждением копию карты амбулаторного больного; заверенную учреждением копию акта судебно-медицинского исследования/ протокол патологоанатомического  вскрытия/выписку из акта судебно-медицинского исследования; копию кредитного договора и первичный график платежей по кредиту; оригинал письма из банка с указанием суммы текущей ссудной задолженности  на дату наступления страхового случая;  документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1, заверенная копия справки о ДТП).';
        WHEN vc_doc_combo THEN
          v_payout_docs_text1_italic := 'При установлении инвалидности Застрахованного:';
          v_payout_docs_text1_after  := 'копию страхового полиса и всех дополнительных соглашений к нему; заявление на';
          v_payout_docs_text1        := 'страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Застрахованного; документ, удостоверяющий личность получателя страховой выплаты; оригинал справки органа МСЭ, если применимо, об установлении группы инвалидности или его нотариально заверенную копию; оригинал направления на МСЭ, если применимо, выданный медицинским учреждением (копия, заверенная выдавшим учреждением, либо нотариально заверенная копия); оригиналы или заверенные лечебно-профилактическим или медицинским учреждением документы медицинского учреждения (выписка из истории болезни, амбулаторной карты Застрахованного, карты из органа МСЭ, рентгенологические снимки и т.п.), подтверждающие факт наступления страхового случая и степень ущерба для здоровья Застрахованного, листок временной нетрудоспособности; заверенную копию акта освидетельствования в МСЭ; заверенную копию индивидуальной программы реабилитации инвалида; оригинал письма из банка с указанием суммы ссудной задолженности на дату наступления страхового случая;  копию кредитного договора и первичный график платежей по кредиту; документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1 , заверенная копия справки о ДТП).';
        
          v_payout_docs_text2_italic := 'При наступлении смерти Застрахованного:';
          v_payout_docs_text2_after  := 'оригинал страхового полиса и всех дополнительных соглашений к нему; нотариально';
          v_payout_docs_text2        := 'заверенное заявление на страховую выплату, установленной Страховщиком формы, с указанием полных банковских реквизитов Выгодоприобретателя; документ, удостоверяющий личность получателя страховой выплаты; нотариально заверенную копию свидетельства о смерти Застрахованного; нотариально заверенную копию справки о смерти Застрахованного; копию медицинского заключения о причине смерти, заверенную учреждением его выдавшим, либо нотариально заверенную копию; заверенную лечебным учреждением копию карты стационарного больного/истории болезни; заверенную лечебным учреждением копию карты амбулаторного больного; заверенную учреждением копию акта судебно-медицинского исследования/ протокол патологоанатомического  вскрытия/выписку из акта судебно-медицинского исследования; копию кредитного договора и первичный график платежей по кредиту; оригинал письма из банка с указанием суммы текущей ссудной задолженности  на дату наступления страхового случая; документы, необходимые для установления причин и характера события, имеющего признаки страхового случая (заверенные надлежащим образом копии постановлений о возбуждении уголовного дела, об отказе в возбуждении уголовного дела, о прекращении уголовного дела, приостановлении предварительного следствия по делу, иные документы из правоохранительных органов, копию постановления суда, акт о несчастном случае на производстве по форме Н-1, заверенная копия справки о ДТП).';
        
        ELSE
          ex.raise(par_message => 'Не прописан ДОКУМЕНТЫ, НЕОБХОДИМЫЕ ДЛЯ СТРАХОВОЙ ВЫПЛАТЫ для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
    
      /*Вывод печати*/
      print_seal;
    
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h        => v_line_h
                     ,p_txt      => gv_chapter_num ||
                                    '. ДОКУМЕНТЫ, НЕОБХОДИМЫЕ ДЛЯ СТРАХОВОЙ ВЫПЛАТЫ:'
                     ,p_border   => 'LR'
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      IF v_pol_sum.product_brief IN ('CR92_5', 'CR92_6')
      THEN
        set_font(par_size => 6);
        v_line_h := 2.5;
      END IF;
      /*----------------------Часть 1-----------------------*/
      /*Курсив*/
      IF v_payout_docs_text1_italic IS NOT NULL
      THEN
        set_font(par_style => gc_style_italic);
        plpdf.printcell(p_h        => v_line_h
                       ,p_w        => plpdf.gettextwidth(v_payout_docs_text1_italic) + 2
                       ,p_txt      => v_payout_docs_text1_italic
                       ,p_border   => 'L'
                       ,p_clipping => 0);
      END IF;
      IF v_payout_docs_text1_after IS NOT NULL
      THEN
        set_font(par_style => gc_style_regular);
        /*После курсива продолжение строки*/
        plpdf.printcell(p_h        => v_line_h
                       ,p_txt      => v_payout_docs_text1_after
                       ,p_border   => 'R'
                       ,p_align    => 'J'
                       ,p_ln       => 1
                       ,p_clipping => 0);
      END IF;
      IF v_payout_docs_text1 IS NOT NULL
      THEN
        set_font(par_style => gc_style_regular);
        /*весь остальной текст*/
        plpdf.printmultilinecell(p_h        => v_line_h
                                ,p_txt      => v_payout_docs_text1
                                ,p_border   => 'LR'
                                ,p_ln       => 1
                                ,p_clipping => 0);
      END IF;
      /*----------------------Часть 2-----------------------*/
      /*Курсив*/
      IF v_payout_docs_text2_italic IS NOT NULL
      THEN
        set_font(par_style => gc_style_italic);
        plpdf.printcell(p_h        => v_line_h
                       ,p_w        => plpdf.gettextwidth(v_payout_docs_text2_italic) + 2
                       ,p_txt      => v_payout_docs_text2_italic
                       ,p_border   => 'L'
                       ,p_clipping => 0);
      END IF;
      IF v_payout_docs_text2_after IS NOT NULL
      THEN
        set_font(par_style => gc_style_regular);
        /*После курсива продолжение строки*/
        plpdf.printcell(p_h        => v_line_h
                       ,p_txt      => v_payout_docs_text2_after
                       ,p_border   => 'R'
                       ,p_align    => 'J'
                       ,p_ln       => 1
                       ,p_clipping => 0);
      END IF;
      IF v_payout_docs_text2 IS NOT NULL
      THEN
        set_font(par_style => gc_style_regular);
        /*весь остальной текст*/
        plpdf.printmultilinecell(p_h        => v_line_h
                                ,p_txt      => v_payout_docs_text2
                                ,p_border   => 'LR'
                                ,p_ln       => 1
                                ,p_clipping => 0);
      END IF;
      /*----------------------Часть 3-----------------------*/
      /*Печатаем 3 раздел только, если он есть*/
      IF v_payout_docs_text3_italic IS NOT NULL
      THEN
        /*Курсив*/
        set_font(par_style => gc_style_italic);
        plpdf.printcell(p_h        => v_line_h
                       ,p_w        => plpdf.gettextwidth(v_payout_docs_text3_italic) + 2
                       ,p_txt      => v_payout_docs_text3_italic
                       ,p_border   => 'L'
                       ,p_clipping => 0);
        set_font(par_style => gc_style_regular);
        /*После курсива продолжение строки*/
        plpdf.printcell(p_h        => v_line_h
                       ,p_txt      => v_payout_docs_text3_after
                       ,p_border   => 'R'
                       ,p_align    => 'J'
                       ,p_ln       => 1
                       ,p_clipping => 0);
        /*весь остальной текст*/
        plpdf.printmultilinecell(p_h        => v_line_h
                                ,p_txt      => v_payout_docs_text3
                                ,p_border   => 'LBR'
                                ,p_ln       => 1
                                ,p_clipping => 0);
      END IF;
      /*Двойная линия*/
      line;
    END print_insurance_payout_docs;
    /*Определить тип печати "Порядок выплат"*/
    FUNCTION define_payment_order RETURN VARCHAR2 IS
      v_result VARCHAR2(50);
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN
             ('CR92_1', 'CR92_1.1', 'CR92_2', 'CR92_2.1', 'CR92_5', 'CR92_5.1') THEN
          IF v_pol_sum.start_date >= to_date('12.08.2013', 'dd.mm.rrrr')
          THEN
            /*Свежие полисы с другим порядком выплат*/
            v_result := vc_order_hkf_1;
          ELSE
            v_result := vc_order_benif_many;
          END IF;
        
        WHEN v_pol_sum.product_brief IN ('CR92_3', 'CR92_3.1') /*Потеря работы - выгодоприобретатель один*/
         THEN
          IF v_pol_sum.start_date >= to_date('12.08.2013', 'dd.mm.rrrr')
          THEN
            v_result := vc_order_hkf_3;
          ELSE
            v_result := vc_order_benif_one;
          END IF;
        WHEN v_pol_sum.product_brief IN ('CR92_4') THEN
          v_result := vc_order_hkf_61_62_63;
        WHEN v_pol_sum.product_brief IN ('CR92_6') THEN
          v_result := vc_order_hkf_61_62;
        WHEN v_pol_sum.product_brief IN ('CR92_7', 'CR92_8', 'CR92_9', 'CR92_10') THEN
          v_result := vc_order_active;
        ELSE
          ex.raise(par_message => 'Не прописан ПОРЯДОК ПЕРЕЧИСЛЕНИЯ ВЫПЛАТ для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
      RETURN(v_result);
    END define_payment_order;
  
    /*ПОРЯДОК ПЕРЕЧИСЛЕНИЯ ВЫПЛАТ*/
    PROCEDURE print_payment_order(par_type VARCHAR2) IS
      v_payment_order_text VARCHAR2(4000);
      vc_line_h CONSTANT NUMBER := 3; --высота строки
    BEGIN
      CASE
        WHEN par_type = vc_order_benif_many THEN
          v_payment_order_text := 'Страховая выплата осуществляется единовременно Выгодоприобретателям, указанным в Договоре страхования.';
        WHEN par_type = vc_order_benif_one THEN
          v_payment_order_text := 'Страховая выплата осуществляется единовременно Выгодоприобретателю, указанному в Договоре страхования.';
        WHEN par_type = vc_order_hkf_1 THEN
          v_payment_order_text := 'Страховая выплата осуществляется единовременно безналичным перечислением страховой суммы на счет Застрахованного в ООО ""ХКФ Банк".';
        WHEN par_type = vc_order_hkf_3 THEN
          v_payment_order_text := 'Страховые выплаты осуществляются раз в три месяца, при условии предоставления всех необходимых документов, путем безналичного перечисления страховой выплаты на счет Застрахованного в ООО ""ХКФ Банк".';
        WHEN par_type = vc_order_hkf_61_62 THEN
          v_payment_order_text := 'По риску, указанному в п. 6.1, страховые выплаты осуществляются за каждые три месяца, следующие после даты увольнения, при условии предоставления всех необходимых документов, путем безналичного перечисления страховой выплаты на счет Застрахованного в ООО ""ХКФ Банк"". По риску, указанному в п. 6.2., страховая выплата осуществляется единовременно безналичным перечислением страховой выплаты на счет Застрахованного в ООО ""ХКФ Банк".';
        WHEN par_type = vc_order_hkf_61_62_63 THEN
          v_payment_order_text := 'По рискам, указанным в п. 6.1 и 6.2, страховая выплата осуществляется единовременно безналичным перечислением страховой суммы на счет Застрахованного в ООО "ХКФ Банк". По риску, указанному в п. 6.3., страховые выплаты осуществляются за каждые три месяца, следующие после даты увольнения, при условии предоставления всех необходимых документов, путем безналичного перечисления страховой выплаты на счет Застрахованного в ООО "ХКФ Банк".';
        WHEN par_type = vc_order_active THEN
          v_payment_order_text := 'По рискам, указанным в п. 6.1 и 6.2, страховая выплата осуществляется единовременно безналичным перечислением страховой суммы на счет Застрахованного в ООО ""ХКФ Банк"';
        ELSE
          ex.raise(par_message => 'Не прописан ПОРЯДОК ПЕРЕЧИСЛЕНИЯ ВЫПЛАТ для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
    
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h        => vc_line_h
                     ,p_txt      => gv_chapter_num || '. ПОРЯДОК ПЕРЕЧИСЛЕНИЯ ВЫПЛАТ:'
                     ,p_border   => 'LR'
                     ,p_ln       => 1
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular);
    
      plpdf.printmultilinecell(p_h        => vc_line_h
                              ,p_txt      => v_payment_order_text
                              ,p_border   => 'LR'
                              ,p_ln       => 1
                              ,p_clipping => 0);
      /*Двойная линия*/
      line;
    END print_payment_order;
    /*ОСОБЫЕ УСЛОВИЯ*/
    PROCEDURE print_special_conditions IS
      v_special_conditions_text VARCHAR2(4000);
      v_line_h                  NUMBER := 3; --высота строки
    BEGIN
      CASE
        WHEN v_pol_sum.product_brief IN ('CR92_4', 'CR92_6', 'CR92_7', 'CR92_8', 'CR92_9', 'CR92_10') /*Версия 2*/
         THEN
          v_special_conditions_text := 'В случае расхождений между условиями настоящего Договора и Полисными условиями, преимущество имеет настоящий Договор. Договор страхования скрепляется собственноручной подписью Страхователя на заявлении на страхование и аналогом собственноручной подписи уполномоченного лица Страховщика и аналогом печати Страховщика на страховом полисе. Под аналогом подписи и печати здесь понимается их графическое воспроизведение при оформлении полиса с помощью компьютерной программы. Номер настоящего договора является уникальным номером и может быть использован только в одном полисе и должен совпадать с номером заявления на страхование. Все дополнения и изменения к настоящему Договору будут действительны только в случае, если они сделаны в письменной форме и подписаны собственноручной подписью Страхователя и собственноручной подписью уполномоченного лица Страховщика, заверенной оригинальной печатью Страховщика. Условия настоящего полиса изложены только на одной стороне настоящего бланка, никакие пометки и условия, изложенные на обратной стороне настоящего полиса, не имеют силы.';
        WHEN v_pol_sum.product_brief IN ('CR92_1'
                                        ,'CR92_1.1'
                                        ,'CR92_2'
                                        ,'CR92_2.1'
                                        ,'CR92_3'
                                        ,'CR92_3.1'
                                        ,'CR92_4'
                                        ,'CR92_4.1'
                                        ,'CR92_5'
                                        ,'CR92_5.1') /*Версия 1*/
         THEN
          v_special_conditions_text := 'В случае отказа Страхователя от настоящего Договора страховая премия не возвращается Страхователю. В случае расхождений между условиями настоящего Договора и Полисными условиями, преимущество имеет настоящий Договор. Договор страхования скрепляется собственноручной подписью Страхователя на заявлении на страхование и аналогом собственноручной подписи уполномоченного лица Страховщика и аналогом печати Страховщика на страховом полисе. Под аналогом подписи и печати здесь понимается их графическое воспроизведение при оформлении полиса с помощью компьютерной программы. Номер настоящего договора является уникальным номером и может быть использован только в одном полисе и должен совпадать с номером заявления на страхование. Все дополнения и изменения к настоящему Договору будут действительны только в случае, если они сделаны в письменной форме и подписаны собственноручной подписью Страхователя и собственноручной подписью уполномоченного лица Страховщика, заверенной оригинальной печатью Страховщика. Условия настоящего полиса изложены только на одной стороне настоящего бланка, никакие пометки и условия, изложенные на обратной стороне настоящего полиса, не имеют силы.';
        ELSE
          ex.raise(par_message => 'Не прописаны ОСОБЫЕ УСЛОВИЯ для product_brief=' ||
                                  v_pol_sum.product_brief);
      END CASE;
      gv_chapter_num := gv_chapter_num + 1;
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_h        => v_line_h
                     ,p_txt      => gv_chapter_num || '. ОСОБЫЕ УСЛОВИЯ:'
                     ,p_border   => 'LR'
                     ,p_ln       => 1
                     ,p_clipping => 0);
      set_font(par_style => gc_style_regular);
    
      IF v_pol_sum.product_brief IN ('CR92_4', 'CR92_5', 'CR92_6')
      THEN
        set_font(par_size => 6);
        v_line_h := 2.5;
      END IF;
      plpdf.printmultilinecell(p_h        => v_line_h
                              ,p_txt      => v_special_conditions_text
                              ,p_border   => 'LR'
                              ,p_ln       => 1
                              ,p_clipping => 0);
      /*Двойная линия*/
      line;
    END print_special_conditions;
  
    PROCEDURE print_sign IS
      v_signer      typ_signer;
      v_text        VARCHAR2(100);
      v_procuratory VARCHAR2(200);
    BEGIN
      IF define_signer = vc_sign_director
      THEN
        v_signer := get_signer('pkg_rep_plpdf.rep_hkf_credit_pay', 'Ген.дир');
        IF v_pol_sum.start_date >= to_date('01.02.2012', 'dd.mm.rrrr')
        THEN
          v_text        := 'Генеральный директор ';
          v_procuratory := NULL; /*после 01.02.2012 г.  Киселев действовал уже на основании устава - поэтому реквизиты доверенности нужно убрать*/
        ELSE
          v_text        := 'Управляющий директор ';
          v_procuratory := '(дов №' || v_signer.procuratory_num || ')';
        END IF;
      ELSE
        v_signer := get_signer('pkg_rep_plpdf.rep_hkf_credit_pay', 'ОПЕРУ');
        IF v_pol_sum.start_date BETWEEN to_date('17.06.2013', 'dd.mm.rrrr')
          /*Модифицировано по результатам тестирования 21.07.2014 Черных М.*/
           AND to_date('09.01.2014', 'dd.mm.rrrr')
        THEN
          v_signer.procuratory_num := '2013/121 от 17.06.2013 г.';
        
        END IF;
        v_text        := 'представитель по доверенности ';
        v_procuratory := '(дов №' || v_signer.procuratory_num || ')';
      END IF;
      set_font(par_style => gc_style_bold);
    
      delete_row_print_cache;
      plpdf.printcell(p_h => 3, p_border => 'LR', p_ln => 1);
      gv_widths(1) := plpdf.getpagespace / 2;
      gv_widths(2) := gv_widths(1);
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
    
      gv_borders(1) := 'L';
      gv_borders(2) := 'R';
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховщик:         __________________';
    
      row_print2;
    
      plpdf.printcell(p_h => 3, p_border => 'LR', p_ln => 1);
    
      gv_datas(1) := NULL;
      gv_datas(2) := v_text || v_signer.short_name || chr(13) || v_procuratory;
    
      gv_borders(1) := 'L';
      gv_borders(2) := 'R';
    
      row_print2;
    
    END print_sign;
  BEGIN
    /*ИД версии ДС*/
    v_policy_id := to_number(repcore.get_context('POL_ID'));
    /*Общая информация по полису*/
    v_pol_sum := get_policy_summary(v_policy_id);
    /*Информация о страхователе*/
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
  
    -- Инициализация
    IF v_pol_sum.product_brief IN ('CR92_5', 'CR92_6', 'CR92_7', 'CR92_8', 'CR92_9', 'CR92_10')
    THEN
      gv_default_font_size := 6.5;
    ELSE
      gv_default_font_size := 7;
    END IF;
    plpdf.init;
    font_init;
    plpdf.setallmargin(p_top => 5, p_left => 10, p_right => 10);
    plpdf.setencoding(p_enc => plpdf_const.cp1251);
    plpdf.newpage;
    --init(par_default_font_size => 7);
  
    -- plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
    -- plpdf.setfooterprocname(p_proc_name => 'ins.cmg_pkg_rep_plpdf.rep_hkf_credit_footer', p_height => 5);
    -------------------------------------------------------------------------------------------------
    -- ДОГОВОР №
    -------------------------------------------------------------------------------------------------
    print_header(par_type => define_header());
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_insurer;
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВАТЕЛЬ / ЗАСТРАХОВАННЫЙ
    -------------------------------------------------------------------------------------------------
    print_insuree;
    -------------------------------------------------------------------------------------------------
    -- СРОК ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    print_period(par_type => par_period_type);
    -------------------------------------------------------------------------------------------------
    -- ВАЛЮТА ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    print_currency;
  
    -------------------------------------------------------------------------------------------------
    -- ТЕРРИТОРИЯ
    -------------------------------------------------------------------------------------------------
    print_territory;
    -- ПРОГРАММЫ
    -------------------------------------------------------------------------------------------------
    print_programs(par_type => define_programs);
  
    -------------------------------------------------------------------------------------------------
    -- ВЫГОДОПРИОБРЕТАТЕЛИ
    -------------------------------------------------------------------------------------------------
    print_beneficiaries(par_type => define_beneficiaries());
  
    -------------------------------------------------------------------------------------------------
    --  ДЕЙСТВИЯ ПРИ НАСТУПЛЕНИИ СТРАХОВОГО СЛУЧАЯ:
    -------------------------------------------------------------------------------------------------
    print_insured_accident_actions;
  
    -------------------------------------------------------------------------------------------------
    --  ДОКУМЕНТЫ, НЕОБХОДИМЫЕ ДЛЯ СТРАХОВОЙ ВЫПЛАТЫ
    -------------------------------------------------------------------------------------------------
    print_insurance_payout_docs(par_type => define_docs);
  
    -------------------------------------------------------------------------------------------------
    --  ПОРЯДОК ПЕРЕЧИСЛЕНИЯ ВЫПЛАТ
    -------------------------------------------------------------------------------------------------
    print_payment_order(par_type => define_payment_order());
  
    -------------------------------------------------------------------------------------------------
    --  ОСОБЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_special_conditions;
  
    -------------------------------------------------------------------------------------------------
    -- ПОДПИСИ
    -------------------------------------------------------------------------------------------------
    print_sign;
  
    --Поля
    print_margine;
  
    /*Формирование PDF файла*/
    plpdf.senddoc(p_blob => l_blob);
  
    /*Заполенение выходных параметров*/
    par_data         := l_blob;
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_hkf_credit;

  /*
  Печать полиса со сроком действия договора "С ДАТЫ СПИСАНИЯ"
  Черных М.Г. 19.05.2014
  */
  PROCEDURE rep_hkf_credit_write_off
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT BLOB
  ) IS
  BEGIN
    rep_hkf_credit(par_content_type => par_content_type
                  ,par_file_name    => par_file_name
                  ,par_data         => par_data
                  ,par_period_type  => '<#P_WRITE_OFF>');
  END rep_hkf_credit_write_off;

  /*
  Печать полиса со сроком действия договора "С ДАТЫ ОПЛАТЫ СТРАХОВАТЕЛЕМ"
  Черных М.Г. 19.05.2014
  */
  PROCEDURE rep_hkf_credit_pay
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT BLOB
  ) IS
  BEGIN
    rep_hkf_credit(par_content_type => par_content_type
                  ,par_file_name    => par_file_name
                  ,par_data         => par_data
                  ,par_period_type  => '<#P_PAY>');
  END rep_hkf_credit_pay;

  /*
    Пиядин А.
    239416 ФТ по штрих-кодированию
  */
  PROCEDURE rep_barcode_scan_hist
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT BLOB
  ) IS
  
    l_blob BLOB;
  
    CURSOR cur_alphabet
    (
      par_start_chr CHAR
     ,par_end_chr   CHAR
    ) IS
      SELECT chr(LEVEL) sgn
        FROM dual
       WHERE LEVEL >= ascii(par_start_chr)
      CONNECT BY LEVEL <= ascii(par_end_chr);
  
  BEGIN
    --Создание документа
    ora_excel.new_document;
    ora_excel.add_sheet('История');
  
    ------------------------------------------------------------------------------
    --Создание шапки
    ------------------------------------------------------------------------------
    ora_excel.add_row;
  
    -- Column Width
    ora_excel.set_column_width('A', 20);
    ora_excel.set_column_width('B', 14);
    ora_excel.set_column_width('C', 17);
    ora_excel.set_column_width('D', 14);
    ora_excel.set_column_width('E', 19);
    ora_excel.set_column_width('F', 18);
    ora_excel.set_column_width('G', 22);
    ora_excel.set_column_width('H', 18);
    ora_excel.set_column_width('I', 11);
    ora_excel.set_column_width('J', 15);
    ora_excel.set_column_width('K', 15);
    ora_excel.set_column_width('L', 26);
  
    -- Cell align center, wrap text, font, border
    FOR cur_alph IN cur_alphabet('A', 'L')
    LOOP
      ora_excel.set_cell_align_center(cur_alph.sgn);
      ora_excel.set_cell_vert_align_middle(cur_alph.sgn);
      ora_excel.set_cell_wrap_text(cur_alph.sgn);
      ora_excel.set_cell_border(cur_alph.sgn);
      ora_excel.set_cell_bg_color(cur_alph.sgn, 'C6EFCE');
    END LOOP;
  
    -- Cell Text
    ora_excel.set_cell_value('A', '№ штрих-кода');
    ora_excel.set_cell_value('B', 'Тип документа');
    ora_excel.set_cell_value('C', 'Номер документа');
    ora_excel.set_cell_value('D', 'Номер версии');
    ora_excel.set_cell_value('E', 'Контрольное число');
    ora_excel.set_cell_value('F', 'ФИО пользователя');
    ora_excel.set_cell_value('G', 'Результат');
    ora_excel.set_cell_value('H', 'Дата сканирования');
    ora_excel.set_cell_value('I', 'ИДС');
    ora_excel.set_cell_value('J', 'Статус ИЗ');
    ora_excel.set_cell_value('K', 'Статус В');
    ora_excel.set_cell_value('L', 'Результат перевода статуса');
  
    ------------------------------------------------------------------------------
    --Создание тела
    ------------------------------------------------------------------------------
    FOR cur IN (SELECT *
                  FROM v_rep_barcode_scan_hist
                 WHERE t_barcode_scan_sessn_id = to_number(repcore.get_context('P_SCAN_SESSION_ID')))
    LOOP
      ora_excel.add_row;
    
      ora_excel.set_cell_value('A', cur."№ штрих-кода");
      ora_excel.set_cell_value('B', cur."Тип документа");
      ora_excel.set_cell_value('C', cur."Номер документа");
      ora_excel.set_cell_value('D', cur."Номер версии");
      ora_excel.set_cell_value('E', cur."Контрольное число");
      ora_excel.set_cell_value('F', cur."ФИО пользователя");
      ora_excel.set_cell_value('G', cur."Результат");
      ora_excel.set_cell_value('H', to_char(cur."Дата сканирования", 'dd.mm.yyyy'));
      ora_excel.set_cell_value('I', to_char(cur."ИДС"));
      ora_excel.set_cell_value('J', cur."Статус ИЗ");
      ora_excel.set_cell_value('K', cur."Статус В");
      ora_excel.set_cell_value('L', cur."Результат перевода статуса");
    
      -- Cell align left, wrap text, border
      FOR cur_alph IN cur_alphabet('A', 'L')
      LOOP
        ora_excel.set_cell_align_left(cur_alph.sgn);
        ora_excel.set_cell_vert_align_middle(cur_alph.sgn);
        ora_excel.set_cell_wrap_text(cur_alph.sgn);
        ora_excel.set_cell_border(cur_alph.sgn);
      END LOOP;
    
    END LOOP;
  
    ora_excel.save_to_blob(l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'История сканирования штрих-кода.xlsx';
    par_content_type := 'application/excel';
  
  END rep_barcode_scan_hist;

  -- Процедура формирования полиса Уверенный старт 2014
  -- 374307 FW настройка продукта Уверенный старт
  -- Доброхотова И., ноябрь, 2014
  PROCEDURE rep_strong_start_2014
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    p_policy.policy_id%TYPE;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
  
    l_blob BLOB;
    v_text VARCHAR2(250);
  
    -- Застрахованные
    CURSOR cur_assured
    (
      par_policy_id        p_policy.policy_id%TYPE
     ,par_asset_type_brief t_asset_type.brief%TYPE DEFAULT 'ASSET_PERSON'
    ) IS
      SELECT CASE asset_type_brief
               WHEN 'ASSET_PERSON' THEN
                'ЗАСТРАХОВАННЫЙ ' || rn || ' (возраст 18-64 лет)'
               WHEN 'ASSET_PERSON_CHILD' THEN
                'ЗАСТРАХОВАННЫЙ ' || rn || ' (возраст 1-17 лет включительно)'
             END assured_header
            ,s.*
        FROM (SELECT decode(par_asset_type_brief, 'ASSET_PERSON_CHILD', 2, 0) + row_number() over(ORDER BY ass.as_asset_id) rn
                    ,asst.brief asset_type_brief
                    ,asu.assured_contact_id
                FROM as_asset       ass
                    ,p_asset_header assh
                    ,t_asset_type   asst
                    ,as_assured     asu
               WHERE ass.p_policy_id = par_policy_id
                 AND ass.p_asset_header_id = assh.p_asset_header_id
                 AND assh.t_asset_type_id = asst.t_asset_type_id
                 AND asst.brief = par_asset_type_brief
                 AND ass.as_asset_id = asu.as_assured_id
              UNION ALL /*Печать пустых строк, если их нет*/
              SELECT 2 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_number(NULL)
                FROM dual
               WHERE (SELECT COUNT(1)
                        FROM as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ass.p_policy_id = par_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = 'ASSET_PERSON') = 1 /*если застрахованный только один, то выводим второго обязательно*/
                 AND par_asset_type_brief = 'ASSET_PERSON'
              UNION ALL /*Печать пустых разделов по детям, если их нет*/
              SELECT 3 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_number(NULL)
                FROM dual
               WHERE NOT EXISTS (SELECT NULL
                        FROM as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ass.p_policy_id = par_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = par_asset_type_brief)
              UNION ALL
              SELECT 4 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_number(NULL)
                FROM dual
               WHERE NOT EXISTS (SELECT NULL
                        FROM as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ass.p_policy_id = par_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = par_asset_type_brief)
              UNION ALL
              SELECT 4 rn
                    ,par_asset_type_brief asset_type_brief
                    ,to_number(NULL)
                FROM dual /*Вывод второго ребенка, если есть первый*/
               WHERE (SELECT COUNT(1)
                        FROM as_asset       ass
                            ,p_asset_header assh
                            ,t_asset_type   asst
                       WHERE ass.p_policy_id = par_policy_id
                         AND ass.p_asset_header_id = assh.p_asset_header_id
                         AND assh.t_asset_type_id = asst.t_asset_type_id
                         AND asst.brief = par_asset_type_brief) = 1
                 AND par_asset_type_brief = 'ASSET_PERSON_CHILD') s;
  
    -- Риски
    CURSOR cur_cover
    (
      par_policy_id        p_policy.policy_id%TYPE
     ,par_product_id       t_product.product_id%TYPE
     ,par_asset_type_brief t_asset_type.brief%TYPE DEFAULT 'ASSET_PERSON'
    ) IS
      SELECT *
        FROM (SELECT nvl(ppl.t_product_line_public_desc, ppl.t_product_line_desc)
                     /*  ppl.t_product_line_desc*/ AS cover_name
                    ,ppl.t_product_line_desc
                    ,(SELECT nvl(MAX(pc.ins_amount), 0)
                        FROM p_cover            pc
                            ,as_asset           aa
                            ,p_asset_header     ah
                            ,t_prod_line_option plo
                       WHERE aa.p_policy_id = par_policy_id
                         AND aa.as_asset_id = pc.as_asset_id
                         AND pc.t_prod_line_option_id = plo.id
                         AND aa.p_asset_header_id = ah.p_asset_header_id
                         AND ah.t_asset_type_id = at.t_asset_type_id
                         AND plo.product_line_id = ppl.t_product_line_id) AS cover_ins_amount
                FROM t_as_type_prod_line atpl
                    ,t_asset_type        at
                    ,v_prod_product_line ppl
               WHERE ppl.product_id = par_product_id
                 AND ppl.t_product_line_id = atpl.product_line_id
                 AND atpl.asset_common_type_id = at.t_asset_type_id
                 AND at.brief = par_asset_type_brief
              UNION ALL /*Печатаем риски для детей в индивидуальных продуктах (берем 3 риска с родителя, т.к. дети вообще  не прописаны (костыль) 03.06.2014 Черных М.)*/
              SELECT /*ppl.t_product_line_desc*/
               nvl(ppl.t_product_line_public_desc, ppl.t_product_line_desc) AS cover_name
              ,ppl.t_product_line_desc
              ,to_number(NULL) cover_ins_amount
                FROM t_as_type_prod_line atpl
                    ,t_asset_type        at
                    ,v_prod_product_line ppl
               WHERE ppl.product_id = par_product_id
                 AND ppl.t_product_line_id = atpl.product_line_id
                 AND atpl.asset_common_type_id = at.t_asset_type_id
                 AND par_asset_type_brief = 'ASSET_PERSON_CHILD'
                    /*                 AND ppl.t_product_line_desc IN
                    ('Инвалидность в результате несчастного случая'
                    ,'Инвалидность в результате дорожно-транспортного происшествия'
                    ,'Переломы и ожоги в результате несчастного случая')*/
                 AND ppl.t_product_line_desc IN ('Инвалидность НС'
                                                ,'Инвалидность в результате ДТП'
                                                ,'Переломы и ожоги НС')
                 AND NOT EXISTS (SELECT NULL
                        FROM t_as_type_prod_line atpl
                            ,t_asset_type        at
                            ,v_prod_product_line ppl
                       WHERE ppl.product_id = par_product_id
                         AND ppl.t_product_line_id = atpl.product_line_id
                         AND atpl.asset_common_type_id = at.t_asset_type_id
                         AND at.brief = 'ASSET_PERSON_CHILD')) ppl
       ORDER BY CASE
                  WHEN ppl.t_product_line_desc LIKE 'Смерть  НС' THEN
                   1
                  WHEN ppl.t_product_line_desc LIKE 'Смерть в результате ДТП' THEN
                   2
                  WHEN ppl.t_product_line_desc LIKE 'Инвалидность НС' THEN
                   3
                  WHEN ppl.t_product_line_desc LIKE 'Инвалидность в результате ДТП' THEN
                   4
                  WHEN ppl.t_product_line_desc LIKE 'Переломы и ожоги НС' THEN
                   5
                END;
  
    PROCEDURE prn(par_text VARCHAR2) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => 1
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text);
    END;
  
    PROCEDURE print_insuree_info_custom
    (
      par_contact_info          t_contact_summary
     ,par_print_blanks_for_null BOOLEAN DEFAULT FALSE
    ) IS
      v_has_citizenship          NUMBER;
      v_citizenship_string       VARCHAR2(32767);
      v_has_foreign_residency    NUMBER;
      v_foreign_residency_string VARCHAR2(32767);
      v_migration_card_info      VARCHAR2(4000);
      v_is_rpdl_flag             NUMBER;
      v_is_ipdl_flag             NUMBER;
    BEGIN
      print_default_chapter('СТРАХОВАТЕЛЬ');
    
      print_contact_info(par_contact_info, par_print_blanks_for_null);
    
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w        => gv_default_elem_header_width * 0.8
                     ,p_txt      => upper('ГРАЖДАНСТВО:')
                     ,p_h        => gc_default_line_height + 1
                     ,p_ln       => 0
                     ,p_clipping => gc_default_no_clipping);
      set_font;
      -- 40 - лдина самого длинного названия страны из справочника
      plpdf.printmultilinecell(p_w        => plpdf.gettextwidth(rpad('0', 40, '0'))
                              ,p_txt      => par_contact_info.country_birth_name
                              ,p_h        => gc_default_line_height + 1
                              ,p_ln       => 1
                              ,p_clipping => gc_default_no_clipping);
    
      set_font(par_style => gc_style_bold);
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_public_contact
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         NULL
                                      END
                ,par_height        => gc_default_line_height + 1);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ СТРАХОВАТЕЛЬ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         NULL
                                      END
                ,par_height        => gc_default_line_height + 1);
    
    END print_insuree_info_custom;
  
    PROCEDURE print_assured_info_custom
    (
      par_contact_info          t_contact_summary
     ,par_print_blanks_for_null BOOLEAN DEFAULT FALSE
    ) IS
      v_has_citizenship          NUMBER;
      v_citizenship_string       VARCHAR2(32767);
      v_has_foreign_residency    NUMBER;
      v_foreign_residency_string VARCHAR2(32767);
      v_migration_card_info      VARCHAR2(4000);
      v_is_rpdl_flag             NUMBER;
      v_is_ipdl_flag             NUMBER;
    BEGIN
      print_contact_info(par_contact_info, par_print_blanks_for_null);
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w        => gv_default_elem_header_width * 0.8
                     ,p_txt      => upper('ГРАЖДАНСТВО:')
                     ,p_h        => gc_default_line_height + 1
                     ,p_ln       => 0
                     ,p_clipping => gc_default_no_clipping);
      set_font;
      -- 40 - лдина самого длинного названия страны из справочника
      plpdf.printmultilinecell(p_w        => plpdf.gettextwidth(rpad('0', 40, '0'))
                              ,p_txt      => par_contact_info.country_birth_name
                              ,p_h        => gc_default_line_height + 1
                              ,p_ln       => 1
                              ,p_clipping => gc_default_no_clipping);
    
      set_font(par_style => gc_style_bold);
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ ИНОСТРАННЫМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_public_contact
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         NULL
                                      END
                ,par_height        => gc_default_line_height + 1);
    
      print_mark(par_question_text => 'ЯВЛЯЕТСЯ ЛИ ЗАСТРАХОВАННЫЙ РОССИЙСКИМ ПУБЛИЧНЫМ ДОЛЖНОСТНЫМ ЛИЦОМ?'
                ,par_mark_index    => CASE par_contact_info.is_rpdl
                                        WHEN 1 THEN
                                         1
                                        WHEN 0 THEN
                                         2
                                        ELSE
                                         NULL
                                      END
                ,par_height        => gc_default_line_height + 1);
    END print_assured_info_custom;
  
    PROCEDURE print_programs IS
      v_h NUMBER;
    BEGIN
      set_font(par_font_family => gc_arial_font_family
              ,par_style       => gc_style_bold
              ,par_color       => gc_color_orange
              ,par_size        => 8);
    
      blank_cell(par_width => 0, par_ln => 1);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_w        => 190
                              ,p_txt      => to_char(gv_chapter_num) ||
                                             '.1. СТРАХОВЫЕ СУММЫ И СТРАХОВАЯ ПРЕМИЯ'
                              ,p_clipping => 0
                              ,p_border   => 'LTR');
      --      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
      delete_row_print_cache;
    
      set_font(par_style => gc_style_bold);
      gv_widths(1) := 140; --plpdf.getpagespace / 3 * 2;
      gv_widths(2) := 50; --plpdf.getpagespace / 3 * 2;
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_datas(1) := 'СТРАХОВЫЕ РИСКИ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ 1 И 2';
      gv_datas(2) := 'СТРАХОВЫЕ СУММЫ (в Рублях)' || chr(13) || '(на каждого Застрахованного)';
    
      row_print2(par_h => gc_default_line_height + 1);
      /*      plpdf.printmultilinecell(p_w        => 120
                              ,p_h        => 6
                              ,p_txt      => 'СТРАХОВЫЕ РИСКИ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ 1 И 2'
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'C'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => 'СТРАХОВЫЕ СУММЫ (в Рублях)' || chr(13) ||
                                             '(на каждого Застрахованного)'
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'C');
      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);*/
      --      delete_row_print_cache;
      --      gv_borders(1) := 'LRT';
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      FOR cur IN cur_cover(v_policy_id, v_pol_sum.product_id, 'ASSET_PERSON')
      LOOP
        SELECT to_char(decode(cur.cover_ins_amount, 0, NULL, cur.cover_ins_amount)
                      ,'999g999g999g999d99')
          INTO v_text
          FROM dual;
        gv_datas(1) := cur.cover_name;
        gv_datas(2) := v_text;
        row_print2(par_h => gc_default_line_height + 1);
        /*        IF length(cur.cover_name) > 70
        THEN
          v_h := 6;
        ELSE
          v_h := 3;
        END IF;
        plpdf.printmultilinecell(p_w        => 120
                                ,p_h        => v_h
                                ,p_txt      => cur.cover_name
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'L'
                                ,p_ln       => 0
                                ,p_maxline  => 2);
        SELECT to_char(decode(cur.cover_ins_amount, 0, NULL, cur.cover_ins_amount)
                      ,'999g999g999g999d99')
          INTO v_text
          FROM dual;
        plpdf.printmultilinecell(p_h        => v_h
                                ,p_txt      => v_text
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'C'
                                ,p_ln       => 1);*/
      END LOOP;
    
      --      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
      /*      plpdf.printmultilinecell(p_w        => 120
                              ,p_h        => 6
                              ,p_txt      => 'СТРАХОВЫЕ РИСКИ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ 3 и 4'
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'C'
                              ,p_ln       => 0);
      blank_cell(par_width => 0, par_height => 6, par_border => '1', par_ln => 1);*/
      --      gv_borders(1) := 1;
      --      gv_borders(2) := 1;    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_datas(1) := 'СТРАХОВЫЕ РИСКИ В ОТНОШЕНИИ ЗАСТРАХОВАННЫХ 3 И 4';
      gv_datas(2) := '';
      row_print2(par_h => gc_default_line_height + 1);
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      --      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
      FOR cur IN cur_cover(v_policy_id, v_pol_sum.product_id, 'ASSET_PERSON_CHILD')
      LOOP
        SELECT to_char(decode(cur.cover_ins_amount, 0, NULL, cur.cover_ins_amount)
                      ,'999g999g999g999d99')
          INTO v_text
          FROM dual;
        gv_datas(1) := cur.cover_name;
        gv_datas(2) := v_text;
        row_print2(par_h => gc_default_line_height + 1);
        /*        IF length(cur.cover_name) > 70
                THEN
                  v_h := 6;
                ELSE
                  v_h := 3;
                END IF;
        
        plpdf.printmultilinecell(p_w        => 120
                                ,p_h        => v_h
                                ,p_txt      => cur.cover_name
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'L'
                                ,p_ln       => 0);
        SELECT to_char(decode(cur.cover_ins_amount, 0, NULL, cur.cover_ins_amount)
                      ,'999g999g999g999d99')
          INTO v_text
          FROM dual;
        plpdf.printmultilinecell(p_h        => v_h
                                ,p_txt      => v_text
                                ,p_clipping => 0
                                ,p_border   => '1'
                                ,p_align    => 'C');*/
      END LOOP;
      -----------------------------------------------------------------------------------------------
      --      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
      /*      plpdf.printmultilinecell(p_w        => 120
                              ,p_h        => 6
                              ,p_txt      => 'СТРАХОВАЯ ПРЕМИЯ ПО ДОГОВОРУ СТРАХОВАНИЯ (в Рублях):'
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'R'
                              ,p_ln       => 0);
      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
      plpdf.printmultilinecell(p_h        => 6
                              ,p_txt      => to_char(v_pol_sum.premium, '999g999g999g999d99')
                              ,p_clipping => 0
                              ,p_border   => '1'
                              ,p_align    => 'C');*/
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_regular;
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
      gv_datas(1) := 'СТРАХОВАЯ ПРЕМИЯ ПО ДОГОВОРУ СТРАХОВАНИЯ (в Рублях):';
      gv_datas(2) := to_char(v_pol_sum.premium, '999g999g999g999d99');
      row_print2(par_h => gc_default_line_height + 1);
    
      -----------------------------------------------------------------------------------------------
      --      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold, par_size => 8);
      /*      plpdf.printmultilinecell(p_w        => 120
                              ,p_h        => 3
                              ,p_txt      => 'Периодичность оплаты страховой премии: единовременно'
                              ,p_clipping => 0
                              ,p_border   => 'LTR'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      blank_cell(par_width => 0, par_height => 3, par_border => 'LTR', par_ln => 1);*/
      /*      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';*/
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
      gv_datas(1) := 'Периодичность оплаты страховой премии: единовременно';
      gv_datas(2) := '';
      row_print2(par_h => gc_default_line_height + 1);
      --      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_bold_italic);
      /*      plpdf.printmultilinecell(p_w        => 120
                              ,p_h        => 3
                              ,p_txt      => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.'
                              ,p_clipping => 0
                              ,p_border   => 'LRB'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      blank_cell(par_height => 3, par_width => 0, par_border => 'LRB', par_ln => 1);*/
      --      gv_borders(1) := 'LRT';
      --      gv_borders(2) := 'LRT';
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
    
      gv_datas(1) := 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.';
      gv_datas(2) := '';
      row_print2(par_h => gc_default_line_height + 1);
    
      -------------------------------------------------------------------------------------------------
      -- МАКСИМАЛЬНЫЕ СТРАХОВЫЕ ВЫПЛАТЫ
      -------------------------------------------------------------------------------------------------
    
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
    
      set_font(par_font_family => gc_arial_font_family
              ,par_style       => gc_style_bold
              ,par_color       => gc_color_orange
              ,par_size        => 8);
      /*      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_datas(1) := to_char(gv_chapter_num) ||'.2 МАКСИМАЛЬНЫЕ СТРАХОВЫЕ ВЫПЛАТЫ';
      gv_datas(2) := '';
      row_print2(par_h => gc_default_line_height);*/
    
      plpdf.printmultilinecell(p_h        => 3
                              ,p_w        => 190
                              ,p_txt      => to_char(gv_chapter_num) ||
                                             '.2 МАКСИМАЛЬНЫЕ СТРАХОВЫЕ ВЫПЛАТЫ'
                              ,p_clipping => 0
                              ,p_border   => 'LTR');
      set_font(par_font_family => gc_arial_font_family, par_style => gc_style_regular);
      plpdf.printmultilinecell(p_h        => 3
                              ,p_txt      => '(ЗАВИСЯТ ОТ КОЛИЧЕСТВА ЗАСТРАХОВАННЫХ ЛИЦ, В ОТНОШЕНИИ КОТОРЫХ ПРОИЗОШЕЛ СТРАХОВОЙ СЛУЧАЙ, И ОПРЕДЕЛЯЮТСЯ КАК ПРОЦЕНТ ОТ УКАЗАННЫХ В П ' ||
                                             to_char(gv_chapter_num) || '.1 СТРАХОВЫХ СУММ)'
                              ,p_clipping => 0
                              ,p_border   => 'LR');
    
      plpdf.printmultilinecell(p_w        => 50
                              ,p_h        => 3
                              ,p_txt      => 'СОСТАВ ЗАСТРАХОВАННЫХ ЛИЦ, В ОТНОШЕНИИ КОТОРЫХ ПРОИЗОШЕЛ СТРАХОВОЙ СЛУЧАЙ'
                              ,p_clipping => 0
                              ,p_border   => 'LRT'
                              ,p_align    => 'L'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_h        => 4
                              ,p_txt      => 'ПРОЦЕНТ ОТ БАЗОВЫХ СТРАХОВЫХ СУММ, УКАЗАННЫХ В П. ' ||
                                             to_char(gv_chapter_num) || '.1.'
                              ,p_clipping => 0
                              ,p_border   => 'LRT'
                              ,p_align    => 'C'
                              ,p_ln       => 2);
      plpdf.printmultilinecell(p_w        => 35
                              ,p_h        => 5
                              ,p_txt      => 'Застрахованный 1'
                              ,p_clipping => 0
                              ,p_border   => 'LRT'
                              ,p_align    => 'C'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 35
                              ,p_h        => 5
                              ,p_txt      => 'Застрахованный 2'
                              ,p_clipping => 0
                              ,p_border   => 'LRT'
                              ,p_align    => 'C'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 35
                              ,p_h        => 5
                              ,p_txt      => 'Застрахованный 3'
                              ,p_clipping => 0
                              ,p_border   => 'LRT'
                              ,p_align    => 'C'
                              ,p_ln       => 0);
      plpdf.printmultilinecell(p_w        => 35
                              ,p_h        => 5
                              ,p_txt      => 'Застрахованный 4'
                              ,p_clipping => 0
                              ,p_border   => 'LRT'
                              ,p_align    => 'C');
    
      delete_row_print_cache;
    
      FOR i IN 1 .. 5
      LOOP
        gv_borders(i) := 1;
      END LOOP;
    
      gv_aligns(1) := 'L';
      FOR i IN 2 .. 5
      LOOP
        gv_aligns(i) := 'C';
      END LOOP;
    
      gv_widths(1) := 50;
      gv_widths(2) := 35;
      gv_widths(3) := 35;
      gv_widths(4) := 35;
      gv_widths(5) := 35;
    
      gv_datas(1) := to_char(gv_chapter_num) || '.2.1. Только один родитель';
      gv_datas(2) := '100%';
      gv_datas(3) := NULL;
      gv_datas(4) := NULL;
      gv_datas(5) := NULL;
    
      row_print2(par_h => 3);
    
      gv_datas(1) := to_char(gv_chapter_num) || '.2.2. Оба родителя';
      gv_datas(2) := '100%';
      gv_datas(3) := '100%';
      gv_datas(4) := NULL;
      gv_datas(5) := NULL;
    
      row_print2(par_h => 3);
    
      gv_datas(1) := to_char(gv_chapter_num) || '.2.3. Один родитель и один ребенок';
      gv_datas(2) := '100%';
      gv_datas(3) := NULL;
      gv_datas(4) := '100%';
      gv_datas(5) := NULL;
    
      row_print2(par_h => 3);
    
      gv_datas(1) := to_char(gv_chapter_num) || '.2.4. Один родитель и двое детей';
      gv_datas(2) := '100%';
      gv_datas(3) := NULL;
      gv_datas(4) := '50%';
      gv_datas(5) := '50%';
    
      row_print2(par_h => 3);
    
      gv_datas(1) := to_char(gv_chapter_num) || '.2.5. Оба родителя и один ребенок';
      gv_datas(2) := '50%';
      gv_datas(3) := '50%';
      gv_datas(4) := '100%';
      gv_datas(5) := NULL;
    
      row_print2(par_h => 3);
    
      gv_datas(1) := to_char(gv_chapter_num) || '.2.6. Оба родителя и двое детей';
      gv_datas(2) := '50%';
      gv_datas(3) := '50%';
      gv_datas(4) := '50%';
      gv_datas(5) := '50%';
    
      row_print2(par_h => 3);
    
      delete_row_print_cache;
    
    END print_programs;
  
    PROCEDURE print_assured_adult IS
    BEGIN
      FOR cur IN cur_assured(v_policy_id)
      LOOP
        print_default_subchapter(cur.assured_header);
        IF cur.assured_contact_id IS NOT NULL
        THEN
          v_assured_info := get_contact_summary(cur.assured_contact_id);
        ELSE
          v_assured_info.contact_id                 := to_number(NULL);
          v_assured_info.fio                        := to_char(NULL);
          v_assured_info.name                       := to_char(NULL);
          v_assured_info.first_name                 := to_char(NULL);
          v_assured_info.middle_name                := to_char(NULL);
          v_assured_info.fio_initials               := to_char(NULL);
          v_assured_info.date_of_birth              := to_date(NULL);
          v_assured_info.is_public_contact          := to_number(NULL);
          v_assured_info.is_rpdl                    := to_number(NULL);
          v_assured_info.gender                     := to_char(NULL);
          v_assured_info.gender_desc                := to_char(NULL);
          v_assured_info.country_birth_name         := to_char(NULL);
          v_assured_info.has_additional_citizenship := to_number(NULL);
          v_assured_info.has_foreign_residency      := to_number(NULL);
        END IF;
        print_assured_info_custom(par_contact_info => v_assured_info);
      END LOOP;
    
    END print_assured_adult;
  
    PROCEDURE print_assured_child IS
    BEGIN
      FOR cur IN cur_assured(v_policy_id, 'ASSET_PERSON_CHILD')
      LOOP
        print_default_subchapter(cur.assured_header);
        IF cur.assured_contact_id IS NOT NULL
        THEN
          v_assured_info := get_contact_summary(cur.assured_contact_id);
          set_font(par_style => gc_style_bold);
          plpdf.printmultilinecell(p_w        => 80
                                  ,p_h        => 3
                                  ,p_txt      => 'Ф.И.О.'
                                  ,p_clipping => 0
                                  ,p_align    => 'L'
                                  ,p_ln       => 0);
          set_font;
          plpdf.printmultilinecell(p_h        => 3
                                  ,p_txt      => v_assured_info.fio
                                  ,p_clipping => 0
                                  ,p_align    => 'L');
          set_font(par_style => gc_style_bold);
          plpdf.printmultilinecell(p_w        => 80
                                  ,p_h        => 3
                                  ,p_txt      => 'ДАТА РОЖДЕНИЯ'
                                  ,p_clipping => 0
                                  ,p_align    => 'L'
                                  ,p_ln       => 0);
          set_font;
          plpdf.printmultilinecell(p_h        => 3
                                  ,p_txt      => to_char(v_assured_info.date_of_birth, 'dd.mm.yyyy')
                                  ,p_clipping => 0
                                  ,p_align    => 'L');
        ELSE
          set_font(par_style => gc_style_bold);
          plpdf.printmultilinecell(p_h => 3, p_txt => 'Ф.И.О.', p_clipping => 0, p_align => 'L');
          plpdf.printmultilinecell(p_h        => 3
                                  ,p_txt      => 'ДАТА РОЖДЕНИЯ'
                                  ,p_clipping => 0
                                  ,p_align    => 'L');
        
        END IF;
        set_font;
      END LOOP;
    END print_assured_child;
  
    PROCEDURE print_declaration IS
    BEGIN
      set_font(par_style => gc_style_bold);
      prn('Настоящим я (Страхователь/Застрахованный) заявляю, что никто из Застрахованных по настоящему Договору страхования:');
      set_font;
      prn('НЕ является инвалидом I и II группы, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, нервными расстройствами, в том числе неврозами и тиками, психическими заболеваниями; НЕ употребляет наркотики, токсические вещества, НЕ страдает алкоголизмом или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ страдает иными заболеваниями, ограничивающими физическую активность или повышающими риск травмы, включая нарушения зрения, слуха, функции органов равновесия и т.д.; НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений; НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.); НЕ занимается опасными видами спорта или опасными видами увлечений (хобби); НЕ является иностранным публичным должностным лицом.');
      /*      prn('7.1. НЕ является инвалидом I и II группы, лицом, требующим постоянного ухода;');
            prn('7.2. НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение;');
            prn('7.3. НЕ страдает мышечной дистрофией, нервными расстройствами, в том числе неврозами и тиками, психическими заболеваниями;');
            prn('7.4. НЕ употребляет наркотики, токсические вещества, НЕ страдает алкоголизмом или НЕ состоит по перечисленным причинам на диспансерном учете;');
            prn('7.5. НЕ страдает иными заболеваниями, ограничивающими физическую активность или повышающими риск травмы, включая нарушения зрения, слуха, функции органов равновесия и т.д.;');
            prn('7.6. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;');
            prn('7.7. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.);');
            prn('7.8. НЕ занимается опасными видами спорта или опасными видами увлечений (хобби); ');
            prn('7.9. НЕ является иностранным публичным должностным лицом.');
      */
      set_font(par_style => gc_style_bold);
      prn('Да, я (Страхователь / Застрахованный) могу подписать настоящую Декларацию и заявляю:');
      set_font;
    
      prn('что я согласен(-на) с утверждениями, заявленными в настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;');
      prn('что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования;');
      prn('что я прочел(-а), понял(-а) и согласен(-а) с «Полисными условиями по программе «Уверенный старт»;');
      prn('что в отношении Застрахованных не заключены и не поданы заявления на заключение других договоров страхования по программе «Уверенный старт» в ООО «СК «Ренессанс Жизнь» и общая страховая сумма по любым договорам страхования, заключенным в отношении Застрахованных по рискам «смерть по любой причине»/«смерть в результате несчастного случая», не превышает 2 000 000 (два миллиона) рублей.');
      prn('подтверждаю, что ни  я, ни мои родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях. (При наличии родственников, замещающие вышеуказанные должности, заполняется анкета.)');
      prn('');
      prn('Подписывая настоящий Договор страхования , Страхователь/Застрахованный в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставляет ООО «СК «Ренессанс Жизнь» согласие на обработку (сбор, систематизацию, накопление, хранение, уточнение (обновление, изменение), использование, распространение, обезличивание, блокирование, уничтожение, как на бумажных, так и на электронных носителях, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям) своих персональных данных, содержащихся в настоящем Договоре страхования, в том числе данных о состоянии здоровья, содержащиеся в настоящем Договоре страхования и в иных документах, передаваемых Страховщику, в целях заключения и исполнения между Страхователем и Страховщиком Договора страхования, а также в целях продвижения товаров, работ, услуг на рынке страхования путём осуществления прямых контактов с помощью средств связи, при этом такое согласие дается Страхователем/ Застрахованным Страховщику  на срок действия Договора страхования и в течение 15 лет после окончания срока действия Договора страхования и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
      prn('');
    END print_declaration;
  
    PROCEDURE print_additional_conds IS
    BEGIN
      set_font;
      prn('8.1. ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН НА ОСНОВАНИИ ПОЛИСНЫХ УСЛОВИЙ ПО ПРОГРАММЕ «УВЕРЕННЫЙ СТАРТ»;');
      prn('8.2. СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ДОГОВОРЕ СТРАХОВАНИЯ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ;');
      prn('8.3. ТЕРРИТОРИЯ СТРАХОВАНИЯ: ВЕСЬ МИР;');
      prn('8.4. ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ: 24 ЧАСА В СУТКИ');
      prn('');
      delete_row_print_cache;
      set_font(par_style => 'I');
      gv_widths(1) := plpdf.getpagespace / 4;
      gv_widths(2) := plpdf.getpagespace * 3 / 4;
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
      gv_datas(1) := 'К Договору страхования прилагаются:';
      gv_datas(2) := 'Приложение №1: Полисные условия по программе «Уверенный старт» и Таблица страховых выплат по риску «Переломы и ожоги в результате несчастного случая»';
      row_print2(par_h => 3);
      prn('');
      set_font;
    END print_additional_conds;
  
    PROCEDURE print_signes IS
      v_signer pkg_report_signer.typ_signer;
    BEGIN
    
      v_signer := pkg_report_signer.get_signer_id_by_exe_name('pkg_rep_plpdf.rep_strong_start_2014');
      set_font(par_style => pkg_rep_plpdf.gc_style_bold);
    
      plpdf.putimage(p_name => 'image_sign_jpg'
                    ,p_data => v_signer.image_sign_jpg
                    ,p_x    => plpdf.getpagespace - 5 - 45
                    ,p_y    => plpdf.getcurrenty
                    ,p_w    => 45
                    ,p_h    => 50);
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.gv_widths(1) := plpdf.getpagespace / 3;
      pkg_rep_plpdf.gv_widths(2) := pkg_rep_plpdf.gv_widths(1);
      pkg_rep_plpdf.gv_widths(3) := pkg_rep_plpdf.gv_widths(1);
    
      pkg_rep_plpdf.gv_styles(1) := pkg_rep_plpdf.gc_style_bold;
      pkg_rep_plpdf.gv_styles(2) := pkg_rep_plpdf.gc_style_bold;
      pkg_rep_plpdf.gv_styles(3) := pkg_rep_plpdf.gc_style_bold;
    
      pkg_rep_plpdf.gv_borders(1) := 'LTR';
      pkg_rep_plpdf.gv_borders(2) := 'LTR';
      pkg_rep_plpdf.gv_borders(3) := 'LTR';
    
      pkg_rep_plpdf.gv_datas(1) := 'Страхователь';
      pkg_rep_plpdf.gv_datas(2) := 'Застрахованный';
      pkg_rep_plpdf.gv_datas(3) := 'Страховщик';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := NULL;
      pkg_rep_plpdf.gv_datas(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := 'LTR';
      pkg_rep_plpdf.gv_borders(2) := 'LTR';
      pkg_rep_plpdf.gv_borders(3) := 'LTR';
    
      pkg_rep_plpdf.gv_styles(1) := pkg_rep_plpdf.gc_style_italic;
      pkg_rep_plpdf.gv_styles(2) := pkg_rep_plpdf.gc_style_italic;
      pkg_rep_plpdf.gv_styles(3) := pkg_rep_plpdf.gc_style_italic;
    
      pkg_rep_plpdf.gv_datas(1) := 'Полисные условия по программе "Уверенный старт" получил';
      pkg_rep_plpdf.gv_datas(2) := NULL;
      pkg_rep_plpdf.gv_datas(3) := 'Представитель по доверенности ' || v_signer.short_name || chr(13) ||
                                   '(дов №' || v_signer.procuratory_num || ')';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.gv_borders(1) := 'LR';
      pkg_rep_plpdf.gv_borders(2) := 'LR';
      pkg_rep_plpdf.gv_borders(3) := 'LR';
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := NULL;
      pkg_rep_plpdf.gv_datas(3) := NULL;
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      FOR i IN 1 .. 5
      LOOP
        pkg_rep_plpdf.row_print2;
      END LOOP;
    
      pkg_rep_plpdf.gv_styles(1) := pkg_rep_plpdf.gc_style_italic;
      pkg_rep_plpdf.gv_styles(2) := pkg_rep_plpdf.gc_style_italic;
      pkg_rep_plpdf.gv_styles(3) := pkg_rep_plpdf.gc_style_italic;
    
      pkg_rep_plpdf.gv_datas(1) := 'Подпись         Расшифровка подписи' || chr(13) || 'дата';
      pkg_rep_plpdf.gv_datas(2) := 'Подпись         Расшифровка подписи' || chr(13) || 'дата';
      pkg_rep_plpdf.gv_datas(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := 'LBR';
      pkg_rep_plpdf.gv_borders(2) := 'LBR';
      pkg_rep_plpdf.gv_borders(3) := 'LBR';
    
      pkg_rep_plpdf.row_print2;
    
    END print_signes;
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
  
    init(par_default_font_size => 7);
    print_barcode(v_policy_id);
    print_draft(v_pol_sum.policy_status_desc);
  
    gc_default_line_height := 2;
  
    print_default_title('УВЕРЕННЫЙ СТАРТ');
    print_default_title('Договор страхования от несчастных случаев № ' || v_pol_sum.ids);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_default_insurer_info;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_insuree_info_custom(par_contact_info => v_insuree_info);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННЫЕ   
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ЗАСТРАХОВАННЫЕ - СУПРУГИ, РОДИТЕЛИ (УСЫНОВИТЕЛИ) ДЕТЕЙ, ЗАСТРАХОВАННЫХ ПО НАСТОЯЩЕМУ ДОГОВОРУ');
    print_assured_adult;
  
    print_default_chapter('ЗАСТРАХОВАННЫЕ – ДЕТИ (УСЫНОВЛЕННЫЕ)');
    print_assured_child;
    -------------------------------------------------------------------------------------------------
    -- СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ, СТРАХОВЫЕ ВЫПЛАТЫ
    -------------------------------------------------------------------------------------------------
    blank_cell(par_width => 0, par_ln => 1);
    print_default_chapter('СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВЫЕ ПРЕМИИ, СТРАХОВЫЕ ВЫПЛАТЫ');
    print_programs;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОД СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    plpdf.linebreak;
    print_default_chapter('ПЕРИОД СТРАХОВАНИЯ');
    print_periods('СРОК ДОГОВОРА СТРАХОВАНИЯ', v_pol_sum);
  
    print_draft(v_pol_sum.policy_status_desc);
  
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    plpdf.linebreak;
    print_default_chapter('ДЕКЛАРАЦИЯ ЗАСТРАХОВАННОГО');
    print_declaration;
  
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    print_additional_conds;
  
    print_signes;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => l_blob);
  
    par_data         := l_blob;
    par_file_name    := 'strong_start_' || v_pol_sum.ids || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_strong_start_2014;

  /*
    Печатная форма по продукту Platinum Life с программами МБГ
    378726 Заявка на настройку продукта Platinum Life
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_platinum_life_mbg
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
    v_signer       typ_signer;
  
    PROCEDURE prn(par_text VARCHAR2) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => 1
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text);
    END;
  
    PROCEDURE print_sign_custom(par_is_detailed BOOLEAN DEFAULT TRUE) IS
    BEGIN
    
      IF v_pol_sum.policy_status_breif NOT IN ('B2B_PENDING', 'PROJECT')
      THEN
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - 5 - 45
                      ,p_y    => plpdf.getcurrenty
                      ,p_w    => 45
                      ,p_h    => 50);
      END IF;
    
      IF par_is_detailed
      THEN
        plpdf.printmultilinecell(p_txt      => 'Полисные условия к договору страхования жизни по программе «Platinum Life»  с приложением Комплексных условий страхования по дополнительной программе страхования «Медицина без границ плюс» получил'
                                ,p_w        => plpdf.getpagespace * 0.4
                                ,p_h        => 3
                                ,p_clipping => 0
                                ,p_ln       => 1);
      END IF;
    
      delete_row_print_cache;
      set_font(par_size => 7);
    
      gv_datas(1) := 'СТРАХОВАТЕЛЬ / ПРЕДСТАВИТЕЛЬ СТРАХОВАТЕЛЯ (только для юридических лиц)';
      gv_datas(2) := 'СТРАХОВЩИК';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_widths(1) := plpdf.getpagespace * 3 / 5;
      gv_widths(2) := plpdf.getpagespace * 2 / 5;
    
      row_print2;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Представитель по доверенности ' || v_signer.short_name || chr(13) || '(дов №' ||
                     v_signer.procuratory_num || ')';
    
      row_print2;
    
      set_font(par_size => 7);
    
      gv_datas(1) := '______________________ / ' || v_insuree_info.fio;
      gv_datas(2) := NULL;
      row_print2;
    
      gv_datas(1) := '          Подпись                   ФИО Страхователя';
      gv_datas(2) := NULL;
    
      row_print2;
    
    END print_sign_custom;
  
    PROCEDURE print_cash_surr_custom IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 2')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Договора страхования № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма на дату досрочного прекращения (расторжения) договора страхования рассчитывается как % от сформированного резерва по договору страхования на дату начала периода, в котором произошло досрочное прекращение (расторжение) договора страхования.'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr_custom;
  
    PROCEDURE print_additional_conds_custom IS
    BEGIN
      set_font;
      prn('10.1. Договор страхования заключен на основании Полисных условий к договору страхования жизни по программе «Platinum Life» и Комплексных условий страхования по дополнительной программе «Медицина без границ плюс», утвержденных Генеральным директором ООО «СК «Ренессанс Жизнь» № 211/ОД/14 от 21.11.2014.');
      prn('10.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) на договоре страхования, а также в приложениях и дополнительных соглашениях к нему.');
      prn('10.3. Время действия страховой защиты: 24 часа.');
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace * 2 / 3;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'К договору страхования прилагаются: ';
      gv_datas(2) := '1. Приложение №1: Полисные условия к договору страхования жизни по программе «Platinum Life» с приложением Комплексных условий страхования по дополнительной программе «Медицина без границ плюс».';
      row_print2;
      gv_datas(1) := NULL;
      gv_datas(2) := '2. Приложение № 2 Таблица гарантированных выкупных сумм по основной программе.';
      row_print2;
    END print_additional_conds_custom;
  
    PROCEDURE print_declaration_custom IS
    BEGIN
      set_font(par_style => gc_style_bold);
      prn('Настоящим я заявляю, что Застрахованный::');
      set_font;
      prn('9.1.НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, нервными расстройствами, психическими заболеваниями; НЕ употребляет  наркотики, токсические вещества, НЕ страдает алкоголизмом, или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита).');
      prn('9.2. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;');
      prn('9.3. НЕ страдает/страдал(а) следующими заболеваниями: близорукостью более 7 (семи) диоптрий, хроническая почечная недостаточность, поликистоз почек, неспецифический язвенный колит, болезнь Крона, сахарный диабет, гемофилия, сердечно-сосудистая патология (включая ишемическую болезнь сердца, аритмии (включая мерцательную аритмию), гипертонию (II-IV степени), тромбоэмболии, аневризмы сосудов, перенесенные инфаркты, инсульты, операции на сердце и сосудах и т.п.), цирроз печени, хронический гепатит, злокачественные или доброкачественные опухоли, туберкулез, а также иными хроническими заболеваниями, требующими постоянных консультаций, лечения, обследований или наблюдения.');
      prn('9.4. За последние 5 (пять) лет НЕ находился на больничном листе сроком 3 (три) недели и более (счет по каждому году, не учитывая острую респираторную инфекцию, грипп, травмы, не требующие госпитализации) и/или НЕ был направлен на стационарное лечение, или за последние 12 месяцев НЕ обращался за медицинской помощью, обследованием или консультацией по причине одного и того же заболевания более одного раза.');
      prn('9.5. В настоящий момент НЕ находится под наблюдением врача, на лечении, НЕ принимает лекарства в связи с каким-либо заболеванием (нарушением здоровья) или в отношении него НЕ запланировано лечение/операция и он/она НЕ планирует обратиться к врачу по причине какого-либо заболевания в ближайшее время.');
      prn('9.6. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.) или хобби.');
      prn('9.7. НЕ занимается:  любым видом спорта на профессиональной основе и/или систематическими занятиями любым видом спорта, направленными на достижение спортивных результатов (включая тренировки, подготовку и участие в соревнованиях); опасными видами спорта и/или хобби (например: авиацией, погружением в воду (на глубину свыше 40 метров), парашютным спортом, дельтапланеризмом, авто- мото- гонками, парусным спортом, альпинизмом, спелеологией, экстремальными видами велоспорта, контактными боевыми искусствами, конным спортом);не планирует пребывание в «горячих» точках планеты (территории военных конфликтов или нестабильности), местах с экстремальными условиями (большие высоты, глубины, экстремальные температуры, биологические риски для жизни и т.п.), не пользуется  авиатранспортом более 2 раз в неделю, железнодорожным транспортом (исключая электрички) более 1 раза в неделю.');
      prn('9.8. НЕ подавал заявления на страхование жизни, утраты трудоспособности (инвалидность) и от несчастных случаев, в которых ему/ей было отказано, которые были отложены или приняты на особых условиях (с применением повышающих коэффициентов, исключений или особых условий), а также заключенных договоров страхования, которые были расторгнуты по причине невозможности заключения или существенные условия которых были изменены по  результатам оценки степени риска.');
      prn('9.9. НЕ выкуривает более 30 (тридцати) сигарет в день. Разница между ростом (в см.) и весом (в кг.) Застрахованного не менее 80 и не более 120 (например, рост - 180 см, вес - 85 кг, разница составляет - 95, можно ответить ДА; рост 160 см, вес 85 кг, разница - 75 - ответ - НЕТ).');
    
      set_font(par_style => gc_style_bold);
      prn('Настоящим Страхователь заявляет, что Застрахованный (при выборе дополнительной программы «Медицина без границ плюс»):');
      set_font;
      prn('в настоящее время или в течение последних 10 лет не проходит/проходил(-а) стационарное, амбулаторное, восстановительное или превентивное лечение, либо Застрахованному лицу не устанавливался  по результатам обследования диагноз, либо не находится/находился под наблюдением врача-специалиста по поводу любого из нижеследующих заболеваний или состояний: ');
      prn('- рак или злокачественное новообразование любого типа, в т.ч. болезнь Ходжкина;');
      prn('- лейкемия (лейкоз) или любое заболевание крови, требующее лечения  сроком не менее одного месяца (например, анемия, лимфома, миелома, нарушение свертываемости крови, гемофилия или повышенная кровоточивость сосудов и т.д.);');
      prn('- рак in situ (неинвазивный рак, без прорастания) или любые предраковые (предопухолевые) заболевания или патологические изменения органов и тканей (дисплазии), имеющие высокую вероятность перерождения в злокачественные новообразования, включая, но не ограничиваясь предраковыми изменениями в области молочных желез / женских половых органов, мочевого пузыря или простаты;');
      prn('- любые формы заболеваний сердца (например, сердечный приступ, стенокардия, перенесенный инфаркт миокарда, кардиосклероз, кардиомиопатия, нарушения клапанов сердца, стеноз/порок, шумы в сердце или ревматизм; (не включая лечение только в связи с высоким кровяным давлением и/или высоким уровнем холестерина);');
      prn('- любые формы инсульта; ');
      prn('- любая форма диабета.');
      prn('Если в настоящее время Застрахованный проходит обследование по поводу симптомов, которые могут быть проявлением какого-либо из вышеуказанных  заболеваний или состояний, либо  ожидает результатов диагностики, Застрахованному следует дождаться получения результатов, чтобы корректно ответить на утверждения.');
    
      set_font(par_style => gc_style_bold);
      prn('Да, я могу подписать настоящую декларацию и заявляю:');
      set_font;
      prn('- что я согласен(-на) с утверждениями, заявленными в настоящей Декларации, т.е. я подтверждаю достоверность сведений содержащейся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;');
      prn('- что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования;');
      prn('- что я обязуюсь незамедлительно письменно уведомить Страховщика в случае изменения степени риска при первой представившейся возможности. Я понимаю, что изменение степени риска может повлечь оплату дополнительной страховой премии и/или изменение условий договора страхования. Я также понимаю, что в случае моего отказа проинформировать Страховщика об изменении степени риска и уплатить дополнительную страховую премию и/или изменить условия страхования, договор страхования будет расторгнут Страховщиком в одностороннем порядке и страховые выплаты по нему будут невозможны;');
      prn('- что Страхователь/Застрахованный/его родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных корпорациях и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях');
      prn('- что я прочел(-а), понял(-а) и согласен(-а) с «Полисными условиями» к Договору страхования по программе «Platinum Life», с Комплексными условиями страхования по дополнительной программе «Медицина без границ плюс»;');
      prn('- что на момент заключения данного договора страхования общая страховая сумма (сумма страховых сумм) по любым другим известным мне договорам страхования со Страховщиком в отношении Застрахованного по страховым рискам: «Дожитие с возвратом страховых взносов в случае смерти Застрахованного» / «Смерть в результате несчастного случая» / «Смерть АВИА/ЖД» не превышает 10 000 000 (десять миллионов) рублей.');
      prn('- что размер годовой страховой премии по данному договору страхования не превышает 20% (двадцать процентов) годового дохода Страхователя, предшествующего заключению договора страхования;');
      prn('- подтверждаю, что ни  я, ни мои  родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях (при наличии родственников, замещающие вышеуказанные должности, заполняется анкета).');
      prn('Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставляет ООО «СК «Ренессанс Жизнь» согласие на обработку (сбор, систематизацию, накопление, хранение, уточнение (обновление, изменение), использование, распространение, обезличивание, блокирование, уничтожение, как на бумажных, так и на электронных носителях, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям, Сервисной компании) своих персональных данных, содержащих в настоящем Договоре, в том числе данных о состоянии здоровья, в целях исполнения между Страхователем и Страховщиком Договора страхования, а также в целях продвижения товаров, работ, услуг на рынке страхования путём осуществления прямых контактов с помощью средств связи, при этом такое согласие дается Страхователем/ Застрахованным Страховщику  на срок действия Договора страхования и в течение 15 лет после окончания срока действия Договора страхования и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
    
    END print_declaration_custom;
  
    PROCEDURE print_periods_custom IS
    BEGIN
      set_font(par_style => gc_style_bold);
      prn('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: с ' ||
          to_char(v_pol_sum.start_date, 'dd.mm.yyyy "г."') || ' по ' ||
          to_char(v_pol_sum.end_date, 'dd.mm.yyyy "г."') || ' ' || v_pol_sum.policy_period_desc);
      prn('СРОК СТРАХОВАНИЯ ПО ОСНОВНОЙ ПРОГРАММЕ СТРАХОВАНИЯ');
      set_font(par_style => gc_style_regular);
      prn('По страховому риску «ДОЖИТИЕ С ВОЗВРАТОМ СТРАХОВЫХ ВЗНОСОВ В СЛУЧАЕ СМЕРТИ ЗАСТРАХОВАННОГО»:');
      prn('НАЧАЛО: 00:00 1-го дня, следующего за датой оплаты страховой премии (первого страхового взноса)');
      prn('ОКОНЧАНИЕ: 23:59 даты окончания срока действия договора страхования');
    
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ ПО ДОПОЛНИТЕЛЬНЫМ ПРОГРАММАМ СТРАХОВАНИЯ (СТРАХОВЫМ РИСКАМ) ЗА ИСКЛЮЧЕНИЕМ ПРОГРАММЫ «МЕДИЦИНА БЕЗ ГРАНИЦ ПЛЮС»:');
      set_font(par_style => gc_style_regular);
      prn('НАЧАЛО: 00:00 4 (четвертого) дня, следующего за датой оплаты страховой премии (первого страхового взноса)');
      prn('ОКОНЧАНИЕ: 23:59 даты окончания первого страхового года');
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ ПО ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЕ «МЕДИЦИНА БЕЗ ГРАНИЦ ПЛЮС»:');
      set_font(par_style => gc_style_regular);
      prn('НАЧАЛО: 00:00 1-го дня, следующего за датой оплаты страховой премии (первого страхового взноса)');
      prn('ОКОНЧАНИЕ: 23:59 даты окончания первого страхового года');
      set_font(par_style => gc_style_italic);
      prn('Если Страхователь за 30 (тридцать) календарных дней до дня окончания срока страхования по указанным дополнительным программам не направит письменное заявление Страховщику о намерении исключить какую-либо из указанных  программ или рисков из договора страхования или внести в них изменения, срок страхования по указанным дополнительным программам (страховым рискам) продлевается до даты наступления очередной страховой годовщины.');
    END print_periods_custom;
  
    PROCEDURE print_programs_custom IS
      v_total_fee NUMBER := 0;
    BEGIN
      set_font;
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 4;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
    
      gv_datas(1) := 'Программа страхования';
      gv_datas(2) := 'Страховая (гарантированная) сумма, рубли';
      gv_datas(3) := 'Страховая премия (взнос) по каждой программе, рубли';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_datas(1) := 'ОСНОВНАЯ ПРОГРАММА:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'RL';
      gv_borders(2) := 'R';
      gv_borders(3) := 'R';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,nvl(pc.fee, 0) AS fee
                  --                        ,pkg_rep_utils.to_money_sep(NVL(pc.fee,0)) AS fee_print
                  -- ,SUM(pc.fee) over() AS total_fee
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'RECOMMENDED'
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        v_total_fee := v_total_fee + rec.fee;
        row_print2(par_h => 3);
      END LOOP;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховая сумма, рубли';
      gv_datas(3) := 'Страховая премия (взнос) по каждой программе, рубли';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_datas(1) := 'ДОПОЛНИТЕЛЬНЫЕ ПРОГРАММЫ:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'TRL';
      gv_borders(2) := 'TR';
      gv_borders(3) := 'TR';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,nvl(pc.fee, 0) AS fee
                  --                        ,pkg_rep_utils.to_money_sep(pc.fee) AS fee_print
                  --                        ,SUM(pc.fee) over() AS total_fee
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'MANDATORY'
                  --AND plo.brief NOT LIKE '%DD_SURGERY'
                   ORDER BY pl.sort_order)
      LOOP
        v_total_fee := v_total_fee + rec.fee;
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        row_print2(par_h => 3);
      END LOOP;
    
      gv_datas(1) := 'МЕДИЦИНА БЕЗ ГРАНИЦ ПЛЮС:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      row_print2(par_h => 3);
    
      FOR rec IN (SELECT '-' || pl.public_description AS description
                        ,CASE
                           WHEN plo.brief = 'WOP_DD_SURGERY' THEN
                            'величина страховой премии (взносов) по дополнительной программе «Медицина без границ»'
                           ELSE
                            chr(13) || chr(13) || chr(13) ||
                            pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) || '*'
                         END ins_amount
                         --                        ,pkg_rep_utils.to_money_sep(pc.fee) AS fee
                        ,row_number() over(ORDER BY pl.sort_order) AS rn
                         --                        ,pkg_rep_utils.to_money_sep(SUM(pc.fee) over()) AS total_fee
                        ,nvl(SUM(pc.fee) over(), 0) total_fee
                        ,plo.brief
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                     AND plo.brief LIKE '%DD_SURGERY'
                   ORDER BY decode(plo.brief, 'DMS_DD_SURGERY', 1, 'WOP_DD_SURGERY', 2))
      LOOP
      
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        IF rec.rn = 1
        THEN
          v_total_fee := v_total_fee + rec.total_fee;
          gv_datas(3) := pkg_rep_utils.to_money_sep(rec.total_fee);
          gv_borders(3) := 'LR';
        ELSE
          gv_datas(3) := NULL;
          gv_borders(3) := 'LR';
        END IF;
      
        row_print2(par_h => 3);
      
      END LOOP;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 5;
      gv_widths(2) := plpdf.getpagespace / 6;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_datas(1) := 'ИТОГО СТРАХОВАЯ ПРЕМИЯ (ВЗНОС): ';
      gv_datas(2) := pkg_rep_utils.to_money_sep(v_total_fee);
    
      row_print2(par_h => 3);
    
      set_font(par_style => gc_style_italic);
      prn('Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.');
      set_font;
      prn('* Страховая сумма по программе «Обращение Застрахованного лица в Сервисную компанию/к Страховщику с последующей организацией лечения в связи с диагностированием смертельно опасного заболевания и/или назначением проведения хирургического вмешательства» равна 12 500 000 рублей в год, но не более 25 000 000 рублей за весь срок действия страхования дополнительной программы  договора страхования «Медицина без границ плюс», включая все очередные сроки страхования или его пролонгации.');
      prn('Настоящим договором устанавливаются следующие лимиты в пределах страховой суммы по дополнительной программе страхования «Медицина без границ плюс» в течение страхового года:');
      prn('- При оплате услуг на транспортировку Застрахованного и Сопровождающего его лица - в размере 250 000 рублей;');
      prn('- При оплате услуг на проживание Застрахованного и Сопровождающего его лица - в размере 250 000 рублей (максимум 10 000 рублей за ночь). Оплата услуг по транспортировке и проживанию при превышении указанных лимитов осуществляется Страхователем /Застрахованным самостоятельно. Страховая сумма по программе страхования «Освобождение от уплаты страховой премии / страховых взносов в результате первичного диагностирования смертельно опасного заболевания и/или назначения проведения хирургического вмешательства» равна величине страховой премии / взноса по дополнительной программе «Медицина без границ плюс».');
      prn('Поскольку все страховые выплаты по дополнительной программе «Медицина без границ плюс» осуществляются в Евро, то для целей расчета в рублях общей стоимости оказанной медицинской и иной помощи фиксируется валютный курс в размере 1 евро = 50 рублей. В случае, если оплата стоимости медицинской и иной помощи, оказанной Застрахованному, осуществлена в валюте, отличной от Евро, то она конвертируется в Евро по курсу ЕЦБ на дату оплаты. Максимальный размер общей стоимости оказанной медицинской и иной помощи по настоящему договору составляет 250 000 Евро на срок, указанный в настоящем Договоре, и 500 000 Евро за весь срок действия настоящей программы, включая очередные сроки страхования.');
      set_font(par_style => gc_style_italic);
      prn('**Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4 Полисных условий и в Разделе 4 Комплексных условий страхования по дополнительной программе «Медицина без границ плюс».');
      set_font;
    END print_programs_custom;
  
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
    v_signer       := get_signer('pkg_rep_plpdf.rep_platinum_life_mbg');
  
    init(par_default_font_size => 8);
    print_draft(v_pol_sum.policy_status_desc);
  
    gc_default_line_height := 3;
  
    print_default_title('ДОГОВОР СТРАХОВАНИЯ №' || v_pol_sum.pol_num);
    print_default_title('ПО ПРОГРАММЕ Platinum Life');
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_default_insurer_info;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_insuree_info(par_contact_info => v_insuree_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    print_assured_info(par_contact_info => v_assured_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    -- ВАЛЮТА ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    --    print_default_chapter('ВАЛЮТА ДОГОВОРА');
    print_currency(par_policy_summary => v_pol_sum);
  
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПРОГРАММЫ СТРАХОВАНИЯ');
    print_programs_custom;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОД СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПЕРИОД СТРАХОВАНИЯ');
    print_periods_custom;
    -------------------------------------------------------------------------------------------------
    --ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ВЗНОСОВ):
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ВЗНОСОВ): ', 0);
    plpdf.printcell(p_txt => v_pol_sum.payment_terms, p_h => -1, p_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ТЕРРИТОРИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ: ВЕСЬ МИР, 24 ЧАСА В СУТКИ');
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННОГО');
    print_benificiary_table(v_policy_id, 3);
  
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО');
    print_declaration_custom;
  
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    print_additional_conds_custom;
  
    print_sign_custom;
  
    print_cash_surr_custom;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_platinum_life_mbg;

  /*
    Процедура формирования полиса по продукту Инвестор Плюс
    376782 Инвестор плюс, серия 688
    Доброхотова И., ноябрь, 2014
  */
  PROCEDURE rep_investor_plus
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
  
    v_cash_surr_table_cur typ_cur_cash_surr_table;
  
    PROCEDURE print_programs IS
      c_height  NUMBER := 30;
      c_weights plpdf_type.t_row_widths;
    
      v_ins_amount     VARCHAR2(255);
      v_fee            VARCHAR2(255);
      v_prod_line_desc VARCHAR2(255);
      v_cur_row_count  NUMBER;
    BEGIN
      set_font(par_size  => gv_default_font_size + 1
              ,par_style => gc_style_bold
              ,par_color => gc_color_orange);
      plpdf.printcell(p_txt   => 'Основная программа'
                     ,p_align => 'L'
                     ,p_h     => -1
                     ,p_ln    => 1);
      set_font;
    
      delete_row_print_cache;
    
      set_font(par_style => gc_style_bold);
    
      gv_widths(1) := plpdf.getpagespace / 6 * 2;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
      gv_widths(4) := plpdf.getpagespace / 6;
      gv_widths(5) := plpdf.getpagespace / 6;
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
      gv_borders(4) := 1;
      gv_borders(5) := 1;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := gc_style_bold;
      gv_styles(5) := gc_style_bold;
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
      gv_aligns(5) := 'C';
    
      gv_datas(1) := 'Страховые риски';
      gv_datas(2) := 'Программы страхования';
      gv_datas(3) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
      gv_datas(4) := 'Доля от общего страхового взноса' || gc_new_line || '(%)';
      gv_datas(5) := 'Страховой взнос по каждой программе' || gc_new_line || '(рубли)';
    
      row_print2(par_h => 4);
    
      gv_styles(2) := gc_style_regular;
      gv_styles(3) := gc_style_regular;
      gv_styles(4) := gc_style_regular;
      gv_styles(5) := gc_style_regular;
    
      gv_borders(1) := 'LR';
      gv_aligns(1) := 'L';
    
      FOR rec IN (SELECT rownum rn
                        ,t.*
                        ,COUNT(*) over() total_rn
                    FROM (SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
                                ,pl.description
                                ,plo.brief
                                ,pkg_rep_utils.to_money_sep(100 * pc.fee / SUM(pc.fee) over()) fee_part
                                ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                            FROM as_asset           aa
                                ,p_cover            pc
                                ,t_prod_line_option plo
                                ,t_product_line     pl
                                ,status_hist        sh
                           WHERE pc.as_asset_id = aa.as_asset_id
                             AND aa.p_policy_id = v_policy_id
                             AND pc.t_prod_line_option_id = plo.id
                             AND plo.product_line_id = pl.id
                             AND pc.status_hist_id = sh.status_hist_id
                             AND sh.brief != 'DELETED'
                             AND plo.brief IN ('OIL', 'GOLD')
                           ORDER BY CASE plo.brief
                                      WHEN 'OIL' THEN
                                       1
                                      WHEN 'GOLD' THEN
                                       2
                                    END) t)
      LOOP
        v_cur_row_count := rec.total_rn;
        CASE rec.rn
          WHEN 1 THEN
            gv_styles(1) := gc_style_regular;
            gv_datas(1) := 'Дожитие Застрахованного до даты окончания срока действия договора страхования;' ||
                           gc_new_line || 'Смерть Застрахованного по любой причине*' || gc_new_line ||
                           gc_new_line;
          WHEN 2 THEN
            gv_styles(1) := gc_style_italic;
            gv_datas(1) := '*Страховая выплата в случае смерти равна сумме уплаченных страховых взносов и 100% от дополнительной страховой суммы на дату наступления страхового случая, согласно п. 10.3. Полисных условий.' ||
                           gc_new_line ||
                           'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4.3 Полисных условий.';
        END CASE;
      
        gv_datas(2) := rec.description;
        gv_datas(3) := rec.ins_amount;
        gv_datas(4) := rec.fee_part;
        gv_datas(5) := rec.fee;
      
        IF rec.rn = 2
        THEN
          gv_borders(1) := 'LBR';
          gv_borders(2) := 'LRB';
          gv_borders(3) := 'LRB';
          gv_borders(4) := 'LRB';
          gv_borders(5) := 'LRB';
        
        END IF;
      
        IF rec.rn = 1
        THEN
          IF rec.total_rn = 1
          THEN
            gv_borders(1) := 'LR';
            gv_borders(2) := 'LR';
            gv_borders(3) := 'LR';
            gv_borders(4) := 'LR';
            gv_borders(5) := 'LR';
          ELSE
            gv_borders(1) := 'LR';
            gv_borders(2) := 'LRB';
            gv_borders(3) := 'LRB';
            gv_borders(4) := 'LRB';
            gv_borders(5) := 'LRB';
          
          END IF;
        END IF;
        row_print2(par_h => 4);
      
      END LOOP;
    
      IF v_cur_row_count = 1
      THEN
      
        gv_styles(1) := gc_style_italic;
        gv_datas(1) := '*Страховая выплата в случае смерти равна сумме уплаченных страховых взносов и 100% от дополнительной страховой суммы на дату наступления страхового случая, согласно п. 10.3. Полисных условий.' ||
                       gc_new_line ||
                       'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4.3 Полисных условий.';
      
        gv_datas(2) := NULL;
        gv_datas(3) := NULL;
        gv_datas(4) := NULL;
        gv_datas(5) := NULL;
      
        gv_borders(1) := 'LBR';
        row_print2(par_h => 4);
      END IF;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'Любая причина  —  событие (болезнь или несчастный случай), возникшее в течение действия договора, а также  самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.';
      gv_styles(1) := 'I';
      gv_borders(1) := 1;
      gv_widths(1) := plpdf.getpagespace;
    
      row_print2;
    
      BEGIN
        SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
              ,nvl(pl.public_description, pl.description) || '**'
              ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
          INTO v_fee
              ,v_prod_line_desc
              ,v_ins_amount
          FROM as_asset           aa
              ,p_cover            pc
              ,t_prod_line_option plo
              ,t_product_line     pl
              ,status_hist        sh
         WHERE pc.as_asset_id = aa.as_asset_id
           AND aa.p_policy_id = v_policy_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND plo.brief = 'AD'
           AND pc.status_hist_id = sh.status_hist_id
           AND sh.brief != 'DELETED';
      
        set_font(par_size  => gv_default_font_size + 1
                ,par_style => gc_style_bold
                ,par_color => gc_color_orange);
      
        --plpdf.linebreak;
        plpdf.printcell(p_txt   => 'Дополнительная программа «Страхование от несчастных случаев»'
                       ,p_align => 'L'
                       ,p_h     => -1
                       ,p_ln    => 1);
      
        set_font;
      
        delete_row_print_cache;
      
        gv_widths(1) := plpdf.getpagespace / 2;
        gv_widths(2) := plpdf.getpagespace / 4;
        gv_widths(3) := plpdf.getpagespace / 4;
      
        gv_styles(1) := gc_style_bold;
        gv_styles(2) := gc_style_bold;
        gv_styles(3) := gc_style_bold;
      
        gv_aligns(1) := 'L';
        gv_aligns(2) := 'C';
        gv_aligns(3) := 'C';
      
        gv_borders(1) := 1;
        gv_borders(2) := 1;
        gv_borders(3) := 1;
      
        gv_datas(1) := 'Страховые риски';
        gv_datas(2) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
        gv_datas(3) := 'Страховой взнос' || gc_new_line || '(рубли)';
      
        row_print2(par_h => 4);
      
        gv_styles(1) := gc_style_regular;
        gv_styles(2) := gc_style_regular;
        gv_styles(3) := gc_style_regular;
      
        gv_datas(1) := v_prod_line_desc;
        gv_datas(2) := v_ins_amount;
        gv_datas(3) := v_fee;
      
        row_print2(par_h => 4);
      
        plpdf.printmultilinecell(p_txt => '** Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленные в Разделе 4 Полисных условий'
                                ,p_ln  => 1);
      
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'ИТОГО ОБЩИЙ СТРАХОВОЙ ВЗНОС (уплачивается раз в год):';
      gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_policy_fee(par_policy_id          => v_policy_id
                                                                         ,par_include_admin_cost => FALSE));
    
      gv_widths(1) := plpdf.getpagespace / 4 * 3;
      gv_widths(2) := plpdf.getpagespace / 4;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      row_print2;
    
      -- Безумный способ получить админ издержки.
      -- Люди, когда появится вминяемая функция для получения админ издержек, заменити это место пожалуйста!!!     
      gv_datas(1) := 'АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ (уплачиваются раз в год):';
      gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_policy_fee(v_policy_id, TRUE) -
                                                pkg_policy.get_policy_fee(v_policy_id, FALSE));
    
      row_print2;
    
      set_font(par_style => gc_style_italic);
      plpdf.printmultilinecell(p_txt => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.'
                              ,p_ln  => 1);
    
    END print_programs;
  
    PROCEDURE print_periods IS
    BEGIN
      set_font;
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 6;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
      gv_widths(4) := plpdf.getpagespace / 6;
      gv_widths(5) := plpdf.getpagespace / 6;
      gv_widths(6) := plpdf.getpagespace / 6;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := NULL;
      gv_styles(5) := gc_style_bold;
      gv_styles(6) := NULL;
    
      gv_datas(1) := 'СРОК СТРАХОВАНИЯ:';
      gv_datas(2) := v_pol_sum.policy_period_desc;
      gv_datas(3) := 'НАЧАЛО:';
      gv_datas(4) := to_char(v_pol_sum.start_date, 'hh24:mi dd.mm.yyyy');
      gv_datas(5) := 'ОКОНЧАНИЕ:';
      gv_datas(6) := to_char(v_pol_sum.end_date, 'hh24:mi dd.mm.yyyy');
    
      row_print2;
      /*    
            plpdf.printmultilinecell(p_h        => 3
                                    ,p_clipping => 0
                                    ,p_txt      => 'Договор страхования (Полис) вступает в силу с 00:00 (ноля часов ноля минут) дня, следующего за датой принятия банком платежного поручения с исполнением на оплату страховой премии в полном объеме. В случае если страховая премия не поступит на расчетный счет Страховщика в течение 5-ти рабочих дней с даты подписания Страхователем договора страхования (Полиса), договор страхования (Полис) считается не вступившем в силу.'
                                    ,p_ln       => 1);
      */
    END print_periods;
  
    PROCEDURE print_payment_terms IS
      v_others_payment_date VARCHAR2(500);
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'ДАТА УПЛАТЫ ПЕРВОГО СТРАХОВОГО ВЗНОСА: '
                     ,p_ln  => 0);
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => to_char(v_pol_sum.fist_payment_date, 'dd.mm.yyyy')
                     ,p_ln  => 1);
    
      SELECT substr(MAX(pay_date), 3)
        INTO v_others_payment_date
        FROM (SELECT sys_connect_by_path(to_char(ADD_MONTHS(v_pol_sum.fist_payment_date, LEVEL * 12)
                                                ,'dd.mm.yyyy')
                                        ,'; ') pay_date
                FROM dual
              CONNECT BY LEVEL <= (SELECT per.period_value - 1
                                     FROM p_policy pp
                                         ,t_period per
                                    WHERE pp.policy_id = v_policy_id
                                      AND per.id = pp.period_id));
    
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ: '
                     ,p_ln  => 0);
      plpdf.printcell(p_txt => v_others_payment_date, p_ln => 1);
    
    END print_payment_terms;
  
    PROCEDURE prn(par_text VARCHAR2) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => 1
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text);
    END;
    /*  
    PROCEDURE print_declaration IS
    BEGIN
      set_font(par_style => gc_style_bold);
    
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
    
      set_font;
      prn('8.1. НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ страдает мышечной дистрофией, тяжелыми нервными расстройствами, психическими заболеваниями, онкологическими заболеваниями;  НЕ употребляет  наркотики, токсические вещества; НЕ страдает алкоголизмом, или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита);');
      prn('8.2. НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;');
      prn('8.3. Мне не известно о каких-либо внешних факторах, представляющих угрозу жизни или здоровью Застрахованного.');
    
      set_font(par_style => gc_style_bold);
      prn('Да, я могу подписать настоящую декларацию и заявляю:');
    
      set_font;
      prn('- что я согласен(-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;');
      prn('- что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования.');
      prn('- Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом Российской Федерации «О персональных данных» № 152-ФЗ выражают Страховщику согласие на обработку своих персональных данных, включающих: фамилию, имя, отчество, пол, дату рождения, паспортные данные (серия, номер кем и когда выдан), адрес проживания, контактный телефон, данные о состоянии моего здоровья, заболеваниях, травмах, случаях обращения за медицинской помощью, - в целях продвижения товаров, работ, услуг на рынке путем осуществления прямых контактов с помощью средств связи, в целях обеспечения исполнения настоящего Договора.');
      prn('Обработка персональных данных, в том числе автоматизированная, осуществляется посредством сбора, систематизации, накопления, хранения, уточнения (обновления, изменения), использования, распространения, передачу, обезличивания, блокирования, уничтожения персональных данных, как на бумажных, так и на электронных носителях.');
      prn('Настоящее согласие Страхователя/Застрахованного действительно в течение срока действия Договора страхования и в течение 15 лет после окончания срока действия Договора и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
      prn('Подписывая настоящий Договор, Страхователь/Застрахованный подтверждает,  что его  родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных корпорациях и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях.');
    
    END print_declaration;
    
    PROCEDURE print_declaration_ad IS
    BEGIN
      set_font(par_style => gc_style_bold);
    
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
    
      set_font;
      prn('9.1. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания и т.п.);');
      prn('9.2. НЕ занимается опасными видами спорта или опасными видами увлечений (например, альпинизм, погружение под воду на глубину более 40 метров, в подводные пещеры, к останкам судов или строений, находящихся на дне, независимо от глубины погружения, прыжки с парашютом, скалолазание, автоспорт, непрофессиональная авиация) и не намеревается путешествовать в горячие точки планеты;');
      prn('9.3. Дополнительно я подтверждаю, что общая страховая сумма по любым договорам страхования, заключенным в отношении Застрахованного по риску «смерть в результате несчастного случая», учитывая также настоящее Заявление на страхование, не превышает 3 000 000 рублей.');
    END print_declaration_ad;*/
  
    PROCEDURE print_additional_conds IS
    BEGIN
      set_font;
      prn('8.1. Договор страхования заключен на основании Полисных условий страхования жизни по программе «Инвестор плюс», утвержденных приказом Генерального директора ООО «СК «Ренессанс Жизнь» № 201/ОД/14 от 14.11.2014. (далее «Полисные условия»).');
      prn('8.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в Договоре, а также в приложениях и дополнительных соглашениях к нему.');
      prn('8.3. Территория страхования: весь мир.');
      prn('8.4. Время действия страховой защиты: 24 часа.');
      prn('8.5. При досрочном прекращении действия договора выплата предусмотренной соответствующей программой страхования гарантированной выкупной суммы производится согласно таблице гарантированных выкупных сумм (Приложение № 1).');
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 5;
      gv_widths(2) := plpdf.getpagespace * 4 / 5;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := NULL;
      gv_datas(2) := '1. Таблица гарантированных выкупных сумм по основной программе (Приложение №1)';
      row_print2;
      gv_datas(1) := 'К полису прилагаются:';
      gv_datas(2) := '2. «Полисные условия»';
      row_print2;
      gv_datas(1) := NULL;
      gv_datas(2) := '3. Заявление на заключение договора № ' || to_char(v_pol_sum.pol_num);
      row_print2(par_h => 4);
    
    END print_additional_conds;
  
    PROCEDURE print_signes IS
      v_agent_num  ven_ag_contract_header.num%TYPE;
      v_agent_name contact.obj_name_orig%TYPE;
    BEGIN
      BEGIN
        SELECT ah.num          num
              ,c.obj_name_orig obj_name_orig
          INTO v_agent_num
              ,v_agent_name
          FROM ven_ag_contract_header ah
              ,contact                c
              ,t_sales_channel        sc
         WHERE ah.ag_contract_header_id =
               pkg_agn_control.get_current_policy_agent(v_pol_sum.policy_header_id)
           AND ah.agent_id = c.contact_id
           AND ah.t_sales_channel_id = sc.id;
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3; -- Array of widths
      gv_widths(2) := gv_widths(1);
      --      gv_widths(3) := gv_widths(1);
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      --      gv_aligns(3) := 'R';
    
      gv_datas(1) := upper('СТРАХОВАТЕЛЬ');
      gv_datas(2) := NULL;
      --      gv_datas(3) := NULL;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      --      gv_styles(3) := gc_style_bold;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      gv_datas(1) := '_____________________________________';
      gv_datas(2) := NULL;
      --      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      gv_datas(1) := 'ФИО Консультанта';
      gv_datas(2) := v_agent_name;
      --      gv_datas(3) := NULL;
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      --      gv_styles(3) := gc_style_regular;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Номер Консультанта';
      gv_datas(2) := v_agent_num;
      --      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Москва, Дата выдачи полиса:' || to_char(v_pol_sum.sign_date, 'dd.mm.yyyy');
      gv_datas(2) := NULL;
      --      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
    END print_signes;
  
    PROCEDURE print_cash_surr IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 1')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма рассчитывается как % от сформированного резерва по договору страхования на дату последнего оплаченного взноса или дату расторжения договора страхования, в зависимости от того, какая из дат является более ранней.'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr;
  
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
  
    init(par_default_font_size => 8);
    plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
    plpdf.setfooterprocname(p_proc_name => 'ins.pkg_rep_plpdf.footer_414', p_height => 27);
  
    print_draft(v_pol_sum.policy_status_desc);
  
    print_default_title('ИНВЕСТОР ПЛЮС');
    print_default_title('Полис страхования № ' || v_pol_sum.ids);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_default_insurer_info;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_insuree_info(par_contact_info => v_insuree_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    print_assured_info(par_contact_info => v_assured_info, par_version_num => gc_contact_info_ver2);
  
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПРОГРАММЫ СТРАХОВАНИЯ');
    print_programs;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОД СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПЕРИОД СТРАХОВАНИЯ');
    print_periods;
  
    -------------------------------------------------------------------------------------------------
    --УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОГО ВЗНОСА');
    print_payment_terms;
  
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННОГО');
    print_benificiary_table(v_policy_id, 3);
  
    /* -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО');
    print_declaration;
    
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО В СЛУЧАЕ ВЫБОРА ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЫ «СТРАХОВАНИЕ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ»
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО В СЛУЧАЕ ВЫБОРА ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЫ «СТРАХОВАНИЕ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ»');
    print_declaration_ad;*/
  
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    print_additional_conds;
  
    print_signes;
  
    print_cash_surr;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_investor_plus;

  /*
    Процедура формирования полиса по продуктам Investor и INVESTOR_LUMP
    379978: Инвестор (единовр и регулрная форма)
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_investor_new_2014
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
  
    v_cash_surr_table_cur typ_cur_cash_surr_table;
  
    PROCEDURE print_programs IS
      c_height  NUMBER := 30;
      c_weights plpdf_type.t_row_widths;
    
      v_ins_amount     VARCHAR2(255);
      v_fee            VARCHAR2(255);
      v_prod_line_desc VARCHAR2(255);
    
    BEGIN
      set_font(par_size  => gv_default_font_size + 1
              ,par_style => gc_style_bold
              ,par_color => gc_color_orange);
      plpdf.printcell(p_txt   => 'Основная программа'
                     ,p_align => 'L'
                     ,p_h     => -1
                     ,p_ln    => 1);
      set_font;
    
      delete_row_print_cache;
    
      set_font(par_style => gc_style_bold);
    
      gv_widths(1) := plpdf.getpagespace / 6 * 2;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
      gv_widths(4) := plpdf.getpagespace / 6;
      gv_widths(5) := plpdf.getpagespace / 6;
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
      gv_borders(4) := 1;
      gv_borders(5) := 1;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := gc_style_bold;
      gv_styles(5) := gc_style_bold;
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
      gv_aligns(5) := 'C';
    
      gv_datas(1) := 'Страховые риски';
      gv_datas(2) := 'Программы страхования';
      gv_datas(3) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
      IF v_pol_sum.product_brief = 'Investor'
      THEN
        gv_datas(4) := 'Доля от общего страхового взноса' || gc_new_line || '(%)';
        gv_datas(5) := 'Страховой взнос по каждой программе' || gc_new_line || '(рубли)';
      ELSIF v_pol_sum.product_brief = 'INVESTOR_LUMP'
      THEN
        gv_datas(4) := 'Доля от общей страховой премии' || gc_new_line || '(%)';
        gv_datas(5) := 'Страховая премия по каждой программе' || gc_new_line || '(рубли)';
      END IF;
      row_print2(par_h => 4);
    
      gv_styles(2) := gc_style_regular;
      gv_styles(3) := gc_style_regular;
      gv_styles(4) := gc_style_regular;
      gv_styles(5) := gc_style_regular;
    
      gv_borders(1) := 'LR';
      gv_aligns(1) := 'L';
    
      IF v_pol_sum.product_brief = 'Investor'
      THEN
        FOR rec IN (SELECT rownum rn
                          ,t.*
                          ,COUNT(*) over() total_rn
                      FROM (SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
                                  ,pl.description
                                  ,pkg_rep_utils.to_money_sep(100 * pc.fee / SUM(pc.fee) over()) fee_part
                                  ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                              FROM as_asset           aa
                                  ,p_cover            pc
                                  ,t_prod_line_option plo
                                  ,t_product_line     pl
                                  ,status_hist        sh
                             WHERE pc.as_asset_id = aa.as_asset_id
                               AND aa.p_policy_id = v_policy_id
                               AND pc.t_prod_line_option_id = plo.id
                               AND plo.product_line_id = pl.id
                               AND pc.status_hist_id = sh.status_hist_id
                               AND sh.brief != 'DELETED'
                               AND plo.brief IN ('PEPR_A', 'PEPR_B', 'PEPR_C')
                             ORDER BY CASE plo.brief
                                        WHEN 'PEPR_A' THEN
                                         1
                                        WHEN 'PEPR_B' THEN
                                         2
                                        WHEN 'PEPR_C' THEN
                                         3
                                      END) t)
        LOOP
          CASE rec.rn
            WHEN 1 THEN
              gv_styles(1) := gc_style_regular;
              gv_datas(1) := 'Дожитие Застрахованного до даты окончания срока действия договора страхования;' ||
                             gc_new_line || 'Смерть Застрахованного по любой причине*';
            WHEN 2 THEN
              gv_styles(1) := gc_style_italic;
              gv_datas(1) := '*Страховая выплата в случае смерти равна сумме уплаченных страховых взносов и 100% от дополнительной страховой суммы на дату наступления страхового случая, согласно п. 10.3. Полисных условий.';
            WHEN 3 THEN
              gv_styles(1) := gc_style_italic;
              gv_datas(1) := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4.3 Полисных условий.';
          END CASE;
        
          gv_datas(2) := rec.description;
          gv_datas(3) := rec.ins_amount;
          gv_datas(4) := rec.fee_part;
          gv_datas(5) := rec.fee;
        
          IF rec.rn = rec.total_rn
          THEN
            gv_borders(1) := 'LBR';
          END IF;
        
          row_print2;
        END LOOP;
      ELSIF v_pol_sum.product_brief = 'INVESTOR_LUMP'
      THEN
        FOR rec IN (SELECT rownum rn
                          ,t.*
                          ,COUNT(*) over() total_rn
                      FROM (SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
                                  ,pl.description
                                  ,pkg_rep_utils.to_money_sep(100 * pc.fee / SUM(pc.fee) over()) fee_part
                                  ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                              FROM as_asset           aa
                                  ,p_cover            pc
                                  ,t_prod_line_option plo
                                  ,t_product_line     pl
                                  ,status_hist        sh
                             WHERE pc.as_asset_id = aa.as_asset_id
                               AND aa.p_policy_id = v_policy_id
                               AND pc.t_prod_line_option_id = plo.id
                               AND plo.product_line_id = pl.id
                               AND pc.status_hist_id = sh.status_hist_id
                               AND sh.brief != 'DELETED'
                               AND plo.brief IN ('PEPR_A', 'PEPR_B', 'PEPR_A_PLUS')
                             ORDER BY CASE plo.brief
                                        WHEN 'PEPR_A_PLUS' THEN
                                         1
                                        WHEN 'PEPR_A' THEN
                                         2
                                        WHEN 'PEPR_B' THEN
                                         3
                                      END) t)
        LOOP
          CASE rec.rn
            WHEN 1 THEN
              gv_styles(1) := gc_style_regular;
              gv_datas(1) := 'Дожитие Застрахованного до даты окончания срока действия договора страхования;' ||
                             gc_new_line || 'Смерть Застрахованного по любой причине*';
            WHEN 2 THEN
              gv_styles(1) := gc_style_italic;
              gv_datas(1) := '*Страховая выплата в случае смерти равна сумме уплаченных страховых взносов и 100% от дополнительной страховой суммы на дату наступления страхового случая, согласно п. 10.3. Полисных условий.';
            WHEN 3 THEN
              gv_styles(1) := gc_style_italic;
              gv_datas(1) := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4.3 Полисных условий.';
          END CASE;
        
          gv_datas(2) := rec.description;
          gv_datas(3) := rec.ins_amount;
          gv_datas(4) := rec.fee_part;
          gv_datas(5) := rec.fee;
        
          IF rec.rn = rec.total_rn
          THEN
            gv_borders(1) := 'LBR';
          END IF;
        
          row_print2;
        
        END LOOP;
      
      END IF;
      delete_row_print_cache;
    
      gv_datas(1) := 'Любая причина  —  событие (болезнь или несчастный случай), возникшее в течение действия договора, а также  самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.';
      gv_styles(1) := 'I';
      gv_borders(1) := 1;
      gv_widths(1) := plpdf.getpagespace;
    
      row_print2;
    
      BEGIN
        SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
              ,nvl(pl.public_description, pl.description) || '**'
              ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
          INTO v_fee
              ,v_prod_line_desc
              ,v_ins_amount
          FROM as_asset           aa
              ,p_cover            pc
              ,t_prod_line_option plo
              ,t_product_line     pl
              ,status_hist        sh
         WHERE pc.as_asset_id = aa.as_asset_id
           AND aa.p_policy_id = v_policy_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND plo.brief = 'AD'
           AND pc.status_hist_id = sh.status_hist_id
           AND sh.brief != 'DELETED';
      
        set_font(par_size  => gv_default_font_size + 1
                ,par_style => gc_style_bold
                ,par_color => gc_color_orange);
      
        --plpdf.linebreak;
        plpdf.printcell(p_txt   => 'Дополнительная программа «Страхование от несчастных случаев»'
                       ,p_align => 'L'
                       ,p_h     => -1
                       ,p_ln    => 1);
      
        set_font;
      
        delete_row_print_cache;
      
        gv_widths(1) := plpdf.getpagespace / 2;
        gv_widths(2) := plpdf.getpagespace / 4;
        gv_widths(3) := plpdf.getpagespace / 4;
      
        gv_styles(1) := gc_style_bold;
        gv_styles(2) := gc_style_bold;
        gv_styles(3) := gc_style_bold;
      
        gv_aligns(1) := 'L';
        gv_aligns(2) := 'C';
        gv_aligns(3) := 'C';
      
        gv_borders(1) := 1;
        gv_borders(2) := 1;
        gv_borders(3) := 1;
      
        gv_datas(1) := 'Страховые риски';
        gv_datas(2) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
        IF v_pol_sum.product_brief = 'Investor'
        THEN
          gv_datas(3) := 'Страховой взнос' || gc_new_line || '(рубли)';
        ELSIF v_pol_sum.product_brief = 'INVESTOR_LUMP'
        THEN
          gv_datas(3) := 'Страховая премия' || gc_new_line || '(рубли)';
        END IF;
      
        row_print2(par_h => 4);
      
        gv_styles(1) := gc_style_regular;
        gv_styles(2) := gc_style_regular;
        gv_styles(3) := gc_style_regular;
      
        gv_datas(1) := v_prod_line_desc;
        gv_datas(2) := v_ins_amount;
        gv_datas(3) := v_fee;
      
        row_print2(par_h => 4);
      
        plpdf.printmultilinecell(p_txt => '** Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленные в Разделе 4 Полисных условий'
                                ,p_ln  => 1);
      
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      delete_row_print_cache;
    
      IF v_pol_sum.product_brief = 'INVESTOR_LUMP'
      THEN
        gv_datas(1) := 'ИТОГО ОБЩИЙ СТРАХОВОЙ ВЗНОС (уплачивается единовременно):';
      ELSE
        gv_datas(1) := 'ИТОГО ОБЩИЙ СТРАХОВОЙ ВЗНОС (уплачивается раз в год):';
      END IF;
    
      gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_policy_fee(par_policy_id          => v_policy_id
                                                                         ,par_include_admin_cost => FALSE));
    
      gv_widths(1) := plpdf.getpagespace / 4 * 3;
      gv_widths(2) := plpdf.getpagespace / 4;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      row_print2;
    
      IF v_pol_sum.product_brief = 'INVESTOR_LUMP'
      THEN
        gv_datas(1) := 'АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ (уплачиваются единовременно):';
      ELSE
        gv_datas(1) := 'АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ (уплачиваются раз в год):';
      END IF;
      --      gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_policy_fee(v_policy_id, TRUE) -                                                pkg_policy.get_policy_fee(v_policy_id, FALSE));
      gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_admin_cost_fee(v_policy_id));
      row_print2;
    
      set_font(par_style => gc_style_italic);
      plpdf.printmultilinecell(p_txt => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.'
                              ,p_ln  => 1);
    
    END print_programs;
  
    PROCEDURE print_periods_regular IS
      v_text VARCHAR2(50);
    BEGIN
      print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. СРОК СТРАХОВАНИЯ');
    
      set_font(par_style => gc_style_bold, par_color => gc_color_orange);
    
      plpdf.printmultilinecell(p_h        => 3
                              ,p_clipping => 0
                              ,p_txt      => 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' ||
                                             v_pol_sum.policy_period_desc || ' c ' ||
                                             to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' по ' ||
                                             to_char(v_pol_sum.end_date, 'dd.mm.yyyy')
                              ,p_ln       => 1);
    
      set_font;
    
      plpdf.printmultilinecell(p_h        => 3
                              ,p_clipping => 0
                              ,p_txt      => 'Договор страхования вступает в силу с 00:00 (ноля часов ноля минут) дня, следующего за датой принятия банком платежного поручения с исполнением на оплату страхового взноса в полном объеме. В случае если первый страховой взнос не поступит на расчетный счет Страховщика в течение 5-ти рабочих дней с даты подписания Страхователем договора страхования, договор страхования считается не вступившем в силу.'
                              ,p_ln       => 1);
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 8 * 3;
      gv_widths(2) := plpdf.getpagespace / 8;
      gv_widths(3) := plpdf.getpagespace / 8 * 1.5;
      gv_widths(4) := plpdf.getpagespace / 8;
      gv_widths(5) := plpdf.getpagespace / 8 * 1.5;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'L';
      gv_aligns(5) := 'C';
    
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := NULL;
      gv_styles(4) := gc_style_bold;
      gv_styles(5) := NULL;
    
      blank_cell(par_ln => 1);
    
      FOR rec IN (WITH main AS
                     (SELECT pl.description
                           ,pc.start_date
                           ,pc.end_date
                           ,CASE
                              WHEN plt.brief IN ('RECOMMENDED', 'MANDATORY') THEN
                               1
                              ELSE
                               2
                            END AS group_num
                       FROM as_asset            aa
                           ,p_cover             pc
                           ,t_prod_line_option  plo
                           ,t_product_line      pl
                           ,t_product_line_type plt
                           ,t_product_ver_lob   pvl
                           ,t_lob               l
                      WHERE aa.p_policy_id = v_policy_id
                        AND aa.as_asset_id = pc.as_asset_id
                        AND pc.t_prod_line_option_id = plo.id
                        AND plo.product_line_id = pl.id
                        AND pl.product_ver_lob_id = pvl.t_product_ver_lob_id
                        AND pl.product_line_type_id = plt.product_line_type_id
                        AND pvl.lob_id = l.t_lob_id
                        AND pc.status_hist_id != pkg_cover.get_status_hist_id_del
                        AND nvl(pl.brief, 'NOT_ADIMN') <> 'ADMIN_EXPENCES')
                    SELECT to_char(start_date, 'HH24:MI "часов" dd.mm.yyyy') AS start_date
                          ,to_char(end_date, 'HH24:MI "часов" dd.mm.yyyy') AS end_date
                          ,group_num
                          ,CAST(MULTISET (SELECT description
                                   FROM main m1
                                  WHERE m1.group_num = t.group_num
                                    AND m1.start_date = t.start_date
                                    AND m1.end_date = t.end_date
                                  ORDER BY description) AS tt_one_col) programs
                          ,COUNT(*) cn
                      FROM main t
                     GROUP BY group_num
                             ,start_date
                             ,end_date
                     ORDER BY group_num
                             ,MONTHS_BETWEEN(t.end_date, t.start_date) DESC)
      LOOP
        gv_datas(1) := upper('СРОК СТРАХОВАНИЯ');
        gv_datas(2) := upper('НАЧАЛО:');
        gv_datas(3) := rec.start_date;
        gv_datas(4) := upper('ОКОНЧАНИЕ:');
        gv_datas(5) := rec.end_date;
      
        gv_styles(1) := gc_style_bold;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
        IF rec.group_num = 1
        THEN
          IF rec.cn = 1
          THEN
            v_text := '(основная программа)';
          ELSE
            v_text := '(основные программы)';
          END IF;
        ELSE
          IF rec.cn = 1
          THEN
            v_text := '(дополнительная программа)';
          ELSE
            v_text := '(дополнительные программы)';
          END IF;
        END IF;
        gv_datas(1) := v_text;
      
        gv_datas(2) := NULL;
        gv_datas(3) := NULL;
        gv_datas(4) := NULL;
        gv_datas(5) := NULL;
      
        gv_styles(1) := NULL;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines
                        ,p_h       => 3);
      
      END LOOP;
    
      blank_cell(par_ln => 1);
    
      plpdf.printmultilinecell(p_h        => 3
                              ,p_clipping => 0
                              ,p_txt      => 'Если Страхователь за 30 (тридцать) календарных дней до дня окончания срока страхования по указанной дополнительной программе не направит письменное заявление Страховщику о намерении исключить указанную  программу из договора страхования или внести в неё изменения, срок страхования по указанной дополнительной программе продлевается до даты наступления очередной страховой годовщины.'
                              ,p_ln       => 1);
    END print_periods_regular;
  
    PROCEDURE print_periods_lump IS
      v_text VARCHAR2(50);
    BEGIN
      print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' || v_pol_sum.policy_period_desc ||
                            ' c ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' по ' ||
                            to_char(v_pol_sum.end_date, 'dd.mm.yyyy'));
    END print_periods_lump;
  
    PROCEDURE print_payment_terms IS
      v_others_payment_date VARCHAR2(500);
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'ДАТА УПЛАТЫ ПЕРВОГО СТРАХОВОГО ВЗНОСА: '
                     ,p_ln  => 0);
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => to_char(v_pol_sum.fist_payment_date, 'dd.mm.yyyy')
                     ,p_ln  => 1);
    
      SELECT substr(MAX(pay_date), 3)
        INTO v_others_payment_date
        FROM (SELECT sys_connect_by_path(to_char(ADD_MONTHS(v_pol_sum.fist_payment_date, LEVEL * 12)
                                                ,'dd.mm.yyyy')
                                        ,'; ') pay_date
                FROM dual
              CONNECT BY LEVEL <= (SELECT per.period_value - 1
                                     FROM p_policy pp
                                         ,t_period per
                                    WHERE pp.policy_id = v_policy_id
                                      AND per.id = pp.period_id));
    
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ: '
                     ,p_ln  => 0);
      plpdf.printcell(p_txt => v_others_payment_date, p_ln => 1);
    
    END print_payment_terms;
  
    PROCEDURE prn(par_text VARCHAR2) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => 1
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text);
    END;
  
    PROCEDURE print_additional_conds IS
    BEGIN
      set_font;
      IF v_pol_sum.product_brief = 'Investor'
      THEN
        prn('8.1. Договор страхования заключен на основании Полисных условий страхования жизни по программе «Инвестор»  , утвержденных приказом Генерального директора ООО «СК «Ренессанс Жизнь» № 198/ОД/14 от 14.11.2014г. (далее «Полисные условия»).');
        prn('8.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в Договоре, а также в приложениях и дополнительных соглашениях к нему.');
        prn('8.3. Территория страхования: весь мир.');
        prn('8.4. Время действия страховой защиты: 24 часа.');
        prn('8.5. Валюта договора страхования: Рубль РФ.');
        prn('8.6. При досрочном прекращении действия договора выплата предусмотренной соответствующей программой страхования гарантированной выкупной суммы производится согласно таблице гарантированных выкупных сумм (Приложение № 1).');
      ELSIF v_pol_sum.product_brief = 'INVESTOR_LUMP'
      THEN
        prn('7.1.Договор страхования заключен на основании Полисных условий страхования жизни по программе «Инвестор»  , утвержденных приказом Генерального директора ООО «СК «Ренессанс Жизнь» № 198/ОД/14 от 14.11.2014. (далее «Полисные условия»).');
        prn('7.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в Договоре, а также в приложениях и дополнительных соглашениях к нему.');
        prn('7.3. Территория страхования: весь мир.');
        prn('7.4. Время действия страховой защиты: 24 часа.');
        prn('7.5. Валюта договора страхования: Рубль РФ.');
        prn('7.6. При досрочном прекращении действия договора выплата предусмотренной соответствующей программой страхования гарантированной выкупной суммы производится согласно таблице гарантированных выкупных сумм (Приложение № 1).');
      END IF;
    
      blank_cell(par_ln => 1);
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 5;
      gv_widths(2) := plpdf.getpagespace * 4 / 5;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'К полису прилагаются:';
      gv_datas(2) := '1. Таблица гарантированных выкупных сумм по основной программе (Приложение №1)';
      row_print2;
    
      gv_datas(1) := NULL;
      gv_datas(2) := '2. Полисные условия страхования жизни по программе «ИНВЕСТОР» (Приложение № 2)';
      row_print2;
    
      gv_datas(1) := NULL;
      gv_datas(2) := '3. Заявление на заключение договора № ' || to_char(v_pol_sum.pol_num);
      row_print2(par_h => 4);
    
      blank_cell(par_ln => 1);
    
    END print_additional_conds;
  
    PROCEDURE print_signes IS
      v_agent_num  ven_ag_contract_header.num%TYPE;
      v_agent_name contact.obj_name_orig%TYPE;
    BEGIN
      BEGIN
        SELECT ah.num          num
              ,c.obj_name_orig obj_name_orig
          INTO v_agent_num
              ,v_agent_name
          FROM ven_ag_contract_header ah
              ,contact                c
              ,t_sales_channel        sc
         WHERE ah.ag_contract_header_id =
               pkg_agn_control.get_current_policy_agent(v_pol_sum.policy_header_id)
           AND ah.agent_id = c.contact_id
           AND ah.t_sales_channel_id = sc.id;
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3; -- Array of widths
      gv_widths(2) := gv_widths(1);
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
    
      gv_datas(1) := upper('СТРАХОВАТЕЛЬ');
      gv_datas(2) := NULL;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      gv_datas(1) := '_____________________________________';
      gv_datas(2) := NULL;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      gv_datas(1) := 'ФИО Консультанта';
      gv_datas(2) := v_agent_name;
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Номер Консультанта';
      gv_datas(2) := v_agent_num;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Москва, Дата выдачи полиса:' || to_char(v_pol_sum.sign_date, 'dd.mm.yyyy');
      gv_datas(2) := NULL;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
    END print_signes;
  
    PROCEDURE print_cash_surr IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 1')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      IF v_pol_sum.product_brief IN ('Investor')
      THEN
        plpdf.printmultilinecell(p_align => 'L'
                                ,p_txt   => 'Гарантированная выкупная сумма рассчитывается как % от сформированного резерва по договору страхования на дату последнего оплаченного взноса или дату расторжения договора страхования, в зависимости от того, какая из дат является более ранней.'
                                ,p_h     => -1
                                ,p_ln    => 1);
      ELSIF v_pol_sum.product_brief IN ('INVESTOR_LUMP')
      THEN
        plpdf.printmultilinecell(p_align => 'L'
                                ,p_txt   => 'Гарантированная выкупная сумма рассчитывается как % от сформированного резерва по договору страхования на дату окончания страхового года, в течение которого произошло расторжение договора страхования.'
                                ,p_h     => -1
                                ,p_ln    => 1);
      END IF;
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr;
  
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
  
    init(par_default_font_size => 8);
    plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
    plpdf.setfooterprocname(p_proc_name => 'ins.pkg_rep_plpdf.footer_414', p_height => 27);
  
    print_draft(v_pol_sum.policy_status_desc);
  
    print_default_title('ИНВЕСТОР');
    print_default_title('Полис страхования № ' || v_pol_sum.ids);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_default_insurer_info;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_insuree_info(par_contact_info => v_insuree_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    print_assured_info(par_contact_info => v_assured_info, par_version_num => gc_contact_info_ver2);
  
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПРОГРАММЫ СТРАХОВАНИЯ');
    print_programs;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОД СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    IF v_pol_sum.product_brief = 'Investor'
    THEN
      print_periods_regular;
    ELSIF v_pol_sum.product_brief = 'INVESTOR_LUMP'
    THEN
      print_periods_lump;
    END IF;
  
    -------------------------------------------------------------------------------------------------
    --УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ
    -------------------------------------------------------------------------------------------------
    IF v_pol_sum.product_brief IN ('Investor')
    THEN
      print_default_chapter('УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ');
      print_payment_terms;
    END IF;
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННОГО');
    print_benificiary_table(v_policy_id, 3);
  
    IF v_pol_sum.product_brief = 'Investor'
    THEN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
    END IF;
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    print_additional_conds;
  
    print_signes;
  
    print_cash_surr;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_investor_new_2014;

  /*
    Процедура формирования полиса по продуктам Наследия
    385734 Настройка продукта Наследие
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_nasledie
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id      NUMBER;
    v_pol_sum        t_policy_summary;
    v_insuree_info   t_contact_summary;
    v_assured_info   t_contact_summary;
    v_signer         typ_signer;
    v_underwriting   NUMBER;
    v_checkpagebreak BOOLEAN;
  
    PROCEDURE prn
    (
      par_text VARCHAR2
     ,par_w    NUMBER DEFAULT 0
     ,par_ln   NUMBER DEFAULT 1
    ) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => par_ln
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text
                              ,p_w        => par_w);
    END;
  
    PROCEDURE print_sign_custom IS
    BEGIN
      delete_row_print_cache;
      gv_datas(1) := 'Страхователь:';
      gv_widths(1) := plpdf.getpagespace;
      v_checkpagebreak := plpdf.checkpagebreak(plpdf.getrowheight(p_data    => gv_datas
                                                                 ,p_width   => gv_widths
                                                                 ,p_maxline => gv_maxlines
                                                                 ,p_h       => 50));
      IF v_pol_sum.policy_status_breif NOT IN ('B2B_PENDING', 'PROJECT')
      THEN
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - 5 - 45
                      ,p_y    => plpdf.getcurrenty
                      ,p_w    => 45
                      ,p_h    => 50);
      END IF;
    
      IF NOT v_checkpagebreak
      THEN
        blank_cell(par_ln => 1);
      END IF;
      delete_row_print_cache;
      set_font(par_size => 7);
      gv_datas(1) := 'Страхователь:';
      gv_datas(2) := 'Застрахованный:';
      gv_datas(3) := 'Страховщик:';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'LT';
      gv_borders(2) := 'LT';
      gv_borders(3) := 'LTR';
    
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace / 3;
      gv_widths(3) := plpdf.getpagespace / 3;
    
      row_print2;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(2) := NULL;
    
      gv_borders(1) := 'LB';
      gv_borders(2) := 'LB';
      gv_borders(3) := 'LBR';
    
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        gv_datas(1) := 'Подписывая настоящий договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации. Полисные условия по программе страхования «Наследие» с Приложениями к Полисным условиям получил и согласен';
        gv_datas(2) := 'Подписывая настоящий договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации. С назначением Выгодоприобретателей согласен. Полисные условия по программе страхования «Наследие» » с Приложениями к Полисным условиям получил и согласен';
      ELSE
        gv_datas(1) := 'Подписывая настоящий договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации. Полисные условия по программе страхования «Наследие» получил и согласен';
        gv_datas(2) := 'Подписывая настоящий договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации. С назначением Выгодоприобретателей согласен. Полисные условия по программе страхования «Наследие» получил и согласен';
      END IF;
      gv_datas(3) := 'Представитель по доверенности ' || v_signer.short_name || chr(13) || '(дов №' ||
                     v_signer.procuratory_num || ')';
    
      row_print2;
    
    END print_sign_custom;
  
    PROCEDURE print_cash_surr_custom IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 2')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Договора страхования № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО  ПРОГРАММЕ СТРАХОВАНИЯ «НАСЛЕДИЕ»')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма на дату досрочного прекращения (расторжения) договора страхования рассчитывается как % от сформированного резерва по договору страхования на дату начала периода, в котором произошло досрочное прекращение (расторжение) договора страхования.'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr_custom;
  
    PROCEDURE print_additional_conds_custom IS
    BEGIN
      set_font;
      prn('1. ПРИ ДОСРОЧНОМ РАСТОРЖЕНИИ ДОГОВОРА ВЫПЛАТА ПРЕДУСМОТРЕННОЙ СООТВЕТСТВУЮЩЕЙ ПРОГРАММОЙ СТРАХОВАНИЯ ВЫКУПНОЙ СУММЫ ПРОИЗВОДИТСЯ СОГЛАСНО ТАБЛИЦЕ ГАРАНТИРОВАННЫХ  ВЫКУПНЫХ  СУММ');
      prn('2. СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ДОГОВОРЕ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ;');
      prn('3. ВСЕ ПИСЬМЕННЫЕ ЗАЯВЛЕНИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО, ОТНОСЯЩИЕСЯ К НАСТОЯЩЕМУ ДОГОВОРУ, А ТАК ЖЕ ВСЕ ПРИЛОЖЕНИЯ И ДОПОЛНЕНИЯ К НАСТОЯЩЕМУ ДОГОВОРУ, ЯВЛЯЮТСЯ ЕГО СОСТАВНОЙ И НЕОТЪЕМЛЕМОЙ ЧАСТЬЮ.');
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace * 2 / 3;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'К договору страхования прилагаются: ';
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        gv_datas(2) := 'Приложение №1: Полисные условия по программе страхования "Наследие" от 25.03.2015г с Приложениями';
      ELSE
        gv_datas(2) := 'Приложение №1: Полисные условия по программе страхования "Наследие" от 22.12.2014г.';
      END IF;
      row_print2;
      gv_datas(1) := NULL;
      gv_datas(2) := 'Приложение №2: Таблица гарантированных выкупных сумм по программе страхования «Наследие»';
      row_print2;
    END print_additional_conds_custom;
  
    PROCEDURE print_additional_conds_risk IS
      v_add_note      as_assured_underwr.addendum_note%TYPE;
      v_num           NUMBER;
      v_start_premium p_policy.ins_amount%TYPE;
      v_last_premium  p_policy.ins_amount%TYPE;
      v_status_date   DATE;
      v_date_pu       VARCHAR2(10);
    BEGIN
      BEGIN
        SELECT addendum_note
          INTO v_add_note
          FROM as_assured_underwr au
              ,as_asset           aa
              ,as_assured         aas
         WHERE au.as_assured_id = aas.as_assured_id
           AND aa.p_policy_id = v_policy_id
           AND aa.as_asset_id = aas.as_assured_id;
      EXCEPTION
        WHEN no_data_found THEN
          v_add_note := NULL;
      END;
    
      BEGIN
        SELECT pkg_policy.get_policy_fee(pp.policy_id) --  pp.premium
          INTO v_start_premium
          FROM p_policy pp
         WHERE pp.policy_id = pkg_policy.get_first_uncanceled_version(v_pol_sum.policy_header_id);
      EXCEPTION
        WHEN no_data_found THEN
          v_start_premium := 0;
      END;
    
      BEGIN
        SELECT pkg_policy.get_policy_fee(pp2.policy_id) --pp2.premium
              ,doc.get_status_date(pp2.policy_id, dsr.brief)
          INTO v_last_premium
              ,v_status_date
          FROM p_policy       pp
              ,p_pol_header   ph
              ,p_policy       pp2
              ,doc_status_ref dsr
              ,document       d
         WHERE pp.policy_id = v_policy_id
           AND ph.policy_header_id = pp.pol_header_id
           AND pp2.policy_id = ph.max_uncancelled_policy_id
           AND d.document_id = pp2.policy_id
           AND d.doc_status_ref_id = dsr.doc_status_ref_id;
      EXCEPTION
        WHEN no_data_found THEN
          v_last_premium := 0;
          v_status_date  := NULL;
      END;
    
      v_num := 1;
      set_font;
    
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        v_date_pu := '25.03.2015';
      ELSE
        v_date_pu := '22.12.2014';
      END IF;
    
      prn(v_num ||
          '. ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН НА ОСНОВАНИИ "ПОЛИСНЫХ УСЛОВИЙ ПО ПРОГРАММЕ СТРАХОВАНИЯ «НАСЛЕДИЕ» С ПРИЛОЖЕНИЕМ ПРИЛОЖЕНИЙ К ВЫШЕУКАЗАННЫМ "ПОЛИСНЫМ УСЛОВИЯМ ПО ПРОГРАММЕ СТРАХОВАНИЯ  «НАСЛЕДИЕ», УТВЕРЖДЕННЫХ  ГЕНЕРАЛЬНЫМ  ДИРЕКТОРОМ ООО "СК "РЕНЕССАНС ЖИЗНЬ" ' ||
          v_date_pu || '  ГОДА, ДАЛЕЕ «ПОЛИСНЫЕ УСЛОВИЯ».');
    
      v_num := v_num + 1;
      prn(v_num ||
          '. СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ДОГОВОРЕ СТРАХОВАНИЯ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ.');
      v_num := v_num + 1;
      prn(v_num || '. ТЕРРИТОРИЯ СТРАХОВАНИЯ: ВЕСЬ МИР.');
      v_num := v_num + 1;
      prn(v_num || '. ЛЬГОТНЫЙ ПЕРИОД: 30 ДНЕЙ.');
      v_num := v_num + 1;
      prn(v_num || '. ДАТА ОКОНЧАНИЯ ПЕРИОДА ОЦЕНКИ СТРАХОВОГО РИСКА:' ||
          to_char(v_status_date, 'dd.mm.yyyy'));
      IF v_add_note IS NOT NULL
      THEN
        v_num := v_num + 1;
        prn(v_num || '. УЧИТЫВАЯ СВЕДЕНИЯ, СОДЕРЖАЩИЕСЯ В ЗАЯВЛЕНИИ НА СТРАХОВАНИЕ №' ||
            v_pol_sum.pol_num || ', ДОПОЛНИТЕЛЬНО К СОБЫТИЯМ, УКАЗАННЫМ В П. 4 «ПОЛИСНЫХ УСЛОВИЙ», ' ||
            v_add_note);
      END IF;
      IF nvl(v_last_premium, 0) > nvl(v_start_premium, 0)
      THEN
        v_num := v_num + 1;
        prn(v_num ||
            '. ПО РЕЗУЛЬТАТАМ ОЦЕНКИ РИСКА У СТРАХОВАТЕЛЯ ВОЗНИКАЕТ ОБЯЗАННОСТЬ ДОПЛАТИТЬ СТРАХОВЩИКУ ДОПОЛНИТЕЛЬНУЮ СТРАХОВУЮ ПРЕМИЮ (СТРАХОВОЙ ВЗНОС) В РАЗМЕРЕ ' ||
            pkg_rep_utils.to_money_sep(nvl(v_last_premium, 0) - nvl(v_start_premium, 0)) ||
            ' В СРОК ДО ' || to_char(v_status_date + 30, 'dd.mm.yyyy'));
      END IF;
    
      v_num := v_num + 1;
      prn(v_num ||
          '. ВО ВСЕМ ОСТАЛЬНОМ, ЧТО НЕ ПРЕДУСМОТРЕНО НАСТОЯЩИМ ДОГОВОРОМ СТРАХОВАНИЯ СТОРОНЫ РУКОВОДСТВУЮТСЯ ПОЛОЖЕНИЯМИ ПОЛИСНЫХ УСЛОВИЙ  К ДОГОВОРУ СТРАХОВАНИЯ.');
      IF nvl(v_last_premium, 0) > nvl(v_start_premium, 0)
      THEN
        v_num := v_num + 1;
        prn(v_num ||
            '. НАСТОЯЩИЙ ДОГОВОР СТРАХОВАНИЯ ВСТУПАЕТ В СИЛУ С МОМЕНТЫ ОПЛАТЫ ДОПОЛНИТЕЛЬНОГО СТРАХОВОГО ВЗНОСА В СУММЕ И В СРОКИ, УКАЗАННЫЕ В РАЗДЕЛЕ 10 П.7 НАСТОЯЩЕГО ДОГОВОРА СТРАХОВАНИЯ.');
      END IF;
    
      v_num := v_num + 1;
      prn(v_num ||
          '. НАСТОЯЩИЙ ДОГОВОР СТРАХОВАНИЯ ПОДПИСАН В ДВУХ ЭКЗЕМПЛЯРАХ, ИМЕЮЩИХ ОДИНАКОВУЮ СИЛУ, ПО ОДНОМУ ЭКЗЕМПЛЯРУ ДЛЯ КАЖДОЙ СТОРОНЫ ');
      prn('Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставляет ООО «СК «Ренессанс Жизнь» согласие на обработку (сбор, систематизацию, накопление, хранение, уточнение (обновление, изменение), использование, распространение, обезличивание, блокирование, уничтожение, как на бумажных, так и на электронных носителях, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям) своих персональных данных, содержащих в настоящем Договоре, в том числе данных о состоянии здоровья,в целях исполнения между Страхователем и Страховщиком Договора страхования, а также в целях продвижения товаров, работ, услуг на рынке страхования путём осуществления прямых контактов с помощью средств связи, при этом такое согласие дается Страхователем/ Застрахованным Страховщику  на срок действия Договора страхования и в течение 15 лет после окончания срока действия Договора страхования и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace * 2 / 3;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'К договору страхования прилагаются: ';
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        gv_datas(2) := 'Приложение №1: Полисные условия по программе страхования "Наследие" от 25.03.2015г с Приложениями';
      ELSE
        gv_datas(2) := 'Приложение №1: Полисные условия по программе страхования "Наследие" от 22.12.2014г.';
      END IF;
      row_print2;
      gv_datas(1) := NULL;
      gv_datas(2) := 'Приложение №2: Таблица гарантированных выкупных сумм по программе страхования «Наследие»';
      row_print2;
      gv_datas(1) := NULL;
      gv_datas(2) := 'Приложение №3: Заявление на страхование №' || v_pol_sum.pol_num;
      row_print2;
    END print_additional_conds_risk;
  
    PROCEDURE print_declaration_custom IS
    BEGIN
      set_font(par_style => gc_style_bold);
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
      set_font;
      prn('1. НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, нервными расстройствами, психическими заболеваниями; НЕ употребляет  наркотики, токсические вещества, НЕ страдает алкоголизмом, НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита).');
      prn('2. НЕ находится под следствием.');
      prn('3. НЕ страдает/страдал(а) следующими заболеваниями: нарушение зрения более 7 (семи) диоптрий, хроническая почечная недостаточность, поликистоз почек, неспецифический язвенный колит, болезнь Крона, сахарный диабет, гемофилия, сердечно-сосудистая патология (включая ишемическую болезнь сердца, аритмии (включая мерцательную аритмию), гипертонию (II-IV степени), тромбоэмболии, аневризмы сосудов, перенесенные инфаркты, инсульты, операции на сердце и сосудах и т.п.), цирроз печени, хронический гепатит, злокачественные или доброкачественные опухоли, туберкулез, а также иными хроническими заболеваниями, требующими постоянных консультаций, лечения, обследований или наблюдения.');
      prn('4. За последние 5 (пять) лет НЕ находился на больничном листе сроком 3 (три) недели и более подряд; не переносил операции и не находился на стационарном лечении (за исключением операции по поводу исправления носовой перегородки, удаления миндалин, аппендицита, стоматологических операций).');
      prn('5. В настоящий момент НЕ находится под наблюдением врача; НЕ планирует обратиться к врачу по поводу какого-либо заболевания в ближайшее время; не принимает лекарственные препараты (кроме витаминов, ОГК (для женщин), кроме единичных случаев лечения простудных заболеваний; в отношении Застрахованного не запланировано лечение/операция.');
      prn('6. НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, частые (более одного раза в месяц) командировки и т.п.) или хобби.');
      prn('7. НЕ подавал(а) заявление на страхование жизни, утраты трудоспособности (инвалидность) или от несчастных случаев, в которых Застрахованному было отказано, которые были отложены или приняты на особых условиях (с применением повышающих коэффициентов, исключений или особых условий), а также заключенных договоров страхования, которые были расторгнуты по причине невозможности заключения или существенные условия которых были изменены по  результатам оценки степени риска.');
      prn('8. НЕ выкуривает более 30 (тридцати) сигарет в день. Разница между ростом (в см.) и весом (в кг.) Застрахованного не менее 80 и не более 120 (например, рост - 180 см, вес - 85 кг, разница составляет - 95, можно ответить ДА; рост 160 см, вес 85 кг, разница - 75 - ответ - НЕТ).');
      prn('Сделанное мной выше заявление является полным и правдивым. Если оно не соответствует действительности, в соответствии с действующим законодательством Страховщик вправе отказать в страховой выплате.');
      prn('Настоящим я уполномочиваю любого врача или медицинского работника, принимавшего (принимающего) участие в моем лечении, предоставлять всю необходимую медицинскую информацию по запросу в страховую компанию ООО "СК "Ренессанс Жизнь".');
      prn('Я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой страхового риска, так и в связи со страховыми случаями по данному договору страхования.');
      prn('Я подтверждаю, что на момент заключения данного договора страхования общая страховая сумма (сумма страховых сумм) по любым другим известным мне договорам страхования со Страховщиком в отношении Застрахованного по страховым рискам:');
      prn('- «Смерть по любой причине» / «Смерть Застрахованного, наступившая в результате несчастного случая» / «Смерть  в результате ДТП» не превышает 10 000 000 (десяти миллионов) рублей;');
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        prn('«Инвалидность Застрахованного 1-й группы по любой причине»  не превышает 7 500 000 (семи миллионов пятиста тысяч) рублей.**');
      END IF;
      prn('Годовая страховая премия по данному договору не превышает 20% годового дохода Страхователя.');
      prn('Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставляет ООО «СК «Ренессанс Жизнь» согласие на обработку (сбор, систематизацию, накопление, хранение, уточнение (обновление, изменение), использование, распространение, обезличивание, блокирование, уничтожение, как на бумажных, так и на электронных носителях, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям) своих персональных данных, содержащихся в настоящем Договоре, в том числе данных о состоянии здоровья, в целях исполнения между Страхователем и Страховщиком Договора страхования, а также в целях продвижения товаров, работ, услуг на рынке страхования путём осуществления прямых контактов с помощью средств связи, при этом такое согласие дается Страхователем/ Застрахованным Страховщику  на срок действия Договора страхования и в течение 15 лет после окончания срока действия Договора страхования и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
      prn('Сведения в Декларации Страхователя (Застрахованного) являются правдивыми. Я понимаю, что предоставление заведомо ложных и/или неполных сведений может стать основанием для непризнания Страховщиком наступившего события страховым случаем. ');
      prn('Подписывая настоящий Договор, Страхователь/Застрахованный подтверждает,  что его  родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных корпорациях и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях*.');
      prn('*При наличии родственников, замещающих вышеуказанные должности, заполняется дополнительная анкета по форме Страховщика');
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        prn('** Утверждения в настоящей Декларации касаются только рисков/программ страхования, выбранных в п. 6 настоящего Договора страхования.');
      END IF;
    END print_declaration_custom;
  
    PROCEDURE print_note_2 IS
    BEGIN
      prn('* Примечание:');
      prn('1. Выбор одновременно всех программ и рисков, указанных в п. 6.1 настоящего Договора страхования, обязателен.');
      prn('2. Дополнительная программа "Освобождение от уплаты страховых взносов в случае наступления события "Инвалидность Страхователя 1-й группы по любой причине"" не может быть выбрана без дополнительной программы "Инвалидность Застрахованного 1-й группы по любой причине", а также не может быть выбрана совместно с дополнительными программами «Освобождение от уплаты страховых взносов в случае наступления события "Инвалидность Страхователя 1-й или 2-й группы,  наступившая в результате несчастного случая" и «Инвалидность Застрахованного 1-й или 2-й группы,  наступившая в результате несчастного случая".');
      prn('3. Дополнительная программа "Инвалидность Застрахованного 1-й группы по любой причине"  не может быть выбрана без дополнительной программы "Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й группы по любой причине"", а также не может быть выбрана совместно с дополнительными программами «Освобождение от уплаты страховых взносов в случае наступления события "Инвалидность Страхователя 1-й или 2-й группы,  наступившая в результате несчастного случая"  и «Инвалидность Застрахованного 1-й или 2-й группы,  наступившая в результате несчастного случая".');
      prn('4. Дополнительная программа "Освобождение от уплаты страховых взносов в случае наступления события "Инвалидность Страхователя 1-й или 2-ой группы, наступившая в результате несчастного случая" не может быть выбрана без дополнительной программы "Инвалидность Застрахованного 1-й или 2-ой группы, наступившая в результате несчастного случая", а также не может быть выбрана совместно с дополнительными программами «Инвалидность Застрахованного 1-й группы по любой причине" и «Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й группы по любой причине".');
      prn('5. Дополнительная программа "Инвалидность Застрахованного 1-й или 2-ой группы, наступившая в результате несчастного случая" не может быть выбрана без дополнительной программы  "Освобождение от уплаты страховых взносов в случае наступления события "Инвалидность Страхователя 1-й или 2-ой группы, наступившая в результате несчастного случая", а также не может быть выбрана совместно с дополнительными программами «Инвалидность Застрахованного 1-й группы по любой причине" и «Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й группы по любой причине"".');
      prn('6. Дополнительная программа "Освобождение от уплаты страховых взносов в случае наступления события "Инвалидность Страхователя 1-й группы по любой причине" и Дополнительная программа страхования «Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й или 2-ой группы, наступившая в результате несчастного случая" действуют только в случае, если Страхователь является одновременно и Застрахованным по Договору страхования.');
      prn('Утверждения в настоящих примечаниях касаются только рисков/программ страхования, выбранных в п. 6 настоящего Договора страхования.');
    END print_note_2;
  
    PROCEDURE print_periods_custom IS
    BEGIN
      print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' || v_pol_sum.policy_period_desc ||
                            ' c ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' по ' ||
                            to_char(v_pol_sum.end_date, 'dd.mm.yyyy'));
    
      set_font;
      prn('Договор страхования вступает в силу в соответствии с п.6.2. Полисных условий');
    
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn(par_text => 'НАЧАЛО: ', par_w => 16, par_ln => 0);
      set_font;
      prn('00:00 1-го дня, следующего за датой оплаты страховой премии');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 28, 0);
      set_font;
      prn('23:59 даты окончания срока действия договора страхования');
      prn('(«Дожитие Застрахованного до окончания срока действия Договора страхования»)');
    
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn('НАЧАЛО: ', 16, 0);
      set_font;
      prn('00:00 4-го дня, следующего за датой оплаты страховой премии');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 28, 0);
      set_font;
      prn('23:59 даты окончания срока действия договора страхования');
      prn('(«Смерть Застрахованного по любой причине»)');
    
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn('НАЧАЛО: ', 16, 0);
      set_font;
      prn('00:00 4-го дня, следующего за датой оплаты страховой премии');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 28, 0);
      set_font;
      prn('23:59 даты окончания первого страхового года');
      prn('(«Смерть Застрахованного, наступившая в результате несчастного случая», «Смерть Застрахованного, наступившая в результате дорожно-транспортного происшествия)');
    END print_periods_custom;
  
    PROCEDURE print_periods_custom_2 IS
    BEGIN
      print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' || v_pol_sum.policy_period_desc ||
                            ' c ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' по ' ||
                            to_char(v_pol_sum.end_date, 'dd.mm.yyyy'));
    
      set_font;
      prn('Договор страхования вступает в силу в соответствии с п.6.2. Полисных условий');
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 4;
      gv_widths(2) := plpdf.getpagespace / 4 * 3;
      gv_styles(1) := 'B';
      gv_styles(2) := NULL;
      gv_borders(1) := '0';
      gv_borders(2) := '0';
    
      /*
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn(par_text => 'НАЧАЛО: ', par_w => 16, par_ln => 0);
      set_font;
      prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 28, 0);
      set_font;
      prn('23:59 даты окончания срока действия договора страхования');*/
      gv_datas(1) := 'СРОК СТРАХОВАНИЯ';
      gv_datas(2) := NULL;
      row_print2(par_h => 3);
      gv_datas(1) := 'НАЧАЛО: ';
      gv_datas(2) := '00:00 1-го (первого) дня, следующего за датой оплаты страховой премии';
      row_print2(par_h => 3);
      gv_datas(1) := 'ОКОНЧАНИЕ: ';
      gv_datas(2) := '23:59 даты окончания срока действия договора страхования';
      row_print2(par_h => 3);
      prn('(«Дожитие Застрахованного до окончания срока действия Договора страхования»)');
    
      /*      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ*');
      prn('НАЧАЛО: ', 16, 0);
      set_font;
      prn('00:00 4-го (четвертого) дня, следующего за датой оплаты страховой премии (первого страхового взноса)');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 28, 0);
      set_font;
      prn('23:59 даты окончания срока действия договора страхования');*/
      gv_datas(1) := 'СРОК СТРАХОВАНИЯ*';
      gv_datas(2) := NULL;
      row_print2(par_h => 3);
      gv_datas(1) := 'НАЧАЛО: ';
      gv_datas(2) := '00:00 4-го (четвертого) дня, следующего за датой оплаты страховой премии (первого страхового взноса)';
      row_print2(par_h => 3);
      gv_datas(1) := 'ОКОНЧАНИЕ: ';
      gv_datas(2) := '23:59 даты окончания срока действия договора страхования';
      row_print2(par_h => 3);
      prn('(«Смерть Застрахованного по любой причине»)');
      prn('*Не является страховым случаем событие «Смерть Застрахованного по любой причине» произошедшее в результате болезни (заболевания) Застрахованного и наступившее в течение 90 (девяноста) календарных дней, начиная с первого дня срока действия  Договора страхования.');
    
      /*      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn('НАЧАЛО: ', 16, 0);
      set_font;
      prn('00:00 4-го (четвертого) дня, следующего за датой оплаты страховой премии');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 28, 0);
      set_font;
      prn('23:59 даты окончания первого страхового года');*/
      gv_datas(1) := 'СРОК СТРАХОВАНИЯ';
      gv_datas(2) := NULL;
      row_print2(par_h => 3);
      gv_datas(1) := 'НАЧАЛО: ';
      gv_datas(2) := '00:00 4-го (четвертого) дня, следующего за датой оплаты страховой премии';
      row_print2(par_h => 3);
      gv_datas(1) := 'ОКОНЧАНИЕ: ';
      gv_datas(2) := '23:59 даты окончания первого страхового года';
      row_print2(par_h => 3);
      prn('(«Смерть Застрахованного, наступившая в результате несчастного случая», «Смерть Застрахованного, наступившая в результате дорожно-транспортного происшествия)');
    
      IF get_product_line_exists(par_policy_id => v_policy_id, par_prod_line_option_brief => 'WOP')
      THEN
        /*        set_font(par_style => gc_style_bold);
        prn('СРОК СТРАХОВАНИЯ**');
        prn('НАЧАЛО: ', 16, 0);
        set_font;
        prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии (первого страхового взноса) ');
        set_font(par_style => gc_style_bold);
        prn('ОКОНЧАНИЕ: ', 28, 0);
        set_font;
        prn('23:59 даты наступления очередной страховой годовщины ');*/
      
        gv_datas(1) := 'СРОК СТРАХОВАНИЯ**';
        gv_datas(2) := NULL;
        row_print2(par_h => 3);
        gv_datas(1) := 'НАЧАЛО: ';
        gv_datas(2) := '00:00 1-го (первого) дня, следующего за датой оплаты страховой премии (первого страхового взноса)';
        row_print2(par_h => 3);
        gv_datas(1) := 'ОКОНЧАНИЕ: ';
        gv_datas(2) := '23:59 даты наступления очередной страховой годовщины';
        row_print2(par_h => 3);
        IF v_pol_sum.product_brief IN ('Nasledie_2', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
        THEN
          prn('(«Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й группы по любой причине»)');
          prn('**Не является страховым случаем событие «Инвалидность Страхователя   1-й группы п о любой причине», произошедшее в результате болезни Застрахованного и наступившее в течение 90 (девяноста) календарных дней, начиная с первого дня срока действия  Договора страхования.');
        ELSIF v_pol_sum.product_brief = 'Nasledie_2_retail'
        THEN
          prn('(«Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й или 2-ой группы, наступившая в результате несчастного случая»)');
        END IF;
      END IF;
    
      IF get_product_line_exists(par_policy_id              => v_policy_id
                                ,par_prod_line_option_brief => 'ANY_1_GR')
      THEN
        /*        set_font(par_style => gc_style_bold);
        prn('СРОК СТРАХОВАНИЯ***');
        prn('НАЧАЛО: ', 16, 0);
        set_font;
        prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии (первого страхового взноса) ');
        set_font(par_style => gc_style_bold);
        prn('ОКОНЧАНИЕ: ', 28, 0);
        set_font;
        prn('23:59 даты наступления очередной страховой годовщины ');*/
        gv_datas(1) := 'СРОК СТРАХОВАНИЯ***';
        gv_datas(2) := NULL;
        row_print2(par_h => 3);
        gv_datas(1) := 'НАЧАЛО: ';
        gv_datas(2) := '00:00 1-го (первого) дня, следующего за датой оплаты страховой премии (первого страхового взноса)';
        row_print2(par_h => 3);
        gv_datas(1) := 'ОКОНЧАНИЕ: ';
        gv_datas(2) := '23:59 даты наступления очередной страховой годовщины';
        row_print2(par_h => 3);
        prn('(«Инвалидность Застрахованного 1-й группы по любой причине»)');
        prn('***Не является страховым случаем событие «Инвалидность Застрахованного 1-й группы по любой причине», произошедшее в результате болезни Застрахованного и при этом наступившее в течение 90 (девяноста) календарных дней, начиная с первого дня срока действия Договора страхования');
      END IF;
    
      IF get_product_line_exists(par_policy_id => v_policy_id, par_prod_line_option_brief => 'ADis')
      THEN
        /*        set_font(par_style => gc_style_bold);
        prn('СРОК СТРАХОВАНИЯ**');
        prn('НАЧАЛО: ', 16, 0);
        set_font;
        prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии');
        set_font(par_style => gc_style_bold);
        prn('ОКОНЧАНИЕ: ', 28, 0);
        set_font;
        prn('23:59 даты наступления очередной страховой годовщины  ');*/
        gv_datas(1) := 'СРОК СТРАХОВАНИЯ**';
        gv_datas(2) := NULL;
        row_print2(par_h => 3);
        gv_datas(1) := 'НАЧАЛО: ';
        gv_datas(2) := '00:00 1-го (первого) дня, следующего за датой оплаты страховой премии';
        row_print2(par_h => 3);
        gv_datas(1) := 'ОКОНЧАНИЕ: ';
        gv_datas(2) := '23:59 даты наступления очередной страховой годовщины';
        row_print2(par_h => 3);
        prn('(«Инвалидность Застрахованного 1-й или 2-ой группы, наступившая в результате несчастного случая»)');
      END IF;
    
      /*      print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' || v_pol_sum.policy_period_desc ||
                                  ' c ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' по ' ||
                                  to_char(v_pol_sum.end_date, 'dd.mm.yyyy'));
          
            set_font;
            prn('Договор страхования вступает в силу в соответствии с п.6.2. Полисных условий');
          
            set_font(par_style => gc_style_bold);
            prn('СРОК СТРАХОВАНИЯ');
            prn(par_text => 'НАЧАЛО: ', par_w => 16, par_ln => 0);
            set_font;
            prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии');
            set_font(par_style => gc_style_bold);
            prn('ОКОНЧАНИЕ: ', 28, 0);
            set_font;
            prn('23:59 даты окончания срока действия договора страхования');
            prn('(«Дожитие Застрахованного до окончания срока действия Договора страхования»)');
          
            set_font(par_style => gc_style_bold);
            prn('СРОК СТРАХОВАНИЯ*');
            prn('НАЧАЛО: ', 16, 0);
            set_font;
            prn('00:00 4-го (четвертого) дня, следующего за датой оплаты страховой премии (первого страхового взноса)');
            set_font(par_style => gc_style_bold);
            prn('ОКОНЧАНИЕ: ', 28, 0);
            set_font;
            prn('23:59 даты окончания срока действия договора страхования');
            prn('(«Смерть Застрахованного по любой причине»)');
            prn('*Не является страховым случаем событие «Смерть Застрахованного по любой причине» произошедшее в результате болезни (заболевания) Застрахованного и наступившее в течение 90 (девяноста) календарных дней, начиная с первого дня срока действия  Договора страхования.');
          
            set_font(par_style => gc_style_bold);
            prn('СРОК СТРАХОВАНИЯ');
            prn('НАЧАЛО: ', 16, 0);
            set_font;
            prn('00:00 4-го (четвертого) дня, следующего за датой оплаты страховой премии');
            set_font(par_style => gc_style_bold);
            prn('ОКОНЧАНИЕ: ', 28, 0);
            set_font;
            prn('23:59 даты окончания первого страхового года');
            prn('(«Смерть Застрахованного, наступившая в результате несчастного случая», «Смерть Застрахованного, наступившая в результате дорожно-транспортного происшествия)');
          
            IF get_product_line_exists(par_policy_id => v_policy_id, par_prod_line_option_brief => 'WOP')
               AND v_pol_sum.product_brief IN ('Nasledie_2', 'Nasledie_2_HKF')
            THEN
              set_font(par_style => gc_style_bold);
              prn('СРОК СТРАХОВАНИЯ**');
              prn('НАЧАЛО: ', 16, 0);
              set_font;
              prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии (первого страхового взноса) ');
              set_font(par_style => gc_style_bold);
              prn('ОКОНЧАНИЕ: ', 28, 0);
              set_font;
              prn('23:59 даты наступления очередной страховой годовщины ');
                        
              prn('(«Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й группы по любой причине»)');
              prn('**Не является страховым случаем событие «Инвалидность Страхователя   1-й группы п о любой причине», произошедшее в результате болезни Застрахованного и наступившее в течение 90 (девяноста) календарных дней, начиная с первого дня срока действия  Договора страхования.');
            END IF;
          
            IF get_product_line_exists(par_policy_id => v_policy_id, par_prod_line_option_brief => 'WOP')
               AND v_pol_sum.product_brief = 'Nasledie_2_retail'
            THEN
              set_font(par_style => gc_style_bold);
              prn('СРОК СТРАХОВАНИЯ**');
              prn('НАЧАЛО: ', 16, 0);
              set_font;
              prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии');
              set_font(par_style => gc_style_bold);
              prn('ОКОНЧАНИЕ: ', 28, 0);
              set_font;
              prn('23:59 даты наступления очередной страховой годовщины  ');
              prn('(«Освобождение от уплаты страховых взносов в случае наступления события «Инвалидность Страхователя 1-й или 2-ой группы, наступившая в результате несчастного случая»)');
            END IF;
          
            IF get_product_line_exists(par_policy_id              => v_policy_id
                                      ,par_prod_line_option_brief => 'ANY_1_GR')
            THEN
              set_font(par_style => gc_style_bold);
              prn('СРОК СТРАХОВАНИЯ***');
              prn('НАЧАЛО: ', 16, 0);
              set_font;
              prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии (первого страхового взноса) ');
              set_font(par_style => gc_style_bold);
              prn('ОКОНЧАНИЕ: ', 28, 0);
              set_font;
              prn('23:59 даты наступления очередной страховой годовщины ');
              prn('(«Инвалидность Застрахованного 1-й группы по любой причине»)');
              prn('***Не является страховым случаем событие «Инвалидность Застрахованного 1-й группы по любой причине», произошедшее в результате болезни Застрахованного и при этом наступившее в течение 90 (девяноста) календарных дней, начиная с первого дня срока действия Договора страхования');
            END IF;
          
            IF get_product_line_exists(par_policy_id => v_policy_id, par_prod_line_option_brief => 'ADis')
            THEN
              set_font(par_style => gc_style_bold);
              prn('СРОК СТРАХОВАНИЯ**');
              prn('НАЧАЛО: ', 16, 0);
              set_font;
              prn('00:00 1-го (первого) дня, следующего за датой оплаты страховой премии');
              set_font(par_style => gc_style_bold);
              prn('ОКОНЧАНИЕ: ', 28, 0);
              set_font;
              prn('23:59 даты наступления очередной страховой годовщины  ');
              prn('(«Инвалидность Застрахованного 1-й или 2-ой группы, наступившая в результате несчастного случая»)');
            END IF;
      */
      prn('Если Страхователь за 30 (тридцать) календарных дней до дня окончания срока страхования по указанным дополнительным программам не направит письменное заявление Страховщику о намерении исключить какую-либо из указанных  программ или рисков из договора страхования или внести в них изменения, срок страхования по указанным дополнительным программам (страховым рискам) продлевается до даты наступления очередной страховой годовщины');
    END print_periods_custom_2;
  
    PROCEDURE print_programs_custom IS
      v_total_fee NUMBER := 0;
    BEGIN
      set_font;
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 4;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
    
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        gv_datas(1) := '6.1. Страховые риски*';
      ELSE
        gv_datas(1) := 'Страховые риски';
      END IF;
      gv_datas(2) := 'Гарантированная страховая сумма';
      gv_datas(3) := 'Страховой взнос';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_datas(1) := 'Программа страхования «Страхование жизни к сроку»:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'RL';
      gv_borders(2) := 'R';
      gv_borders(3) := 'R';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,nvl(pc.fee, 0) AS fee
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'RECOMMENDED'
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := 'Смерть Застрахованного по любой причине;' || chr(13) ||
                       'Дожитие Застрахованного до окончания срока действия Договора страхования';
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        v_total_fee := v_total_fee + rec.fee;
        row_print2(par_h => 3);
      END LOOP;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховая сумма';
      gv_datas(3) := 'Страховой взнос';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_datas(1) := 'Страховые риски:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'TRL';
      gv_borders(2) := 'TR';
      gv_borders(3) := 'TR';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,nvl(pc.fee, 0) AS fee
                        ,rownum rn
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'MANDATORY'
                   ORDER BY pl.sort_order)
      LOOP
        v_total_fee := v_total_fee + rec.fee;
        gv_datas(1) := rec.description;
        --        IF rec.rn = 1        THEN
        gv_datas(2) := rec.ins_amount;
        --        ELSE          gv_datas(2) := NULL;        END IF;
        gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        row_print2(par_h => 3);
      END LOOP;
    
      gv_styles(1) := 'B';
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
      IF v_pol_sum.product_brief IN
         ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
      THEN
        FOR rec IN (SELECT a.*
                          ,rownum rn
                      FROM (SELECT 'Дополнительная программа страхования "' || pl.description || '"' AS description
                                  ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                                  ,nvl(pc.fee, 0) AS fee
                                  ,plo.brief
                              FROM t_prod_line_option plo
                                  ,t_product_line pl
                                  ,v_prod_product_line ppl
                                  ,t_product_line_type plt
                                  ,(SELECT pc.t_prod_line_option_id
                                          ,pc.ins_amount
                                          ,pc.fee
                                      FROM p_cover  pc
                                          ,as_asset aa
                                     WHERE aa.p_policy_id = v_policy_id
                                       AND aa.as_asset_id = pc.as_asset_id) pc
                             WHERE ppl.product_brief = v_pol_sum.product_brief
                               AND ppl.t_product_line_id = plo.product_line_id
                               AND ppl.t_product_line_id = pl.id
                               AND plo.id = pc.t_prod_line_option_id(+)
                               AND plt.product_line_type_id = pl.product_line_type_id
                               AND plt.brief = 'OPTIONAL'
                             ORDER BY pl.sort_order) a)
        LOOP
          IF rec.rn = 1
          THEN
            gv_datas(1) := '6.2. Дополнительные программы страхования*';
            gv_datas(2) := 'Cтраховая сумма';
            gv_datas(3) := 'Страховой взнос';
          
            gv_aligns(1) := 'C';
            gv_aligns(2) := 'C';
            gv_aligns(3) := 'C';
          
            gv_styles(1) := 'B';
            gv_styles(2) := 'B';
            gv_styles(3) := 'B';
          
            gv_borders(1) := '1';
            gv_borders(2) := '1';
            gv_borders(3) := '1';
          
            row_print2(par_h => 3);
          
            gv_styles(1) := 'B';
            gv_styles(2) := NULL;
            gv_styles(3) := NULL;
          
            gv_borders(1) := '1';
            gv_borders(2) := '1';
            gv_borders(3) := '1';
          END IF;
          v_total_fee := v_total_fee + rec.fee;
          gv_datas(1) := rec.description;
        
          IF rec.brief = 'WOP'
          THEN
            gv_datas(2) := 'Величина страховой премии по рискам, указанным в п. 6.1';
          ELSE
            gv_datas(2) := rec.ins_amount;
          END IF;
          gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
          row_print2(par_h => 3);
        END LOOP;
      END IF;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 5;
      gv_widths(2) := plpdf.getpagespace / 6;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_datas(1) := 'Итого страховой взнос:';
      gv_datas(2) := pkg_rep_utils.to_money_sep(v_total_fee);
    
      row_print2(par_h => 3);
    END print_programs_custom;
  
    PROCEDURE print_payment_terms IS
      v_others_payment_date VARCHAR2(4000);
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w   => 3 * plpdf.getpagespace / 5
                     ,p_txt => 'ДАТА УПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ПЕРВОГО СТРАХОВОГО ВЗНОСА): '
                     ,p_ln  => 0);
      plpdf.printcell(p_w   => 2 * plpdf.getpagespace / 5
                     ,p_txt => to_char(v_pol_sum.fist_payment_date, 'dd.mm.yyyy')
                     ,p_ln  => 1);
    
      SELECT substr(MAX(pay_date), 3)
        INTO v_others_payment_date
        FROM (SELECT sys_connect_by_path(to_char(ADD_MONTHS(v_pol_sum.fist_payment_date
                                                           ,LEVEL * decode(v_pol_sum.payment_terms
                                                                          ,'Раз в полгода'
                                                                          ,6
                                                                          ,'Ежеквартально'
                                                                          ,3
                                                                          ,'Ежегодно'
                                                                          ,12))
                                                ,'dd.mm.yyyy')
                                        ,'; ') pay_date
                FROM dual
              CONNECT BY LEVEL <= (SELECT per.period_value
                                     FROM p_policy pp
                                         ,t_period per
                                    WHERE pp.policy_id = v_policy_id
                                      AND per.id = pp.period_id)
                        
                         * decode(v_pol_sum.payment_terms
                                          ,'Раз в полгода'
                                          ,2
                                          ,'Ежеквартально'
                                          ,4
                                          ,'Ежегодно'
                                          ,1) - 1);
    
      prn(par_w    => 3 * plpdf.getpagespace / 5
         ,par_text => 'ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ: '
         ,par_ln   => 0);
      prn(par_text => v_others_payment_date, par_ln => 1);
    
    END print_payment_terms;
  
    PROCEDURE print_benificiary_table_custom
    (
      par_policy_id                NUMBER
     ,par_max_number_of_empty_rows NUMBER DEFAULT 3
    ) IS
    BEGIN
      delete_row_print_cache;
    
      set_font;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 2;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6 * 2;
      gv_widths(4) := plpdf.getpagespace / 6;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
      gv_styles(4) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
      gv_borders(4) := '1';
    
      gv_datas(1) := 'Ф.И.О.';
      gv_datas(2) := 'ДАТА РОЖДЕНИЯ';
      gv_datas(3) := 'РОДСТВЕННЫЕ И/ИЛИ ИНЫЕ ОТНОШЕНИЯ С ЗАСТРАХОВАННЫМ';
      gv_datas(4) := 'ДОЛЯ ОТ СТРАХОВОЙ ВЫПЛАТЫ,%';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_styles(4) := NULL;
    
      gv_aligns(1) := 'L';
    
      FOR rec IN (SELECT *
                    FROM (SELECT c.obj_name_orig
                                ,to_char(cp.date_of_birth, 'dd.mm.yyyy') date_of_birth
                                ,crt.relationship_dsc
                                ,to_char(ab.value) AS VALUE
                                ,rownum AS rn
                            FROM as_asset           aa
                                ,as_beneficiary     ab
                                ,contact            c
                                ,cn_contact_rel     cr
                                ,t_contact_rel_type crt
                                ,cn_person          cp
                           WHERE aa.p_policy_id = par_policy_id
                             AND aa.as_asset_id = ab.as_asset_id
                             AND ab.contact_id = c.contact_id
                             AND ab.cn_contact_rel_id = cr.id
                             AND cr.relationship_type = crt.id
                             AND c.contact_id = cp.contact_id(+)) t
                        ,(SELECT LEVEL AS rn2
                           FROM dual
                         CONNECT BY LEVEL <= par_max_number_of_empty_rows)
                   WHERE rn2 = rn(+))
      LOOP
        gv_datas(1) := rec.obj_name_orig;
        gv_datas(2) := rec.date_of_birth;
        gv_datas(3) := rec.relationship_dsc;
        gv_datas(4) := rec.value;
      
        row_print2(par_h => 3);
      END LOOP;
    END print_benificiary_table_custom;
  
    PROCEDURE print_insurer_info_custom IS
    BEGIN
      print_default_chapter(upper('СТРАХОВЩИК'));
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_txt      => 'ООО "СК "Ренессанс Жизнь", 457040, Россия, Челябинская обл., г. Южноуральск, ул. Аизовская, д.6, Тел.: 8 (495) 981-29-81, Факс: 8 (495) 589-18-65/67, www.renlife.com, ИНН 118774353, КПП 775001001, р/с 40701 810 8 0001 0000034 ИНН: 7735057951 Юридический адрес: 125040, г. Москва, улица Правды, д. 8, кор.1 Фактический адрес: 125040, г. Москва, улица Правды, д. 8, кор. 1, Основной офис "Центральный". Корреспондентский счет: № 30101810400000000216 в Отделении 2 Главного управления Центрального банка Российской Федерации по Центральному федеральному округу г. Москва БИК: 044585216 КПП: 997950001 ОКТМО: 45334000 ОКПО: 9807804 ОГРН: 1027700280937 Генеральная лицензия ЦБ РФ № 316 от 15 марта 2012 г.'
                              ,p_h        => 3
                              ,p_clipping => 0
                              ,p_ln       => 1);
    
    END print_insurer_info_custom;
  
    PROCEDURE print_insurer_info_hkf IS
    BEGIN
      print_default_chapter(upper('СТРАХОВЩИК'));
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_txt      => 'ООО «СК «Ренессанс Жизнь», 115114,Россия, г. Москва, наб. Дербеневская,д.7,стр. 22 Тел. 8 (495) 981 2 981, Факс 8 (495) 589 18 65/67 info@renlife.com www.renlife.com Лицензия С № 3972 77 от 17.01.2006 года. ИНН  7725520440, КПП 775001001, Р/С  40701 810 8 0001 0000034 в ООО "Хоум Кредит энд Финанс Банк", ИНН 7735057951,  Юридический адрес:125040, г. Москва, улица Правды, д. 8, кор.1, К/С 30101810400000000216 в Отделении 2 Главного управления Центрального банка Российской Федерации по Центральному федеральному округу г. Москва, БИК:044585216 КПП 997950001 ОКТМО 45334000 ОКПО 9807804 ОГРН 1027700280937,  Генеральная лицензия ЦБ РФ № 316 от 15 марта 2012 г.'
                              ,p_h        => 3
                              ,p_clipping => 0
                              ,p_ln       => 1);
    END print_insurer_info_hkf;
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
    v_signer       := get_signer('pkg_rep_plpdf.rep_nasledie');
  
    SELECT COUNT(*)
      INTO v_underwriting
      FROM dual
     WHERE EXISTS (SELECT NULL
              FROM p_policy       pp
                  ,p_policy       pp_a
                  ,doc_status     ds
                  ,doc_status_ref dsr
             WHERE pp.policy_id = v_policy_id
               AND pp.pol_header_id = pp_a.pol_header_id
               AND ds.document_id = pp_a.policy_id
               AND ds.doc_status_ref_id = dsr.doc_status_ref_id
               AND dsr.brief = 'NONSTANDARD');
  
    init(par_default_font_size => 8);
  
    --    print_barcode(par_policy_id => v_policy_id);
  
    print_draft(v_pol_sum.policy_status_desc);
  
    gc_default_line_height := 3;
  
    print_default_title('ДОГОВОР СТРАХОВАНИЯ ПО ПРОГРАММЕ СТРАХОВАНИЯ «НАСЛЕДИЕ» №' ||
                        v_pol_sum.pol_num
                       ,par_size => 12);
    print_default_title(' (заключен на основании Полисных условий по программе страхования «Наследие»)'
                       ,par_size => 12);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    IF v_pol_sum.product_brief IN ('Nasledie_HKF', 'Nasledie_2_HKF')
    THEN
      print_insurer_info_hkf;
    ELSE
      print_default_insurer_info;
    END IF;
    --print_insurer_info_custom;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_insuree_info(par_contact_info => v_insuree_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    print_assured_info(par_contact_info => v_assured_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    -- ВАЛЮТА ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    gv_datas(1) := 'ВАЛЮТА';
    gv_widths(1) := plpdf.getpagespace;
    v_checkpagebreak := plpdf.checkpagebreak(plpdf.getrowheight(p_data    => gv_datas
                                                               ,p_width   => gv_widths
                                                               ,p_maxline => gv_maxlines));
    print_currency(par_policy_summary => v_pol_sum);
  
    -------------------------------------------------------------------------------------------------
    --СРОК ДЕЙСТВИЯ ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    --    и больше разрыв не добавлять!
    --    plpdf.newpage;
    --    print_draft(v_pol_sum.policy_status_desc);
    IF v_pol_sum.product_brief IN
       ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
    THEN
      print_periods_custom_2;
    ELSE
      print_periods_custom;
    END IF;
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_draft(v_pol_sum.policy_status_desc);
    print_default_chapter('СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВАЯ ПРЕМИЯ');
    print_programs_custom;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ВЗНОСОВ):
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ: '
                         ,0);
    plpdf.printcell(p_txt => v_pol_sum.payment_terms, p_h => -1, p_ln => 1);
    print_payment_terms;
  
    -------------------------------------------------------------------------------------------------
    -- ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ: ВЕСЬ МИР, 24 ЧАСА');
  
    IF v_pol_sum.product_brief IN
       ('Nasledie_2', 'Nasledie_2_retail', 'Nasledie_2_HKF', 'Nasledie_2_BIN')
    THEN
      -------------------------------------------------------------------------------------------------
      -- ПРИМЕЧАНИЕ
      -------------------------------------------------------------------------------------------------
      print_note_2;
    END IF;
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННОГО');
    print_benificiary_table_custom(v_policy_id, 3);
  
    IF v_underwriting = 0
    THEN
      -------------------------------------------------------------------------------------------------
      --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО
      -------------------------------------------------------------------------------------------------
      print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО');
      print_declaration_custom;
    END IF;
  
    /*    IF v_pol_sum.product_brief in ('Nasledie_2', 'Nasledie_2_retail')
    THEN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
    END IF;*/
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------  
    IF v_underwriting = 0
    THEN
      print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
      print_additional_conds_custom;
    ELSE
      print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
      print_additional_conds_risk;
    END IF;
    blank_cell(par_ln => 1);
  
    -------------------------------------------------------------------------------------------------
    -- ПОДПИСИ
    -------------------------------------------------------------------------------------------------
    print_sign_custom;
  
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    -------------------------------------------------------------------------------------------------
    -- ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ
    -------------------------------------------------------------------------------------------------
    print_cash_surr_custom;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
    NULL;
  END rep_nasledie;

  /*
    Процедура формирования Заявление по продукту Наследия
    385734 Настройка продукта Наследие
    Доброхотова И., декабрь, 2014
  */
  PROCEDURE rep_nasledie_notice
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    pkg_rep_plpdf_template.rep_nasledie_notice_p(par_content_type, par_file_name, par_data);
  END rep_nasledie_notice;

  -- Процедура формирования полиса для продуктов 
  -- Инвестор ВТБ 5 лет, Инвестор ХКФ 5 лет, Инвестор с ед.ф.опл. Татфондбанк
  PROCEDURE rep_investor_lump_full
  (
    par_is_orig_dec  IN BOOLEAN
   ,par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
  
    v_cash_surr_table_cur typ_cur_cash_surr_table;
  
    v_total_sum VARCHAR2(200);
  
    PROCEDURE prn(par_text VARCHAR2) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => 1
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text);
    END;
  
    -- процедура prn_list_row
    -- назначение: представление текста в виде таблицы из двух столбцов
    -- полезно для формирования списков
    -- параметры: p_index - значение для первого столбца
    --            p_value - значение для второго столбца
    --            p_index_percent - ширина первого столбца в процентах от ширины страницы
    -- пример вывода: 1.1  abcdef abcdef
    --                     qweqwe qweqwe
    --                1.2  abcdef abcdef
    PROCEDURE prn_list_row
    (
      p_index         IN VARCHAR2
     ,p_value         IN VARCHAR2
     ,p_index_percent IN NUMBER DEFAULT 4
    ) IS
    BEGIN
    
      delete_row_print_cache;
      -- по умолчанию  plpdf.getpagespace / 25
      gv_widths(1) := plpdf.getpagespace / (100 / p_index_percent);
      -- по умолчанию  plpdf.getpagespace / 25 * 24
      gv_widths(2) := plpdf.getpagespace / (100 / p_index_percent) * (100 / p_index_percent - 1);
    
      gv_borders(1) := 0;
      gv_borders(2) := 0;
    
      gv_aligns(1) := 'L'; -- по левому краю
      gv_aligns(2) := 'J'; -- по ширине
    
      gv_datas(1) := p_index;
      gv_datas(2) := p_value;
      row_print2;
    END;
  
    PROCEDURE print_programs IS
      c_height  NUMBER := 30;
      c_weights plpdf_type.t_row_widths;
    
      v_ins_amount     VARCHAR2(255);
      v_fee            VARCHAR2(255);
      v_prod_line_desc VARCHAR2(255);
    
      CURSOR cur_is_acc_progr(cp_policy_id NUMBER) IS
      
        SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
              ,'Смерть Застрахованного, наступившая в результате несчастного случая**'
              ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
        
          FROM as_asset           aa
              ,p_cover            pc
              ,t_prod_line_option plo
              ,t_product_line     pl
              ,status_hist        sh
         WHERE pc.as_asset_id = aa.as_asset_id
           AND aa.p_policy_id = cp_policy_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND plo.brief = 'AD'
           AND pc.status_hist_id = sh.status_hist_id
           AND sh.brief != 'DELETED';
    
    BEGIN
      set_font(par_size  => gv_default_font_size + 1
              ,par_style => gc_style_bold
              ,par_color => gc_color_orange);
      plpdf.printcell(p_txt   => 'ОСНОВНЫЕ ПРОГРАММЫ'
                     ,p_align => 'L'
                     ,p_h     => -1
                     ,p_ln    => 1);
      set_font;
    
      delete_row_print_cache;
    
      set_font(par_style => gc_style_bold);
    
      gv_widths(1) := plpdf.getpagespace / 6 * 2;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
      gv_widths(4) := plpdf.getpagespace / 6;
      gv_widths(5) := plpdf.getpagespace / 6;
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
      gv_borders(4) := 1;
      gv_borders(5) := 1;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := gc_style_bold;
      gv_styles(5) := gc_style_bold;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
      gv_aligns(5) := 'C';
    
      gv_datas(1) := 'Страховые риски';
      gv_datas(2) := 'Программы страхования';
      gv_datas(3) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
      gv_datas(4) := 'Доля от общей страховой премии' || gc_new_line || '(%)';
      gv_datas(5) := 'Страховая премия по каждой программе' || gc_new_line || '(рубли)';
    
      row_print2(par_h => 4);
    
      gv_styles(2) := gc_style_regular;
      gv_styles(3) := gc_style_regular;
      gv_styles(4) := gc_style_regular;
      gv_styles(5) := gc_style_regular;
    
      gv_borders(1) := 'LR';
      gv_aligns(1) := 'L';
    
      FOR vr IN (SELECT rownum rn
                       ,t.*
                       ,COUNT(*) over() total_rn
                       ,pkg_rep_utils.to_money_sep(t.total_sum) total_sum_varchar
                   FROM (SELECT pkg_rep_utils.to_money_sep(pc.fee) fee
                               ,pl.description
                               ,pkg_rep_utils.to_money_sep(100 * pc.fee / SUM(pc.fee) over()) fee_part
                               ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                               ,SUM(pc.fee) over() total_sum
                           FROM as_asset           aa
                               ,p_cover            pc
                               ,t_prod_line_option plo
                               ,t_product_line     pl
                               ,status_hist        sh
                          WHERE pc.as_asset_id = aa.as_asset_id
                            AND aa.p_policy_id = v_policy_id
                            AND pc.t_prod_line_option_id = plo.id
                            AND plo.product_line_id = pl.id
                            AND pc.status_hist_id = sh.status_hist_id
                            AND sh.brief != 'DELETED'
                            AND plo.brief IN ('PEPR_A', 'PEPR_B', 'PEPR_A_PLUS')
                          ORDER BY CASE plo.brief
                                     WHEN 'PEPR_A_PLUS' THEN
                                      3
                                     WHEN 'PEPR_A' THEN
                                      1
                                     WHEN 'PEPR_B' THEN
                                      2
                                   END) t)
      LOOP
        CASE vr.rn
          WHEN 1 THEN
            gv_styles(1) := gc_style_regular;
            gv_datas(1) := 'Дожитие Застрахованного до даты окончания срока действия договора страхования;' ||
                           gc_new_line || 'Смерть Застрахованного по любой причине*';
          WHEN 2 THEN
            gv_styles(1) := gc_style_italic;
            gv_datas(1) := '*Страховая выплата в случае смерти равна сумме уплаченных страховых взносов и 100% от дополнительной страховой суммы на дату наступления страхового случая, согласно п. 10.3. Полисных условий.';
          WHEN 3 THEN
            gv_styles(1) := gc_style_italic;
            gv_datas(1) := 'Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленных в Разделе 4.3 Полисных условий.';
        END CASE;
      
        gv_datas(2) := vr.description;
        gv_datas(3) := vr.ins_amount;
        gv_datas(4) := vr.fee_part;
        gv_datas(5) := vr.fee;
      
        IF vr.rn = vr.total_rn
        THEN
          gv_borders(1) := 'LBR';
        END IF;
      
        row_print2;
      
        v_total_sum := vr.total_sum_varchar;
      END LOOP;
    
      delete_row_print_cache;
    
      gv_datas(1) := '* Любая причина  —  событие (болезнь или несчастный случай), возникшее в течение действия договора, а также  самоубийство, при условии, что к моменту самоубийства договор страхования действовал не менее двух лет.';
      gv_datas(2) := '';
      gv_styles(1) := 'I';
      gv_styles(2) := 'I';
    
      gv_borders(1) := 'LTR';
      gv_borders(2) := 'LTR';
      gv_widths(1) := plpdf.getpagespace / 6 * 5;
      gv_widths(2) := plpdf.getpagespace / 6;
    
      row_print2;
    
      gv_datas(1) := 'ИТОГО ОБЩАЯ СТРАХОВАЯ ПРЕМИЯ (уплачивается единовременно):';
      gv_datas(2) := v_total_sum;
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      gv_borders(1) := 'LBR';
      gv_borders(2) := 'LBR';
      gv_widths(1) := plpdf.getpagespace / 6 * 5;
      gv_widths(2) := plpdf.getpagespace / 6;
    
      row_print2;
    
      prn('');
    
      OPEN cur_is_acc_progr(v_policy_id);
      FETCH cur_is_acc_progr
        INTO v_fee
            ,v_prod_line_desc
            ,v_ins_amount;
    
      CLOSE cur_is_acc_progr;
    
      IF v_prod_line_desc IS NOT NULL
      THEN
        set_font(par_style => gc_style_bold, par_color => gc_color_orange, par_size => 10);
      
        plpdf.printcell(p_txt   => 'Дополнительная программа «Страхование от несчастных случаев»'
                       ,p_align => 'L'
                       ,p_h     => -1
                       ,p_ln    => 1);
      
        set_font;
      
        delete_row_print_cache;
      
        gv_widths(1) := plpdf.getpagespace / 2;
        gv_widths(2) := plpdf.getpagespace / 4;
        gv_widths(3) := plpdf.getpagespace / 4;
      
        gv_styles(1) := gc_style_bold;
        gv_styles(2) := gc_style_bold;
        gv_styles(3) := gc_style_bold;
      
        gv_aligns(1) := 'L';
        gv_aligns(2) := 'C';
        gv_aligns(3) := 'C';
      
        gv_borders(1) := 1;
        gv_borders(2) := 1;
        gv_borders(3) := 1;
      
        gv_datas(1) := 'Страховые риски';
        gv_datas(2) := 'Гарантированная страховая сумма' || gc_new_line || '(рубли)';
        gv_datas(3) := 'Страховая премия' || gc_new_line || '(рубли)';
      
        row_print2(par_h => 4);
      
        gv_styles(1) := gc_style_regular;
        gv_styles(2) := gc_style_regular;
        gv_styles(3) := gc_style_regular;
      
        gv_datas(1) := v_prod_line_desc;
        gv_datas(2) := v_ins_amount;
        gv_datas(3) := v_fee;
      
        row_print2(par_h => 4);
      
        plpdf.printmultilinecell(p_txt => '** Страховыми случаями по договору страхования являются события, перечисленные в настоящем Разделе, за исключением событий, перечисленные в Разделе 4 Полисных условий'
                                ,p_ln  => 1);
      
        delete_row_print_cache;
        gv_datas(1) := 'ИТОГО ОБЩАЯ СТРАХОВАЯ ПРЕМИЯ (уплачивается единовременно):';
        gv_datas(2) := pkg_rep_utils.to_money_sep(pkg_policy.get_policy_fee(par_policy_id          => v_policy_id
                                                                           ,par_include_admin_cost => FALSE));
      
        gv_widths(1) := plpdf.getpagespace / 4 * 3;
        gv_widths(2) := plpdf.getpagespace / 4;
      
        gv_styles(1) := gc_style_bold;
        gv_styles(2) := gc_style_bold;
      
        gv_aligns(1) := 'R';
        gv_aligns(2) := 'C';
      
        gv_borders(1) := 1;
        gv_borders(2) := 1;
      
        row_print2;
      
        set_font(par_style => gc_style_italic);
        plpdf.printmultilinecell(p_txt => 'Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.'
                                ,p_ln  => 1);
      END IF;
    
    END print_programs;
  
    PROCEDURE print_periods_regular IS
    BEGIN
      set_font(par_style => gc_style_bold);
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace * 20 / 100;
      gv_widths(2) := plpdf.getpagespace * 8 / 100;
      gv_widths(3) := plpdf.getpagespace * 12 / 100;
      gv_widths(4) := plpdf.getpagespace * 20 / 100;
      gv_widths(5) := plpdf.getpagespace * 12 / 100;
      gv_widths(6) := plpdf.getpagespace * 20 / 100;
      gv_widths(7) := plpdf.getpagespace * 8 / 100;
    
      gv_borders(1) := 0;
      gv_borders(2) := 0;
      gv_borders(3) := 0;
      gv_borders(4) := 0;
      gv_borders(5) := 0;
      gv_borders(6) := 0;
      gv_borders(7) := 0;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'L';
      gv_aligns(4) := 'L';
      gv_aligns(5) := 'L';
      gv_aligns(6) := 'L';
      gv_aligns(7) := 'L';
    
      gv_datas(1) := 'СРОК СТРАХОВАНИЯ: ';
      gv_datas(2) := v_pol_sum.policy_period_desc;
      gv_datas(3) := 'НАЧАЛО:';
      gv_datas(4) := '00:00 часов ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy');
      gv_datas(5) := 'ОКОНЧАНИЕ';
      gv_datas(6) := '23:59 часов ' || to_char(v_pol_sum.end_date, 'dd.mm.yyyy');
      gv_datas(7) := '';
    
      row_print2;
    
      plpdf.printmultilinecell(p_h        => 3
                              ,p_clipping => 0
                              ,p_txt      => 'Договор страхования вступает в силу с 00:00 (ноля часов ноля минут) дня, следующего за датой принятия банком платежного поручения с исполнением на оплату страхового взноса в полном объеме. В случае, если страховая премия не поступит на расчетный счет Страховщика в течение 5-ти рабочих дней с даты подписания Страхователем договора страхования, договор страхования считается не вступившем в силу.'
                              ,p_ln       => 1);
    END print_periods_regular;
  
    PROCEDURE print_payment_terms IS
      v_others_payment_date VARCHAR2(500);
    BEGIN
      set_font(par_style => gc_style_bold);
    
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'ДАТА УПЛАТЫ СТРАХОВОЙ ПРЕМИИ: '
                     ,p_ln  => 0);
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'должна быть оплачена ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy')
                     ,p_ln  => 1);
    
    END print_payment_terms;
  
    PROCEDURE print_additional_conds IS
    BEGIN
      set_font;
      prn('9.1. Договор страхования заключен на основании Полисных условий страхования жизни по программе «Инвестор»  , утвержденных приказом Генерального директора ООО «СК «Ренессанс Жизнь» № 198/ОД/14 от 14.11.2014.(далее - «Полисные условия»).');
      prn('9.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) на Договоре, а также в приложениях и дополнительных соглашениях к нему.');
      prn('9.3. Территория страхования: весь мир.');
      prn('9.4. Время действия страховой защиты: 24 часа.');
      prn('9.5. Валюта договора страхования: Рубль РФ.');
      prn('9.6. При досрочном прекращении действия договора выплата предусмотренной соответствующей программой страхования гарантированной выкупной суммы производится согласно таблице гарантированных выкупных сумм (Приложение № 1).');
      --      prn('     ***');
      prn('***При наличии родственников, замещающие вышеуказанные должности, заполняется дополнительная анкета по форме Страховщика');
      prn('');
      prn('     К Договору прилагаются:');
      prn('     Приложение № 1 - Таблица гарантированных выкупных сумм');
      prn('     Приложение № 2 - «Полисные условия»');
    END print_additional_conds;
  
    PROCEDURE print_signes IS
      v_signer typ_signer;
    BEGIN
    
      v_signer := get_signer('pkg_rep_plpdf.rep_invest_lump_is_orig_dec');
      IF v_pol_sum.policy_status_breif NOT IN ('B2B_PENDING', 'PROJECT')
      THEN
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - 5 - 45
                      ,p_y    => plpdf.getcurrenty
                      ,p_w    => 45
                      ,p_h    => 50);
      END IF;
    
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 10 * 3;
      gv_widths(2) := plpdf.getpagespace / 10 * 3;
      gv_widths(3) := plpdf.getpagespace / 10 * 4;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'L';
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
    
      gv_datas(1) := 'СТРАХОВАТЕЛЬ';
      gv_datas(2) := 'ЗАСТРАХОВАННЫЙ';
      gv_datas(3) := 'СТРАХОВЩИК';
    
      gv_borders(1) := 'LTR';
      gv_borders(2) := 'LTR';
      gv_borders(3) := 'LTR';
    
      row_print2;
    
      gv_widths(1) := plpdf.getpagespace / 100 * 30;
      gv_widths(2) := plpdf.getpagespace / 100 * 30;
      gv_widths(3) := plpdf.getpagespace / 100 * 40;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'L';
    
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      gv_styles(3) := gc_style_regular;
    
      gv_datas(1) := 'Подписывая настоящий Договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации, «Полисные условия» получил и ознакомился.' ||
                     gc_new_line || gc_new_line || gc_new_line || 'Подпись:________________________ ' ||
                     gc_new_line || 'Дата подписания: ________________';
      gv_datas(2) := 'Подписывая настоящий Договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации, с «Полисными условиями» ознакомился. С назначением Выгодоприобретателей согласен.' ||
                     gc_new_line || gc_new_line || 'Подпись:________________________ ' || gc_new_line ||
                     'Дата подписания: ________________';
      gv_datas(3) := 'Представитель по доверенности ' || v_signer.short_name || ' (дов №' ||
                     v_signer.procuratory_num || ')';
    
      gv_borders(1) := 'LBR';
      gv_borders(2) := 'LBR';
      gv_borders(3) := 'LBR';
    
      row_print2;
    END print_signes;
  
    PROCEDURE print_cash_surr IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 1')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9, par_style => gc_style_italic);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => 'ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      prn('Гарантированная выкупная сумма рассчитывается как % от сформированного резерва по договору страхования на дату окончания страхового года,  в течение которого произошло расторжение договора страхования.');
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr;
  
    PROCEDURE print_declarations IS
    BEGIN
      set_font(par_style => gc_style_bold);
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
      set_font;
    
      prn_list_row('8.1.'
                  ,'НЕ является инвалидом, лицом, требующим постоянного ухода; НЕ имеет нарушения опорно-двигательной системы, ограничивающие движение; НЕ страдает мышечной дистрофией, тяжелыми нервными расстройствами, психическими заболеваниями, онкологическими заболеваниями;  НЕ употребляет  наркотики, токсические вещества; НЕ страдает алкоголизмом, или НЕ состоит по перечисленным причинам на диспансерном учете; НЕ является ВИЧ-инфицированным или НЕ страдает СПИДом (синдромом приобретенного иммунного дефицита);');
      prn_list_row('8.2.'
                  ,'НЕ находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;');
      prn_list_row('8.3.'
                  ,'Мне не известно о каких-либо внешних факторах, представляющих угрозу жизни или здоровью Застрахованного.');
    
      set_font(par_style => gc_style_bold);
      prn('');
      prn('ДА, Я МОГУ ПОДПИСАТЬ НАСТОЯЩУЮ ДЕКЛАРАЦИЮ И ЗАЯВЛЯЮ:');
      set_font;
      prn_list_row('-'
                  ,'что я согласен(-на) с утверждениями настоящей Декларации, т.е. я подтверждаю достоверность сведений, содержащихся в этих утверждениях. Я понимаю, что предоставление ложных и/или неполных сведений, равно как и отказ в предоставлении информации, может повлечь отказ в страховой выплате;');
      prn_list_row('-'
                  ,'что я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой  компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой степени страхового риска, так и в связи со страховыми случаями по данному договору страхования.');
      IF par_is_orig_dec
      THEN
        prn_list_row('-'
                    ,'Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставляет ООО «СК «Ренессанс Жизнь» согласие на обработку (сбор, систематизацию, накопление, хранение, уточнение (обновление, изменение), использование, распространение, обезличивание, блокирование, уничтожение, как на бумажных, так и на электронных носителях, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям) своих персональных данных, содержащих в настоящем Договоре, в том числе данных о состоянии здоровья, в целях исполнения между Страхователем и Страховщиком Договора страхования, а также в целях продвижения товаров, работ, услуг на рынке страхования путём осуществления прямых контактов с помощью средств связи, при этом такое согласие дается Страхователем/ Застрахованным Страховщику  на срок действия Договора страхования и в течение 15 лет после окончания срока действия Договора страхования и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
      ELSE
        prn_list_row('-'
                    ,'Подписывая настоящий Договор, Страхователь (Застрахованный) в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» своей волей и в своем интересе предоставляет(ют) Страховщику, Банку, Сервисной компании и Агенту по Агентскому договору право на смешанную обработку с использованием и без использования средств автоматизации (в том числе сбор, систематизацию, накопление, хранение, уточнение, обновление, изменение, использования, распространение, передачу (в том числе трансграничную), обезличивание, блокирование и уничтожение) указанных в настоящем Договоре персональных данных Страхователя (Застрахованного), в том числе в целях заключения между Страхователем и Страховщиком договора страхования. При этом выражаю согласие Страховщику и Банку на смешанную обработку с использованием и без использования средств автоматизации также специальных категорий моих персональных данных, включая копии либо подлинники документов с указанием состояния здоровья. Данное согласие вступает в силу со дня его подписания и действует в течение 5 (Пяти) лет, но в любом случае не менее срока, необходимого для достижения целей обработки персональных данных, и может быть отозвано путем направления письменного уведомления по адресу Агента и/или Страховщика. В случае отзыва Страхователем (Застрахованным) согласия на обработку персональных данных, Агент и Страховщик вправе не прекращать обработку персональных данных, необходимых для исполнения заключенных договоров, а также в иных случаях предусмотренных законодательством.');
      END IF;
      prn_list_row('-'
                  ,'Подтверждаю, что ни я, ни мои  родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях.***');
    END;
  
    PROCEDURE print_declaration_ad IS
    
      v_chapter_text VARCHAR2(200) := '8.4 В СЛУЧАЕ ВЫБОРА ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЫ «СТРАХОВАНИЕ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ»';
    BEGIN
      set_font(par_size  => gv_default_font_size + 1
              ,par_style => gc_style_bold
              ,par_color => gc_color_orange);
    
      plpdf.printmultilinecell(p_txt => v_chapter_text, p_align => 'L', p_h => -1);
      set_font;
    
      set_font(par_style => gc_style_bold);
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
      set_font;
    
      prn_list_row('8.4.1'
                  ,'НЕ связан с особым риском в связи с трудовой деятельностью (например: облучение, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания и т.п.);'
                  ,5);
      prn_list_row('8.4.2'
                  ,'НЕ занимается опасными видами спорта или опасными видами увлечений (например, альпинизм, погружение под воду на глубину более 40 метров, в подводные пещеры, к останкам судов или строений, находящихся на дне, независимо от глубины погружения, прыжки с парашютом, скалолазание, автоспорт, непрофессиональная авиация) и не намеревается путешествовать в горячие точки планеты;'
                  ,5);
      prn_list_row('8.4.3'
                  ,'Дополнительно я подтверждаю, что общая страховая сумма по любым договорам страхования, заключенным в отношении Застрахованного по риску «смерть Застрахованного, наступившая в результате несчастного случая», учитывая также настоящий Договор страхования, не превышает 3 000 000 рублей.'
                  ,5);
    END;
  
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
  
    init(par_default_font_size => 8);
    print_barcode(par_policy_id => v_policy_id);
    print_draft(v_pol_sum.policy_status_desc);
  
    set_font(par_size => 20, par_style => gc_style_bold, par_color => gc_color_orange);
    plpdf.printcell(p_txt        => 'Инвестор'
                   ,p_align      => 'R'
                   ,p_h          => -1
                   ,p_ln         => 0
                   ,p_clipping   => 0
                   ,p_vert_align => 'T'
                   ,p_w          => 101);
  
    set_font(par_color => gc_color_orange, par_size => 10, par_style => gc_style_bold);
    plpdf.printcell(p_txt        => '(версия 2.0)'
                   ,p_align      => 'L'
                   ,p_h          => 0
                   ,p_ln         => 1
                   ,p_clipping   => 0
                   ,p_w          => 30
                   ,p_vert_align => 'B');
  
    set_font(par_style => gc_style_bold, par_color => gc_color_orange, par_size => 10);
    plpdf.printcell(p_txt   => '(с единовременной формой оплаты)'
                   ,p_align => 'C'
                   ,p_h     => -1
                   ,p_ln    => 1);
    prn('');
    print_default_title('Договор страхования № ' || v_pol_sum.ids);
  
    --СТРАХОВЩИК
    print_default_insurer_info;
    prn('');
  
    --СТРАХОВАТЕЛЬ
    gc_default_line_height := 2.5;
  
    print_insuree_info(par_contact_info => v_insuree_info, par_version_num => gc_contact_info_ver2);
    prn('');
  
    --ЗАСТРАХОВАННОЕ ЛИЦО
    print_assured_info(par_contact_info => v_assured_info, par_version_num => gc_contact_info_ver2);
    prn('');
  
    print_draft(v_pol_sum.policy_status_desc);
    prn('');
  
    --ПРОГРАММЫ СТРАХОВАНИЯ
    plpdf.newpage;
    gc_default_line_height := 3;
    print_default_chapter('ПРОГРАММЫ СТРАХОВАНИЯ');
    print_programs;
    prn('');
  
    --ПЕРИОД СТРАХОВАНИЯ
    print_default_chapter('ПЕРИОД СТРАХОВАНИЯ');
    print_periods_regular;
    prn('');
  
    --УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ
    print_default_chapter('УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ');
    print_payment_terms;
    prn('');
  
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННОГО');
    print_benificiary_table(v_policy_id, 3);
    prn('');
  
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО
    print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО');
    print_declarations;
    prn('');
  
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО В СЛУЧАЕ ВЫБОРА ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЫ «СТРАХОВАНИЕ ОТ НЕСЧАСТНЫХ СЛУЧАЕВ»
    print_declaration_ad;
    prn('');
  
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    print_additional_conds;
    prn('');
  
    --ПОДПИСИ
    print_signes;
  
    plpdf.linebreak;
    --ТАБЛИЦА ВЫКУПНЫХ СУММ
    print_cash_surr;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_investor_lump_full;

  /*
    Процедура формирования полиса по продуктам Жизни
    Гармония жизни_2,Семья_2, Будущее_2
    по новым ПУ серии 415
    
    385161 FW Гармония жизни, серия 415
    Доброхотова И., январь, 2015
  */
  PROCEDURE policy_life_415
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  
    v_policy_id    p_policy.policy_id%TYPE;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
    v_signer       typ_signer;
  
    gv_chapter_num PLS_INTEGER := 0;
  
    gv_application_number PLS_INTEGER := 2;
  
    v_text          VARCHAR2(4000);
    v_addendum_note VARCHAR2(2000);
    v_num_add_line  NUMBER := 0;
  
    FUNCTION prn_num RETURN VARCHAR2 IS
    BEGIN
      v_num_add_line := v_num_add_line + 1;
      RETURN v_num_add_line || '. ';
    END;
  
    PROCEDURE set_title(par_text VARCHAR2) IS
    BEGIN
    
      set_font(par_size => 20, par_style => gc_style_bold, par_color => gc_color_orange);
      plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    END;
  
    PROCEDURE set_cotitle(par_text VARCHAR2) IS
    BEGIN
      set_font(par_size => 18, par_style => gc_style_bold, par_color => gc_color_orange);
      plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
    END;
  
    PROCEDURE set_chapter(par_title VARCHAR2) IS
    BEGIN
      gv_chapter_num := gv_chapter_num + 1;
    
      set_font(par_size => 9, par_style => gc_style_bold, par_color => gc_color_orange);
      plpdf.printcell(p_txt   => gv_chapter_num || '. ' || par_title
                     ,p_align => 'L'
                     ,p_h     => -1
                     ,p_ln    => 1);
    END;
  
    PROCEDURE print_info_element
    (
      par_element_name  VARCHAR2
     ,par_element_value VARCHAR2
    ) IS
    BEGIN
      set_font(par_size => 8, par_style => gc_style_bold);
      plpdf.printcell(p_w   => trunc(plpdf.getpagewidth * 0.3)
                     ,p_txt => upper(par_element_name)
                     ,p_h   => -1
                     ,p_ln  => 0);
      set_font;
      plpdf.printmultilinecell(p_txt => par_element_value, p_h => -1);
    END print_info_element;
  
    FUNCTION get_next_payment_dates
    (
      par_start_date          DATE
     ,par_payment_terms_brief VARCHAR2
    ) RETURN VARCHAR2 IS
      v_dates              tt_one_col;
      v_number_of_payments t_payment_terms.number_of_payments%TYPE;
    BEGIN
    
      SELECT pt.number_of_payments
        INTO v_number_of_payments
        FROM t_payment_terms pt
       WHERE pt.brief = par_payment_terms_brief;
    
      SELECT to_char(ADD_MONTHS(par_start_date, (LEVEL - 1) * 12 / v_number_of_payments), 'dd.mm')
        BULK COLLECT
        INTO v_dates
        FROM dual
      CONNECT BY LEVEL <= v_number_of_payments;
    
      RETURN pkg_utils.get_aggregated_string(par_table => v_dates, par_separator => ', ');
    END;
  
    PROCEDURE print_product_lines_info(par_policy_id IN p_policy.policy_id%TYPE) IS
      v_total_premium VARCHAR2(100);
      v_admin_costs   NUMBER;
      vc_ins_amount_width CONSTANT NUMBER := 40;
      vc_fee_width        CONSTANT NUMBER := 40;
      v_text VARCHAR2(4000);
    
    BEGIN
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace - vc_fee_width - vc_ins_amount_width;
      gv_widths(2) := vc_fee_width;
      gv_widths(3) := vc_ins_amount_width;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_borders(1) := 0;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
    
      gv_styles(1) := NULL;
      gv_styles(2) := gc_style_italic;
      gv_styles(3) := gc_style_italic;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховая (гарантированная) страховая сумма*, ' || v_pol_sum.fund_short_name;
      gv_datas(3) := 'Страховая премия (страховой взнос), ' || v_pol_sum.fund_short_name;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_align   => gv_aligns
                      ,p_width   => gv_widths
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      -- Основная программа
      gv_datas(1) := upper('ОСНОВНАЯ ПРОГРАММА:');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_borders(1) := 0;
      gv_borders(2) := 0;
      gv_borders(3) := 0;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_align   => gv_aligns
                      ,p_width   => gv_widths
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      -- Данные основной программы
      gv_borders(1) := 0;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      FOR rec IN (SELECT pl.description
                        ,pkg_rep_utils.to_money_sep(pc.fee) fee
                        ,pkg_rep_utils.to_money_sep(pc.ins_amount) ins_amount
                    FROM as_asset            aa
                        ,p_cover             pc
                        ,t_prod_line_option  plo
                        ,t_product_line      pl
                        ,t_product_line_type plt
                   WHERE aa.p_policy_id = par_policy_id
                     AND aa.as_asset_id = pc.as_asset_id
                     AND pc.t_prod_line_option_id = plo.id
                     AND plo.product_line_id = pl.id
                     AND pl.product_line_type_id = plt.product_line_type_id
                     AND plt.brief = 'RECOMMENDED'
                     AND pc.status_hist_id != pkg_cover.get_status_hist_id_del)
      LOOP
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := rec.fee;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END LOOP;
    
      -- Дополнительные программы
      gv_datas(1) := upper('ДОПОЛНИТЕЛЬНЫЕ ПРОГРАММЫ (СТРАХОВЫЕ РИСКИ):');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_borders(1) := 0;
      gv_borders(2) := 0;
      gv_borders(3) := 0;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_align   => gv_aligns
                      ,p_width   => gv_widths
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      -- Данные дополнительных программ
      gv_borders(1) := 0;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      FOR rec IN (SELECT pl.description
                        ,pkg_rep_utils.to_money_sep(pc.fee) fee
                        ,CASE pl.description
                           WHEN 'Защита страховых взносов рассчитанная по основной программе' THEN
                            'X'
                           ELSE
                            pkg_rep_utils.to_money_sep(pc.ins_amount)
                         END ins_amount
                    FROM as_asset            aa
                        ,p_cover             pc
                        ,t_prod_line_option  plo
                        ,t_product_line      pl
                        ,t_product_line_type plt
                   WHERE aa.p_policy_id = par_policy_id
                     AND aa.as_asset_id = pc.as_asset_id
                     AND pc.t_prod_line_option_id = plo.id
                     AND plo.product_line_id = pl.id
                     AND pl.product_line_type_id = plt.product_line_type_id
                     AND plt.brief != 'RECOMMENDED'
                     AND pc.status_hist_id != pkg_cover.get_status_hist_id_del
                     AND (plo.brief IS NULL OR upper(plo.brief) NOT LIKE 'ADM_C%'))
      LOOP
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := rec.fee;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END LOOP;
    
      /*
      ИТОГО СТРАХОВАЯ ПРЕМИЯ (ВЗНОС) ПО ДОГОВОРУ
      */
      v_text := '(уплачивается ' || v_pol_sum.payment_terms || '):';
      plpdf.printcell(p_align => 'R'
                     ,p_w     => plpdf.getpagespace - vc_ins_amount_width -
                                 plpdf.gettextwidth(p_s => v_text) - 10
                     ,p_txt   => upper('ИТОГО СТРАХОВАЯ ПРЕМИЯ(ВЗНОС) ПО ДОГОВОРУ')
                     ,p_ln    => 0);
    
      plpdf.printcell(p_txt    => v_text
                     ,p_ln     => 0
                     ,p_border => 0
                     ,p_w      => plpdf.gettextwidth(p_s => v_text) + 10);
    
      SELECT pkg_rep_utils.to_money_sep(nvl(SUM(pc.fee), 0)) fee
        INTO v_total_premium
        FROM as_asset            aa
            ,p_cover             pc
            ,t_prod_line_option  plo
            ,t_product_line      pl
            ,t_product_line_type plt
       WHERE aa.p_policy_id = par_policy_id
         AND aa.as_asset_id = pc.as_asset_id
         AND pc.t_prod_line_option_id = plo.id
         AND plo.product_line_id = pl.id
         AND pl.product_line_type_id = plt.product_line_type_id
         AND upper(plo.brief) NOT LIKE 'ADM_C%'
         AND pc.status_hist_id != pkg_cover.get_status_hist_id_del;
    
      set_font;
      plpdf.printcell(p_w      => vc_ins_amount_width
                     ,p_align  => 'C'
                     ,p_txt    => v_total_premium
                     ,p_border => 1
                     ,p_ln     => 1);
    
      /*
      АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ
      */
      IF v_pol_sum.payment_terms_brief = 'Единовременно'
      THEN
        v_text := '(уплачивается единовременно)';
      ELSE
        v_text := '(уплачивается один раз в год)';
      END IF;
    
      plpdf.printcell(p_align    => 'R'
                     ,p_w        => plpdf.getpagespace - vc_ins_amount_width -
                                    plpdf.gettextwidth(p_s => v_text) - 10
                     ,p_txt      => upper('АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ')
                     ,p_ln       => 0
                     ,p_clipping => 0);
    
      plpdf.printcell(p_txt      => v_text
                     ,p_ln       => 0
                     ,p_border   => 0
                     ,p_w        => plpdf.gettextwidth(p_s => v_text) + 10
                     ,p_clipping => 0);
    
      SELECT nvl(SUM(pc.fee), 0)
        INTO v_admin_costs
        FROM as_asset            aa
            ,p_cover             pc
            ,t_prod_line_option  plo
            ,t_product_line      pl
            ,t_product_line_type plt
       WHERE aa.p_policy_id = par_policy_id
         AND aa.as_asset_id = pc.as_asset_id
         AND pc.t_prod_line_option_id = plo.id
         AND plo.product_line_id = pl.id
         AND pl.product_line_type_id = plt.product_line_type_id
         AND plt.brief != 'RECOMMENDED'
         AND upper(plo.brief) LIKE 'ADM_C%'
         AND pc.status_hist_id != pkg_cover.get_status_hist_id_del;
    
      set_font;
      plpdf.printcell(p_w        => vc_ins_amount_width
                     ,p_txt      => pkg_rep_utils.to_money_sep(v_admin_costs)
                     ,p_border   => 1
                     ,p_align    => 'C'
                     ,p_ln       => 1
                     ,p_clipping => 0);
    
      plpdf.linebreak;
      prn('*Примечание: при выборе программы «Медицина без границ плюс» Страховая сумма по программе "Обращение Застрахованного лица в Сервисную компанию/к Страховщику с последующей организацией лечения  в связи с диагностированием смертельно опасного заболевания и/или назначением проведения хирургического вмешательства" равна 12 500 000 рублей в год, но не более 25 000 000 рублей за весь срок действия договора страхования, включая все очередные сроки страхования или его пролонгации.   Настоящим договором устанавливаются следующие лимиты по программе «Медицина без границ плюс» в пределах страховой суммы в течение страхового года:');
      prn('- При оплате услуг на транспортировку Застрахованного и Сопровождающего его лица - в размере 250 000 рублей; ');
      prn('- При оплате услуг на проживание Застрахованного и Сопровождающего его лица -  в размере 250 000 рублей (максимум 10 000 рублей за ночь). Оплата услуг по транспортировке и проживанию при превышении указанных лимитов осуществляется страхователем / застрахованным самостоятельно. Страховая сумма по  программе страхования  «Освобождение от уплаты  страховой премии / страховых взносов в результате первичного диагностирования смертельно опасного заболевания и/или назначения проведения хирургического вмешательства» равна величине страховой премии / взноса по дополнительной программе «Медицина без границ плюс». Поскольку все страховые выплаты осуществляются в Евро, то для целей расчета в рублях общей стоимости оказанной медицинской и иной помощи фиксируется валютный курс в размере 1 евро = 50 рублей. В случае, если оплата стоимости медицинской и иной помощи, оказанной Застрахованному, осуществлена в валюте, отличной от Евро, то она конвертируется в Евро по курсу ЕЦБ на дату оплаты. Максимальный размер общей стоимости оказанной медицинской и иной помощи по настоящему договору составляет 250 000 Евро на срок, указанный в настоящем Договоре, и 500 000 Евро за весь срок действия настоящей программы, включая очередные сроки страхования.');
    
      plpdf.linebreak;
      plpdf.printcell(p_txt      => 'Все банковские расходы, связанные с оплатой страховой премии (взноса),  оплачиваются Страхователем.'
                     ,p_ln       => 1
                     ,p_clipping => 0);
    END print_product_lines_info;
  
    PROCEDURE print_programs_periods(par_policy_id IN p_policy.policy_id%TYPE) IS
      v_text  VARCHAR2(4000);
      v_width NUMBER := plpdf.getpagespace / 8;
    BEGIN
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := v_width * 3;
      gv_widths(2) := v_width;
      gv_widths(3) := v_width * 1.5;
      gv_widths(4) := v_width;
      gv_widths(5) := v_width * 1.5;
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'L';
      gv_aligns(5) := 'C';
    
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := NULL;
      gv_styles(4) := gc_style_bold;
      gv_styles(5) := NULL;
    
      FOR rec IN (WITH main AS
                     (SELECT DISTINCT CASE
                                       WHEN plo.brief IN ('DMS_DD_SURGERY', 'WOP_DD_SURGERY') THEN
                                        '«Медицина без границ плюс»'
                                       ELSE
                                        pl.description
                                     END AS description
                                    ,pc.start_date
                                    ,pc.end_date
                                    ,CASE
                                       WHEN plt.brief = 'RECOMMENDED' THEN
                                        1
                                       WHEN plo.brief = 'PRESENT_LIFE' THEN
                                        3
                                       WHEN plo.brief IN ('DMS_DD_SURGERY', 'WOP_DD_SURGERY') THEN
                                        4
                                       ELSE
                                        2
                                     END AS group_num
                       FROM as_asset            aa
                           ,p_cover             pc
                           ,t_prod_line_option  plo
                           ,t_product_line      pl
                           ,t_product_line_type plt
                           ,t_product_ver_lob   pvl
                           ,t_lob               l
                      WHERE aa.p_policy_id = par_policy_id
                        AND aa.as_asset_id = pc.as_asset_id
                        AND pc.t_prod_line_option_id = plo.id
                        AND plo.product_line_id = pl.id
                        AND pl.product_ver_lob_id = pvl.t_product_ver_lob_id
                        AND pl.product_line_type_id = plt.product_line_type_id
                        AND pvl.lob_id = l.t_lob_id
                        AND plo.brief NOT LIKE 'Adm_Cost%'
                        AND pc.status_hist_id != pkg_cover.get_status_hist_id_del)
                    SELECT to_char(start_date, 'HH24:MI "часов" dd.mm.yyyy') AS start_date
                          ,to_char(end_date, 'HH24:MI "часов" dd.mm.yyyy') AS end_date
                          ,group_num
                          ,CAST(MULTISET (SELECT description
                                   FROM main m1
                                  WHERE m1.group_num = t.group_num
                                    AND m1.start_date = t.start_date
                                    AND m1.end_date = t.end_date
                                  ORDER BY description) AS tt_one_col) programs
                          ,COUNT(*) cn
                      FROM main t
                     GROUP BY group_num
                             ,start_date
                             ,end_date
                     ORDER BY group_num
                             ,MONTHS_BETWEEN(t.end_date, t.start_date) DESC)
      LOOP
        gv_datas(1) := upper('СРОК СТРАХОВАНИЯ');
        gv_datas(2) := upper('НАЧАЛО:');
        gv_datas(3) := rec.start_date;
        gv_datas(4) := upper('ОКОНЧАНИЕ:');
        gv_datas(5) := rec.end_date;
      
        gv_styles(1) := gc_style_bold;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
        IF rec.group_num = 1
        THEN
          IF rec.cn = 1
          THEN
            v_text := '(Основная программа:';
          ELSE
            v_text := '(Основные программы:';
          END IF;
        ELSE
          IF rec.cn = 1
          THEN
            v_text := '(Дополнительная программа:';
          ELSE
            v_text := '(Дополнительные программы:';
          END IF;
        END IF;
        gv_datas(1) := v_text || pkg_utils.get_aggregated_string(par_table     => rec.programs
                                                                ,par_separator => ', ') || ')';
      
        gv_datas(2) := NULL;
        gv_datas(3) := NULL;
        gv_datas(4) := NULL;
        gv_datas(5) := NULL;
      
        gv_styles(1) := NULL;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_align   => gv_aligns
                        ,p_width   => gv_widths
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      
      END LOOP;
    
    END print_programs_periods;
  
    PROCEDURE print_benificiaries(par_policy_id p_policy.policy_id%TYPE) IS
      v_width NUMBER := plpdf.getpagespace / 6;
    BEGIN
      set_font;
    
      delete_row_print_cache;
    
      gv_datas(1) := 'Ф.И.О.';
      gv_datas(2) := 'ДАТА РОЖДЕНИЯ';
      gv_datas(3) := 'РОДСТВЕННЫЕ ОТНОШЕНИЯ';
      gv_datas(4) := 'ДОЛЯ';
    
      gv_widths(1) := 2 * v_width;
      gv_widths(2) := v_width;
      gv_widths(3) := 2 * v_width;
      gv_widths(4) := v_width;
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
      gv_aligns(4) := 'C';
    
      gv_borders(1) := 1;
      gv_borders(2) := 1;
      gv_borders(3) := 1;
      gv_borders(4) := 1;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := gc_style_bold;
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
      FOR rec IN (SELECT c.contact_id
                        ,c.obj_name_orig
                        ,crt.relationship_dsc
                        ,to_char(cp.date_of_birth, 'dd.mm.yyyy') date_of_birth
                        ,pkg_rep_utils.to_money_sep(ROUND(ab.value, 2)) || '%' val
                    FROM as_asset           aa
                        ,as_assured         aas
                        ,as_beneficiary     ab
                        ,contact            c
                        ,cn_person          cp
                        ,cn_contact_rel     ccr
                        ,t_contact_rel_type crt
                   WHERE aa.p_policy_id = par_policy_id
                     AND aa.as_asset_id = aas.as_assured_id
                     AND ab.as_asset_id = aa.as_asset_id
                     AND ab.contact_id = c.contact_id
                     AND c.contact_id = cp.contact_id(+)
                     AND ab.cn_contact_rel_id = ccr.id
                     AND ccr.relationship_type = crt.id)
      LOOP
      
        gv_styles(1) := NULL;
        gv_styles(2) := NULL;
        gv_styles(3) := NULL;
        gv_styles(4) := NULL;
      
        gv_datas(1) := rec.obj_name_orig;
        gv_datas(2) := rec.date_of_birth;
        gv_datas(3) := rec.relationship_dsc;
        gv_datas(4) := rec.val;
      
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END LOOP;
    END print_benificiaries;
  
    FUNCTION get_main_cash_surr(par_policy_id p_policy.policy_id%TYPE) RETURN BOOLEAN IS
      v_main_exists NUMBER(1);
    BEGIN
      SELECT COUNT(*)
        INTO v_main_exists
        FROM dual
       WHERE EXISTS (SELECT NULL
                FROM as_asset            aa
                    ,p_cover             pc
                    ,t_prod_line_option  plo
                    ,t_product_line      pl
                    ,t_product_line_type plt
                    ,policy_cash_surr    pcs
               WHERE aa.p_policy_id = par_policy_id
                 AND aa.as_asset_id = pc.as_asset_id
                 AND pc.t_prod_line_option_id = plo.id
                 AND plo.product_line_id = pl.id
                 AND pl.product_line_type_id = plt.product_line_type_id
                 AND plt.brief = 'RECOMMENDED'
                 AND pcs.policy_id = aa.p_policy_id
                 AND pcs.t_lob_line_id = pl.t_lob_line_id
                 AND pc.status_hist_id != pkg_cover.get_status_hist_id_del);
      RETURN v_main_exists > 0;
    END get_main_cash_surr;
  
    FUNCTION get_invest_exists(par_policy_id p_policy.policy_id%TYPE) RETURN BOOLEAN IS
      v_invest_exists NUMBER(1);
    BEGIN
      SELECT COUNT(*)
        INTO v_invest_exists
        FROM dual
       WHERE EXISTS (SELECT NULL
                FROM as_asset           aa
                    ,p_policy           pp
                    ,p_cover            pc
                    ,t_prod_line_option plo
                    ,t_product_line     pl
                    ,policy_cash_surr   pcs
               WHERE aa.p_policy_id = par_policy_id
                 AND aa.as_asset_id = pc.as_asset_id
                 AND pc.t_prod_line_option_id = plo.id
                 AND plo.product_line_id = pl.id
                 AND pl.t_lob_line_id = pcs.t_lob_line_id
                 AND aa.p_policy_id = pp.policy_id
                 AND pp.pol_header_id = pcs.pol_header_id
                 AND pcs.policy_id = pp.policy_id
                 AND plo.brief LIKE 'INVEST%'
                 AND pc.status_hist_id != pkg_cover.get_status_hist_id_del);
      RETURN v_invest_exists > 0;
    END get_invest_exists;
  
    PROCEDURE print_additional_docs(par_policy_id p_policy.policy_id%TYPE) IS
    
      v_counter   PLS_INTEGER := 0;
      v_counter_2 PLS_INTEGER := 1;
    
      v_premium_raised      BOOLEAN;
      v_delta_premium       NUMBER;
      v_premium_raised_date DATE;
    
      FUNCTION prn RETURN VARCHAR2 IS
      BEGIN
        v_counter := v_counter + 1;
        RETURN v_counter || '. Приложение №' || v_counter || ': ';
      END;
    
      FUNCTION prn2 RETURN VARCHAR2 IS
      BEGIN
        v_counter_2 := v_counter_2 + 1;
        RETURN v_counter_2 || '. ';
      END;
    
      PROCEDURE check_fee_raised
      (
        par_policy_id               p_policy.policy_id%TYPE
       ,par_premium_raised_out      OUT BOOLEAN
       ,par_premium_delta_out       OUT NUMBER
       ,par_premium_raised_date_out OUT DATE
      ) IS
        v_current_premium p_policy.premium%TYPE;
        v_prev_premium    p_policy.premium%TYPE;
      BEGIN
        SELECT ROUND((SELECT SUM(fee) FROM as_asset aa WHERE aa.p_policy_id = pp.policy_id) -
                     (SELECT SUM(aa.fee) FROM as_asset aa WHERE aa.p_policy_id = pp2.policy_id)
                    ,2) premium_delta
          INTO par_premium_delta_out
          FROM p_policy pp
              ,(SELECT pp2.premium
                      ,pp2.policy_id
                  FROM p_policy pp2
                 WHERE EXISTS (SELECT NULL
                          FROM doc_status     ds
                              ,doc_status_ref dsr
                         WHERE ds.document_id = pp2.policy_id
                           AND ds.doc_status_ref_id = dsr.doc_status_ref_id
                           AND dsr.brief = 'UNDERWRITING')) pp2
         WHERE pp.policy_id = par_policy_id
           AND pp2.policy_id(+) = pp.prev_ver_id;
      
        par_premium_raised_out := par_premium_delta_out IS NOT NULL AND par_premium_delta_out > 0;
      
        -- Дата окончания оценки риска + 30 дней
        par_premium_raised_date_out := pkg_policy.get_risk_pricing_end_date(par_policy_id => par_policy_id) + 30;
      
      END check_fee_raised;
    
    BEGIN
    
      check_fee_raised(par_policy_id               => par_policy_id
                      ,par_premium_raised_out      => v_premium_raised
                      ,par_premium_delta_out       => v_delta_premium
                      ,par_premium_raised_date_out => v_premium_raised_date);
      set_font(par_style => gc_style_italic);
    
      delete_row_print_cache;
    
      plpdf.linebreak;
    
      gv_datas(1) := 'К настоящему договору (Полису) прилагаются:';
      gv_datas(2) := prn ||
                     '««Полисные условия по программам страхования жизни «Гармония жизни», «Семья», «Дети», «Будущее» и приложений к ним.';
    
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace - gv_widths(1);
    
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn || 'Заявление на страхование жизни № ' || v_pol_sum.notice_num;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      IF get_main_cash_surr(par_policy_id => par_policy_id)
      THEN
        gv_datas(1) := NULL;
        gv_datas(2) := prn || 'Таблица гарантированных выкупных сумм по основной программе';
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END IF;
    
      IF get_invest_exists(par_policy_id)
      THEN
        gv_datas(1) := NULL;
        gv_datas(2) := prn ||
                       'Таблица гарантированных выкупных сумм по дополнительной программе страхования «Инвест» (при условии выбора указанной программы)';
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END IF;
      set_font(par_size => 7, par_style => gc_style_regular);
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
    
      IF v_premium_raised
      THEN
        gv_datas(1) := NULL;
        gv_datas(2) := prn2 ||
                       'В соответствиями  с изменениями, указанными в п. 1 настоящего Дополнительного соглашения, у Страхователя возникает обязанность доплатить Страховщику дополнительную страховую премию (страховой взнос) в размере ' ||
                       pkg_rep_utils.to_money_sep(v_delta_premium) || ' в срок до ' ||
                       to_char(v_premium_raised_date) || '.';
        plpdf.row_print2(p_data    => gv_datas
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => gv_styles
                        ,p_maxline => gv_maxlines);
      END IF;
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Во всем остальном, что не предусмотрено настоящим Дополнительным Соглашением Стороны руководствуются положениями Полисных условий к договору страхования жизни';
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Настоящее Дополнительное соглашение вступает в силу с момента оплаты дополнительного страхового взноса в сумме и в сроки, указанные в п. 2 настоящего Дополнительного соглашения';
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Настоящее Дополнительное соглашение является составной и неотъемлемой частью Полиса страхования жизни №' ||
                     v_pol_sum.pol_num;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := NULL;
      gv_datas(2) := prn2 ||
                     'Настоящее Дополнительное Соглашение подписано в двух экземплярах, имеющих одинаковую силу, по одному экземпляру для каждой Стороны.';
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
      set_font;
    END print_additional_docs;
  
    PROCEDURE print_signes(par_policy_id p_policy.policy_id%TYPE) IS
      v_agent_num  ven_ag_contract_header.num%TYPE;
      v_agent_name contact.obj_name_orig%TYPE;
    BEGIN
      BEGIN
        SELECT ah.num          num
              ,c.obj_name_orig obj_name_orig
          INTO v_agent_num
              ,v_agent_name
          FROM ven_ag_contract_header ah
              ,contact                c
              ,t_sales_channel        sc
         WHERE ah.ag_contract_header_id =
               pkg_agn_control.get_current_policy_agent(v_pol_sum.policy_header_id)
           AND ah.agent_id = c.contact_id
           AND ah.t_sales_channel_id = sc.id;
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3; -- Array of widths
      gv_widths(2) := gv_widths(1);
      gv_widths(3) := gv_widths(1);
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
      gv_aligns(3) := 'R';
    
      gv_datas(1) := upper('СТРАХОВАТЕЛЬ');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      gv_styles(3) := gc_style_bold;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := '_____________________________________';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'ФИО Консультанта';
      gv_datas(2) := v_agent_name;
      gv_datas(3) := NULL;
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      gv_styles(3) := gc_style_regular;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Номер Консультанта';
      gv_datas(2) := v_agent_num;
      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Дата подписания Дополнительного соглашения (не позднее 61 дня с даты заключения Договора страхования) ' ||
                     to_char(v_pol_sum.sign_date, 'dd.mm.yyyy');
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
    END print_signes;
  
    PROCEDURE print_cash_surr_main(par_policy_id p_policy.policy_id%TYPE) IS
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
      set_font(par_style => gc_style_bold, par_size => 12);
    
      gv_application_number := gv_application_number + 1;
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № ') || gv_application_number
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО  ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма на дату досрочного прекращения (расторжения) договора страхования рассчитывается как % от сформированного резерва по договору страхования на дату начала периода, в котором произошло досрочное прекращение (расторжение) договора страхования'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      BEGIN
        SELECT DISTINCT ll.brief
          INTO v_main_program_lob_line_brief
          FROM as_asset            aa
              ,p_cover             pc
              ,t_prod_line_option  plo
              ,t_product_line      pl
              ,t_product_line_type plt
              ,t_lob_line          ll
         WHERE aa.p_policy_id = par_policy_id
           AND aa.as_asset_id = pc.as_asset_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND pl.product_line_type_id = plt.product_line_type_id
           AND pl.t_lob_line_id = ll.t_lob_line_id
           AND plt.brief = 'RECOMMENDED';
      EXCEPTION
        WHEN no_data_found THEN
          raise_application_error(-20001
                                 ,'Не удалось определить основную программу');
        WHEN too_many_rows THEN
          raise_application_error(-20001
                                 ,'Найдено несколько основных программ');
      END;
    
      print_cash_surr_table(par_policy_id      => par_policy_id
                           ,par_lob_line_brief => v_main_program_lob_line_brief);
    
    END print_cash_surr_main;
  
    PROCEDURE print_cash_surr_invest2(par_policy_id p_policy.policy_id%TYPE) IS
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
    
      BEGIN
        SELECT DISTINCT ll.brief
          INTO v_main_program_lob_line_brief
          FROM as_asset           aa
              ,p_cover            pc
              ,t_prod_line_option plo
              ,t_product_line     pl
              ,t_lob_line         ll
         WHERE aa.p_policy_id = par_policy_id
           AND aa.as_asset_id = pc.as_asset_id
           AND pc.t_prod_line_option_id = plo.id
           AND plo.product_line_id = pl.id
           AND pl.t_lob_line_id = ll.t_lob_line_id
           AND ll.brief = 'INVEST2';
      EXCEPTION
        WHEN no_data_found THEN
          RETURN;
        WHEN too_many_rows THEN
          raise_application_error(-20001
                                 ,'Найдено несколько основных программ');
      END;
    
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
      set_font(par_style => gc_style_bold, par_size => 12);
      gv_application_number := gv_application_number + 1;
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'ПРИЛОЖЕНИЕ № ' || gv_application_number
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ПРОГРАММЕ СТРАХОВАНИЯ "ИНВЕСТ"')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      print_cash_surr_table(par_policy_id      => par_policy_id
                           ,par_lob_line_brief => v_main_program_lob_line_brief);
    
    END print_cash_surr_invest2;
  
  BEGIN
    v_policy_id := to_number(repcore.get_context('POL_ID'));
  
    v_pol_sum := get_policy_summary(v_policy_id);
  
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
  
    -- Инициализация
    init(par_default_font_size => 8);
  
    plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
  
    plpdf.setfooterprocname(p_proc_name => 'ins.pkg_rep_plpdf.footer_414', p_height => 27);
  
    print_barcode(par_policy_id => v_policy_id);
  
    print_draft(v_pol_sum.policy_status_desc);
  
    -------------------------------------------------------------------------------------------------
    -- ДОГОВОР №
    -------------------------------------------------------------------------------------------------
  
    set_font(par_style => gc_style_bold);
  
    /* Draws a rectangle cell with text inside. */
    plpdf.printmultilinecell(p_txt   => unistr('Дополнительное соглашение №1' || chr(13) ||
                                               'К договору страхования №' || v_pol_sum.pol_num)
                            ,p_align => 'R'
                            ,p_ln    => 1);
  
    plpdf.printcell(p_w => plpdf.getpagespace / 3, p_ln => 0);
    --set_times_font(par_type => gc_font_times_normal, par_size => 7);
    plpdf.printmultilinecell(p_txt   => 'ООО «СК «Ренессанс Жизнь», именуемое в дальнейшем «Страховщик», в лице Представителя по доверенности Голованова Андрея Сергеевича, действующего на основании Доверенности 2014/02 от 09.01.2014г., с одной стороны, и ' ||
                                        v_insuree_info.fio || ', ' ||
                                        get_passport(v_insuree_info.contact_id) ||
                                        ', именуемый (ая)  в дальнейшем «Страхователь», с другой стороны, заключили настоящее Дополнительное Соглашение к Договору страхования № ' ||
                                        v_pol_sum.pol_num || '  о нижеследующем:'
                            ,p_align => 'R'
                            ,p_ln    => 1);
  
    plpdf.linebreak;
    set_title(rtrim(upper(v_pol_sum.product_name), '_2'));
    set_cotitle('Полис (договор) страхования жизни №' || v_pol_sum.pol_num);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('СТРАХОВЩИК'));
    set_font(par_size => 10, par_style => gc_style_bold);
    plpdf.printcell(p_txt => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_nameaddr)
                   ,p_h   => -1
                   ,p_ln  => 1);
  
    set_font(par_size => 7);
    plpdf.printmultilinecell(p_txt => pkg_contact_rep_utils.get_insurer_info(par_mask => pkg_contact_rep_utils.gc_company_default_billing || ',' ||
                                                                                         pkg_contact_rep_utils.gc_company_def_phones || ',' ||
                                                                                         pkg_contact_rep_utils.gc_company_website)
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('СТРАХОВАТЕЛЬ'));
    print_info_element(par_element_name => 'Ф.И.О.', par_element_value => v_insuree_info.fio);
    print_info_element(par_element_name  => 'ДАТА РОЖДЕНИЯ'
                      ,par_element_value => to_char(v_insuree_info.date_of_birth, 'dd.mm.yyyy" г."'));
    print_info_element(par_element_name  => 'ДОКУМЕНТ'
                      ,par_element_value => get_passport(v_insuree_info.contact_id));
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННЫй
    -------------------------------------------------------------------------------------------------
    IF v_pol_sum.assured_array IS NOT NULL
       AND v_pol_sum.assured_array.count > 0
    THEN
      set_chapter(upper('ЗАСТРАХОВАННЫй'));
      v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
      print_info_element(par_element_name => 'Ф.И.О.', par_element_value => v_assured_info.fio);
      print_info_element(par_element_name  => 'ДАТА РОЖДЕНИЯ'
                        ,par_element_value => to_char(v_assured_info.date_of_birth, 'dd.mm.yyyy" г."'));
      print_info_element(par_element_name  => 'ДОКУМЕНТ'
                        ,par_element_value => get_passport(v_assured_info.contact_id));
    END IF;
  
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ (СТРАХОВЫЕ РИСКИ). СТРАХОВЫЕ СУММЫ. СТРАХОВАЯ ПРЕМИЯ (ВЗНОС)
    -------------------------------------------------------------------------------------------------
    set_chapter(upper('ПРОГРАММЫ СТРАХОВАНИЯ (СТРАХОВЫЕ РИСКИ). СТРАХОВЫЕ (ГАРАНТИРОВАННЫЕ) СУММЫ. СТРАХОВАЯ ПРЕМИЯ (ВЗНОС)'));
    -- Заголовок таблицы
    print_product_lines_info(par_policy_id => v_policy_id);
  
    -------------------------------------------------------------------------------------------------
    --УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ  ПРЕМИИ
    -------------------------------------------------------------------------------------------------
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    set_chapter(upper('УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ  ПРЕМИИ'));
  
    set_font(par_style => gc_style_bold);
    plpdf.printcell(p_w   => plpdf.getpagespace / 2
                   ,p_txt => 'ДАТА УПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ПЕРВОГО СТРАХОВОГО ВЗНОСА):'
                   ,p_ln  => 0);
    set_font;
    plpdf.printcell(p_w   => plpdf.getpagespace / 2
                   ,p_txt => to_char(v_pol_sum.fist_payment_date, 'dd.mm.yyyy')
                   ,p_ln  => 1);
  
    IF v_pol_sum.payment_terms_brief != 'Единовременно'
    THEN
      v_text := get_next_payment_dates(v_pol_sum.start_date, v_pol_sum.payment_terms_brief) ||
                ' каждого последующего года срока страхования';
      set_font(par_style => gc_style_bold);
      plpdf.printmultilinecell(p_w   => plpdf.getpagespace / 2
                              ,p_txt => 'ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ: '
                              ,p_ln  => 0);
      set_font;
      plpdf.printmultilinecell(p_txt => v_text, p_ln => 1);
    END IF;
  
    plpdf.printmultilinecell(p_txt => 'В случае если Страхователем не оплачен очередной страховой взнос по договору страхования по истечении льготного периода, действие договора страхования прекращается.'
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.linebreak;
    plpdf.linebreak;
    -------------------------------------------------------------------------------------------------
    --СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. СРОК СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    set_chapter(par_title => 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. СРОК СТРАХОВАНИЯ');
    set_font(par_size => 9, par_color => gc_color_orange, par_style => gc_style_bold);
    plpdf.printcell(p_txt => 'СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' ||
                             ROUND(MONTHS_BETWEEN(v_pol_sum.end_date, v_pol_sum.start_date) / 12) ||
                             ' ЛЕТ      С ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') ||
                             ' Г. ПО ' || to_char(v_pol_sum.end_date, 'dd.mm.yyyy') || ' Г.'
                   ,p_ln  => 1);
  
    print_programs_periods(par_policy_id => v_policy_id);
  
    plpdf.linebreak;
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ
    -------------------------------------------------------------------------------------------------  
    set_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ');
    print_benificiaries(par_policy_id => v_policy_id);
  
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    BEGIN
      SELECT nvl(addendum_note
                ,'НЕ ЯВЛЯЮТСЯ СТРАХОВЫМИ СЛУЧАЯМИ СОБЫТИЯ')
        INTO v_addendum_note
        FROM ven_as_assured_underwr aau
            ,as_asset               ae
       WHERE aau.as_assured_id = ae.as_asset_id
         AND ae.p_policy_id = v_policy_id;
    EXCEPTION
      WHEN no_data_found THEN
        v_addendum_note := 'НЕ ЯВЛЯЮТСЯ СТРАХОВЫМИ СЛУЧАЯМИ СОБЫТИЯ';
    END;
  
    plpdf.linebreak;
    set_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    set_times_font(par_type => gc_font_times_normal, par_size => 7);
  
    plpdf.printmultilinecell(p_txt => upper(prn_num ||
                                            'ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН НА ОСНОВАНИИ "ПОЛИСНЫХ УСЛОВИЙ К ДОГОВОРУ СТРАХОВАНИЯ ЖИЗНИ ПО ПРОГРАММАМ СТРАХОВАНИЯ ЖИЗНИ «ГАРМОНИЯ ЖИЗНИ», «СЕМЬЯ», «ДЕТИ», «БУДУЩЕЕ», УТВЕРЖДЕННЫХ ГЕНЕРАЛЬНЫМ ДИРЕКТОРОМ ООО "СК "РЕНЕССАНС ЖИЗНЬ" 03.12.2014  ГОДА, ДАЛЕЕ «ПОЛИСНЫЕ УСЛОВИЯ».')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper(prn_num ||
                                            'СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ПОЛИСЕ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper(prn_num || 'ТЕРРИТОРИЯ СТРАХОВАНИЯ: ВЕСЬ МИР.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper(prn_num ||
                                            'ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ: 24 ЧАСА В СУТКИ.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    IF get_main_cash_surr(par_policy_id => v_policy_id)
       OR get_invest_exists(par_policy_id => v_policy_id)
    THEN
      plpdf.printmultilinecell(p_txt => upper(prn_num ||
                                              'ПРИ ДОСРОЧНОМ РАСТОРЖЕНИИ ДОГОВОРА ВЫПЛАТА ПРЕДУСМОТРЕННОЙ СООТВЕТСТВУЮЩЕЙ ПРОГРАММОЙ СТРАХОВАНИЯ ВЫКУПНОЙ СУММЫ ПРОИЗВОДИТСЯ СОГЛАСНО ТАБЛИЦЕ ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ (ПРИЛОЖЕНИЕ № 3, [ПРИЛОЖЕНИЕ № 4]).')
                              ,p_h   => -1
                              ,p_ln  => 1);
    END IF;
    plpdf.printmultilinecell(p_txt => upper(prn_num || 'ЛЬГОТНЫЙ ПЕРИОД: 30 ДНЕЙ.')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper(prn_num ||
                                            'РАСЧЕТ ГАРАНТИРОВАННЫХ СТРАХОВЫХ СУММ И СТРАХОВЫХ ПРЕМИЙ ПРОИЗВЕДЕН С УЧЕТОМ ГАРАНТИРОВАННОЙ НОРМЫ ДОХОДНОСТИ - 4%. ')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper(prn_num ||
                                            'ДАТА ОКОНЧАНИЯ ПЕРИОДА ОЦЕНКИ СТРАХОВОГО РИСКА: ' ||
                                            to_char(pkg_policy.get_risk_pricing_end_date(v_policy_id)
                                                   ,'dd.mm.yyyy'))
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    plpdf.printmultilinecell(p_txt => upper(prn_num ||
                                            'УЧИТЫВАЯ СВЕДЕНИЯ, СОДЕРЖАЩИЕСЯ В ЗАЯВЛЕНИИ НА СТРАХОВАНИЕ №' ||
                                            v_pol_sum.pol_num ||
                                            ', ДОПОЛНИТЕЛЬНО К СОБЫТИЯМ, УКАЗАННЫМ В П. 4 «ПОЛИСНЫХ УСЛОВИЙ», ' ||
                                            v_addendum_note) --НЕ ЯВЛЯЮТСЯ СТРАХОВЫМИ СЛУЧАЯМИ СОБЫТИЯ**')
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    set_font(par_size => 7);
    plpdf.linebreak;
    plpdf.printmultilinecell(p_txt => 'Подписывая настоящий Полис, Страхователь (Застрахованный) в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» выражает(ют) Страховщику согласие на обработку своих персональных данных, содержащихся в документах, передаваемых Страховщику в целях продвижения товаров, работ, услуг на рынке путем осуществления прямых контактов с помощью средств связи, в том числе в целях обеспечения исполнения настоящего Полиса, а также выражает(ют) Страховщику согласие на предоставление Выгодоприобретателю(ям)  информации по настоящему Полису,  об исполнении Страховщиком и/или Страхователем (Застрахованным) обязательств по настоящему Полису, в том числе информацию об оплате и размере страховой премии (страховых взносов), размере страховой суммы, о возникновении и урегулировании претензий, наступлении/вероятности наступления страховых случаев, выплате страхового возмещения и другую имеющую отношение к настоящему Полису информацию.'
                            ,p_h   => -1
                            ,p_ln  => 1);
    plpdf.printmultilinecell(p_txt => 'Обработка персональных данных осуществляется посредством сбора, систематизации, накопления, хранения, уточнения (обновления, изменения), использования, распространения, передачу (в том числе трансграничную), обезличивания, блокирования, уничтожения персональных данных, как на бумажных, так и на электронных носителях. '
                            ,p_h   => -1
                            ,p_ln  => 1);
    plpdf.printmultilinecell(p_txt => 'Настоящее согласие дается Страхователем (Застрахованным) Страховщику на 70 лет и может быть отозвано Страхователем (Застрахованным) в любой момент времени путем передачи Страховщику подписанного Страхователем (Застрахованным) письменного уведомления.'
                            ,p_h   => -1
                            ,p_ln  => 1);
  
    -------------------------------------------------------------------------------------------------
    -- К НАСТОЯЩЕМУ ДОГОВОРУ (ПОЛИСУ) ПРИЛАГАЮТСЯ:
    -------------------------------------------------------------------------------------------------
    print_additional_docs(par_policy_id => v_policy_id);
  
    plpdf.linebreak;
    print_signes(par_policy_id => v_policy_id);
    -------------------------------------------------------------------------------------------------
    -- ПРИЛОЖЕНИЕ № 3
    -------------------------------------------------------------------------------------------------
    IF get_main_cash_surr(par_policy_id => v_policy_id)
    THEN
      print_cash_surr_main(par_policy_id => v_policy_id);
    END IF;
  
    -------------------------------------------------------------------------------------------------
    -- ПРИЛОЖЕНИЕ № 4
    -------------------------------------------------------------------------------------------------
    IF get_invest_exists(par_policy_id => v_policy_id)
    THEN
      print_cash_surr_invest2(par_policy_id => v_policy_id);
    END IF;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------  
    /* Returns the generated PDF document.
    The document is closed and then returned in the OUT parameter. */
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'Полис_' || nvl(v_pol_sum.pol_num, v_pol_sum.ids) || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END policy_life_415;

  -- Процедура формирования полиса по продукту Достояние
  -- 384116 Достояние_ГПБ
  -- Доброхотова И., январь, 2015
  PROCEDURE rep_dostoyanie
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
    v_signer       typ_signer;
  
    v_underwriting            BOOLEAN;
    v_premium_raised_out      BOOLEAN;
    v_premium_delta_out       NUMBER;
    v_premium_raised_date_out DATE;
    v_addendum_note           VARCHAR2(4000);
  
    PROCEDURE prn
    (
      par_text VARCHAR2
     ,par_ln   NUMBER DEFAULT 1
     ,par_w    NUMBER DEFAULT 0
    ) IS
    BEGIN
      plpdf.printmultilinecell(p_ln       => par_ln
                              ,p_align    => 'J'
                              ,p_clipping => 0
                              ,p_h        => 3
                              ,p_txt      => par_text
                              ,p_w        => par_w);
    END;
  
    PROCEDURE print_sign_custom IS
    BEGIN
    
      IF v_pol_sum.policy_status_breif NOT IN ('B2B_PENDING', 'PROJECT')
      THEN
        plpdf.putimage(p_name => 'image_sign_jpg'
                      ,p_data => v_signer.image_sign
                      ,p_x    => plpdf.getpagespace - 5 - 45
                      ,p_y    => plpdf.getcurrenty
                      ,p_w    => 45
                      ,p_h    => 50);
      END IF;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace / 3;
      gv_widths(3) := plpdf.getpagespace / 3;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_datas(1) := 'Страхователь';
      gv_datas(2) := 'Застрахованный';
      gv_datas(3) := 'Страховщик';
    
      gv_borders(1) := 'LTR';
      gv_borders(2) := 'LTR';
      gv_borders(3) := 'LTR';
    
      row_print2;
    
      gv_datas(1) := 'Подписывая настоящий договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации.Полисные условия по программе «Достояние» с приложением Комплексных условий страхования по дополнительной программе «Медицина без границ плюс», утвержденные Приказом № 214/ОД/14 от 24.12.2014 получил и согласен';
      gv_datas(2) := 'Подписывая настоящий договор страхования, подтверждаю достоверность утверждений в вышеуказанной декларации. С назначением Выгодоприобретателей согласен. С Полисными условиями  по программе «Достояние» с приложением Комплексных условий страхования по дополнительной программе «Медицина без границ плюс», утвержденные Приказом № 214/ОД/14 от 24.12.2014  ознакомился';
      gv_datas(3) := 'Представитель по доверенности ' || v_signer.short_name || ' (дов №' ||
                     v_signer.procuratory_num || ')';
    
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      row_print2;
    
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      row_print2;
      gv_datas(1) := NULL;
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      row_print2;
    
      gv_datas(1) := '___________/' || nvl(v_insuree_info.fio_initials, '__________________');
      gv_datas(2) := '___________/' || nvl(v_assured_info.fio_initials, '__________________');
      gv_datas(3) := NULL;
    
      row_print2;
    
      gv_datas(1) := 'Подпись      ФИО Страхователя';
      gv_datas(2) := 'Подпись      ФИО Застрахованного';
      gv_datas(3) := NULL;
    
      gv_borders(1) := 'LBR';
      gv_borders(2) := 'LBR';
      gv_borders(3) := 'LBR';
    
      row_print2;
    
    END print_sign_custom;
  
    PROCEDURE print_cash_surr_custom IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 2')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Договора страхования № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма на дату досрочного прекращения (расторжения) договора страхования рассчитывается как % от сформированного резерва по договору страхования на дату начала периода, в котором произошло досрочное прекращение (расторжение) договора страхования или на дату последнего оплаченного периода, в зависимости от того, какая из дат является более ранней.'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr_custom;
  
    PROCEDURE print_additional_conds_custom IS
    
    BEGIN
      set_font;
      prn('11.1. При досрочном расторжении договора выплата предусмотренной соответствующей программой страхования выкупной суммы производится согласное таблице гарантированных выкупных сумм.  ');
      prn('11.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) на договоре, а также приложениях и дополнительных соглашениях к нему;');
      prn('11.3. Все письменные заявления Страхователя/Застрахованного, относящиеся к настоящему Договору, а так же все Приложения и дополнения к настоящему Договору, являются его составной и неотъемлемой частью.');
    
      blank_cell(par_ln => 1);
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace * 2 / 3;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'К договору страхования прилагаются: ';
      gv_datas(2) := 'Приложение №1: Полисные условия по программе страхования "Достояние" с приложением Комплексных условий страхования по дополнительной  программе «Медицина без границ плюс», утвержденные Приказом № 214/ОД/14 от 24.12.14г';
      row_print2(par_h => 3);
      gv_datas(1) := NULL;
      gv_datas(2) := 'Приложение №2: Таблица гарантированных выкупных сумм по основной программе';
      row_print2(par_h => 3);
      blank_cell(par_ln => 1);
    END print_additional_conds_custom;
  
    PROCEDURE print_additional_conds_risk IS
      v_num NUMBER := 0;
      PROCEDURE prn_num(par_text VARCHAR2) IS
      BEGIN
        v_num := v_num + 1;
        prn(v_num || '. ' || par_text);
      END prn_num;
    BEGIN
      set_font;
      prn_num('ДОГОВОР СТРАХОВАНИЯ ЗАКЛЮЧЕН  НА ОСНОВАНИИ "ПОЛИСНЫХ УСЛОВИЙ К ДОГОВОРУ СТРАХОВАНИЯ ЖИЗНИ ПО ПРОГРАММЕ СТРАХОВАНИЯ  «ДОСТОЯНИЕ», С ПРИЛОЖЕНИЕМ КОМПЛЕКСНЫХ УСЛОВИЙ СТРАХОВАНИЯ ПО ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЕ «МЕДИЦИНА БЕЗ ГРАНИЦ ПЛЮС», УТВЕРЖДЕННЫХ  ГЕНЕРАЛЬНЫМ  ДИРЕКТОРОМ ООО "СК "РЕНЕССАНС ЖИЗНЬ" 24.12.2014  ГОДА, ДАЛЕЕ «ПОЛИСНЫЕ УСЛОВИЯ».');
      prn_num('СТОРОНЫ ПРИЗНАЮТ РАВНУЮ ЮРИДИЧЕСКУЮ СИЛУ СОБСТВЕННОРУЧНОЙ ПОДПИСИ И ФАКСИМИЛЕ ПОДПИСИ СТРАХОВЩИКА (ВОСПРОИЗВЕДЕННОЕ МЕХАНИЧЕСКИМ ИЛИ ИНЫМ СПОСОБОМ С ИСПОЛЬЗОВАНИЕМ КЛИШЕ) НА ДОГОВОРЕ СТРАХОВАНИЯ, А ТАКЖЕ ПРИЛОЖЕНИЯХ И ДОПОЛНИТЕЛЬНЫХ СОГЛАШЕНИЯХ К НЕМУ.');
      prn_num('ТЕРРИТОРИЯ СТРАХОВАНИЯ: ВЕСЬ МИР.');
      prn_num('ЛЬГОТНЫЙ ПЕРИОД: 30 ДНЕЙ.');
      prn_num('ДАТА ОКОНЧАНИЯ ПЕРИОДА ОЦЕНКИ СТРАХОВОГО РИСКА:' ||
              to_char(v_premium_raised_date_out, 'dd.mm.yyyy'));
      IF v_addendum_note IS NOT NULL
      THEN
        prn_num('УЧИТЫВАЯ СВЕДЕНИЯ, СОДЕРЖАЩИЕСЯ В ЗАЯВЛЕНИИ НА СТРАХОВАНИЕ №' || v_pol_sum.pol_num ||
                ', ДОПОЛНИТЕЛЬНО К СОБЫТИЯМ, УКАЗАННЫМ В П. 4 «ПОЛИСНЫХ УСЛОВИЙ», ' ||
                v_addendum_note);
      END IF;
      IF v_premium_raised_out
      THEN
        prn_num('ПО РЕЗУЛЬТАТАМ ОЦЕНКИ РИСКА У СТРАХОВАТЕЛЯ ВОЗНИКАЕТ ОБЯЗАННОСТЬ ДОПЛАТИТЬ СТРАХОВЩИКУ ДОПОЛНИТЕЛЬНУЮ СТРАХОВУЮ ПРЕМИЮ (СТРАХОВОЙ ВЗНОС) В РАЗМЕРЕ ' ||
                pkg_rep_utils.to_money_sep(v_premium_delta_out) || ' В СРОК ДО ' ||
                to_char(v_premium_raised_date_out + 30, 'dd.mm.yyyy'));
      END IF;
      prn_num('ВО ВСЕМ ОСТАЛЬНОМ, ЧТО НЕ ПРЕДУСМОТРЕНО НАСТОЯЩИМ ДОГОВОРОМ СТРАХОВАНИЯ СТОРОНЫ РУКОВОДСТВУЮТСЯ ПОЛОЖЕНИЯМИ ПОЛИСНЫХ УСЛОВИЙ К ДОГОВОРУ СТРАХОВАНИЯ ЖИЗНИ И ОТ НЕСЧАСТНЫХ СЛУЧАЕВ.');
      prn_num('НАСТОЯЩИЙ ДОГОВОР СТРАХОВАНИЯ ВСТУПАЕТ В СИЛУ С МОМЕНТЫ ОПЛАТЫ ДОПОЛНИТЕЛЬНОГО СТРАХОВОГО ВЗНОСА В СУММЕ И В СРОКМИ, УКАЗАННЫЕ В РАЗДЕЛЕ 10 НАСТОЯЩЕГО ДОГОВОРА СТРАХОВАНИЯ.');
      prn_num('НАСТОЯЩИЙ ДОГОВОР СТРАХОВАНИЯ ПОДПИСАН В ДВУХ ЭКЗЕМПЛЯРАХ, ИМЕЮЩИХ ОДИНАКОВУЮ СИЛУ, ПО ОДНОМУ ЭКЗЕМПЛЯРУ ДЛЯ КАЖДОЙ СТОРОНЫ');
    
      prn('Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставляет ООО «СК «Ренессанс Жизнь» согласие на обработку (сбор, систематизацию, накопление, хранение, уточнение (обновление, изменение), использование, распространение, обезличивание, блокирование, уничтожение, как на бумажных, так и на электронных носителях, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям) своих персональных данных, содержащих в настоящем Договоре, в том числе данных о состоянии здоровья, в целях исполнения между Страхователем и Страховщиком Договора страхования, а также в целях продвижения товаров, работ, услуг на рынке страхования путём осуществления прямых контактов с помощью средств связи, при этом такое согласие дается Страхователем/ Застрахованным Страховщику  на срок действия Договора страхования и в течение 15 лет после окончания срока действия Договора страхования и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
    
      blank_cell(par_ln => 1);
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 3;
      gv_widths(2) := plpdf.getpagespace * 2 / 3;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'К договору страхования прилагаются: ';
      gv_datas(2) := '1. Приложение №1: Полисные условия по программе страхования "Достояние" от 24.12.2014г.с приложением Комплексных условий страхования по дополнительной программе страхования «Медицина без границ плюс».';
      row_print2(par_h => 3);
    
      gv_datas(1) := NULL;
      gv_datas(2) := '2. Приложение №2: Заявление на страхование жизни №' || v_pol_sum.pol_num;
      row_print2(par_h => 3);
    
      gv_datas(1) := NULL;
      gv_datas(2) := '3. Приложение № 3: Таблица гарантированных выкупных сумм по основной программе';
      row_print2(par_h => 3);
    
      blank_cell(par_ln => 1);
    END print_additional_conds_risk;
  
    PROCEDURE print_declaration_custom IS
    BEGIN
      set_font(par_style => gc_style_bold);
      prn('Настоящим Страхователь заявляет, что Застрахованный:');
      set_font;
      prn('10.1. Не выкуривает более 30 сигарет в день, разница между ростом (в см.) и весом (в кг.) Застрахованного не менее 80 и не более 120 (например, рост - 180 см, вес - 85 кг, разница составляет - 95, можно ответит ДА, вес 85 кг, разница - 75 - ответ-НЕТ);');
      prn('10.2. Не является инвалидом, лицом, требующим постоянного ухода, не имеет нарушений опорно-двигательной системы, ограничивающих движение (артрозы, артриты, последствия травм, включая ампутации, контрактуры суставов и т.п.), Не страдает мышечной дистрофией, нервными расстройствами,  психическими заболеваниями, Не употребляет (употреблял/употребляла) наркотики, токсические вещества с целью наркотического и токсического опьянения, Не страдает (страдал/страдала) алкоголизмом, не состоит (состоял/состояла) по любой из указанных причин на диспансерном учете;');
      prn('10.3. Не является ВИЧ-инфицированным или Не страдает СПИДом (синдромом приобретенного иммунного дефицита)');
      prn('10.4. Не находится под следствием,  Не находится в изоляторе временного содержания или других учреждениях, предназначенных для содержания лиц, подозреваемых или обвиняемых в совершении преступлений;');
      prn('10.5. Не имеет или не имел/имела в прошлом следующие заболевания, состояния, расстройства и/или отклонения: онкологические заболевания, нарушение зрения более 7 (семи) диоптрий, хроническую почечную недостаточность, поликистоз почек, неспецифический язвенный колит, болезнь Крона, сахарный диабет и другие заболевания эндокринной системы, гемофилию и другие заболевания крови, астму и другие заболевания легких, сердечно-сосудистую патологию (включая ишемическую болезнь сердца, аритмии (включая мерцательную аритмию), гипертонию (II-IV степени), тромбоэмболии, аневризмы сосудов, перенесенные инфаркты, инсульты, операции на сердце и сосудах и т.п.), цирроз печени, хронический гепатит, злокачественные или доброкачественные опухоли, заболевания молочных желез, туберкулез, ограничения жизнедеятельности, нервные (включая паралич, эпилепсию и т.д.) или психические расстройства (включая депрессию), а также иные  заболевания, требующие консультаций, лечения, обследований или наблюдения на разовой или постоянной основе, за исключением консультаций, обследования или наблюдения стоматологом и косметологом');
      prn('10.6. За последние 5 (пять) лет не находился/лась на больничном листе сроком 3 (три) недели подряд и более (счет по каждому году, не учитывая острую респираторную инфекцию, грипп, травмы, не требующие госпитализации) и/или не был/а направлен на стационарное лечение (за исключением операции по поводу исправления носовой перегородки, удаления миндалин, аппендицита, стоматологических операций). ');
      prn('10.7. В настоящий момент не находится под наблюдением врача, на лечении, не принимает лекарства в связи с каким-либо заболеванием (нарушением здоровья, кроме витаминов, ОГК (для женщин), кроме единичных случаев лечения простудных заболеваний) или в отношении него не запланировано лечение/операция и не планирует обратиться к врачу по причине какого-либо заболевания в ближайшее время;');
      prn('10.8. Не связан  с особым риском в связи с трудовой деятельностью (например: ионизирующим облучением, работа с химическими и взрывчатыми веществами, источниками повышенной опасности, работа на высоте, под землей, под водой, подъем и перемещение тяжестей, работа на нефтяных и газовых платформах, с оружием, в правоохранительных органах, инкассация, испытания, постоянные командировки (более 1-го раза в месяц) и др.) или хобби;');
      prn('10.9. Не подавал (а) заявление на страхование жизни, утраты трудоспособности (инвалидность) или от несчастных случаев, в которых мне было отказано, которые были отложены или приняты на особых условиях (с применением повышающих коэффициентов, исключений или особых условий), а также заключенных договором страхования, которые были расторгнуты по причине невозможности заключения или существенные условия которых были изменены по результатам оценки степени риска. ');
      prn('10.10. Я уполномочиваю любого врача и/или любое лечебное учреждение, предоставлявших Застрахованному медицинские услуги (обследования, консультации, лечение и т.д.) предоставлять по требованию страховой компании ООО «СК «Ренессанс Жизнь» копии медицинских документов (результаты лабораторных и инструментальных исследований, результаты лечения, прогноз по заболеванию и т.д.) как в связи с оценкой страхового риска, так и в связи со страховыми случаями по данному договору страхования. ');
      prn('10.11. Я подтверждаю, что на момент заключения данного договора страхования общая страховая сумма (сумма страховых сумм) по любым другим известным мне договорам страхования со Страховщиком в отношении Застрахованного по страховым рискам:');
      prn('- «смерть по любой причине» / «смерть Застрахованного, наступившая в результате несчастного случая» / «смерть  в результате ДТП» не превышает 500 000 (пятьсот тысяч) долларов США;');
      prn('Годовая страховая премия по данному договору не превышает 20% годового дохода Страхователя.');
      prn('Я согласен, что если после заключения данного договора страхования, общая страховая сумма (сумма страховых сумм) по указанным выше страховым рискам по любым известным мне договорам страхования в отношении Застрахованного превысит указанные выше размеры, настоящий договор будет расторгнут (аннулирован) Страховщиком  и мне будет возвращена страховая премия за вычетом расходов Страховщика и, соответственно, страховые  выплаты в этом случае по настоящему  договору осуществляться не будут.');
      prn('10.12. Подписывая настоящий Договор страхования, Страхователь/Застрахованный в соответствии c Федеральным законом от 27 июля 2006 г. № 152-ФЗ «О персональных данных» предоставляет ООО «СК «Ренессанс Жизнь» согласие на обработку (сбор, систематизацию, накопление, хранение, уточнение (обновление, изменение), использование, распространение, обезличивание, блокирование, уничтожение, как на бумажных, так и на электронных носителях, в том числе передачу Агенту по Агентскому договору, перестраховочным организациям) своих персональных данных, содержащих в настоящем Договоре, в том числе данных о состоянии здоровья, в целях исполнения между Страхователем и Страховщиком Договора страхования, а также в целях продвижения товаров, работ, услуг на рынке страхования путём осуществления прямых контактов с помощью средств связи, при этом такое согласие дается Страхователем/ Застрахованным Страховщику  на срок действия Договора страхования и в течение 15 лет после окончания срока действия Договора страхования и может быть отозвано Страхователем/Застрахованным в любой момент времени путем передачи Страховщику подписанного Страхователем/Застрахованным письменного уведомления.');
      prn('Сведения в Декларации Страхователя (Застрахованного) являются правдивыми. Я понимаю, что предоставление заведомо ложных и/или неполных сведений может стать основанием для непризнания Страховщиком наступившего события страховым случаем. ');
      prn('Подписывая настоящий Договор, Страхователь/Застрахованный подтверждает,  что его  родственники не занимают должности членов Совета директоров Банка России, должности в законодательном, исполнительном, административном, судебном органе РФ или других стран; должности в Банке России, государственных корпорациях и иных организациях, созданных РФ на основании федеральных законов; должности в публичных международных организациях*');
      prn('*При наличии родственников, замещающие вышеуказанные должности, заполняется дополнительная анкета по форме Страховщика');
      set_font(par_style => gc_style_bold, par_color => gc_color_orange);
      prn('10.13. В СЛУЧАЕ ВЫБОРА ДОПОЛНИТЕЛЬНОЙ ПРОГРАММЫ «МЕДИЦИНА БЕЗ ГРАНИЦ ПЛЮС»:');
      set_font;
      prn('в настоящее время или в течение последних 10 лет не проходит/проходил(-а)  стационарное, амбулаторное, восстановительное или превентивное лечение, и Застрахованному не устанавливался  по результатам обследования диагноз, и не находится/находился под наблюдением врача-специалиста по поводу любого из нижеследующих заболеваний или состояний:');
      prn('- рак или злокачественное новообразование любого типа, в т.ч. болезнь Ходжкина;');
      prn('- лейкемия (лейкоз) или любое заболевание крови, требующее лечения  сроком не менее одного месяца (например, анемия, лимфома, миелома, нарушение свертываемости крови, гемофилия или повышенная кровоточивость сосудов и т.д.);');
      prn('- рак insitu  (неинвазивный рак, без прорастания) или любые предраковые (предопухолевые) заболевания или патологические изменения органов и тканей (дисплазии), имеющие высокую вероятность перерождения в злокачественные новообразования, включая, но не ограничиваясь предраковыми изменениями в области молочных желез / женских половых органов, мочевого пузыря или простаты;');
      prn('- любые формы заболеваний сердца (например, сердечный приступ, стенокардия, перенесенный инфаркт миокарда, кардиосклероз, кардиомиопатия, нарушения клапанов сердца, стеноз/порок, шумы в сердце или ревматизм; (не включая лечение только в связи с высоким кровяным давлением и/или высоким уровнем холестерина);');
      prn('- любые формы инсульта; ');
      prn('- любая форма диабета.');
      prn('Если в настоящее время Застрахованный проходит обследование по поводу симптомов, которые могут быть проявлением  какого-либо из вышеуказанных  заболеваний или состояний, либо  ожидает результатов диагностики, Застрахованному следует дождаться получения результатов, чтобы корректно ответить на утверждения.');
    
    END print_declaration_custom;
  
    PROCEDURE print_periods_custom IS
      v_cnt_mbg NUMBER;
    BEGIN
      print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ: ' || v_pol_sum.policy_period_desc ||
                            ' c ' || to_char(v_pol_sum.start_date, 'dd.mm.yyyy') || ' по ' ||
                            to_char(v_pol_sum.end_date, 'dd.mm.yyyy'));
      prn('Договор страхования вступает в силу в соответствии с п.6.2. Полисных условий');
    
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn('НАЧАЛО: ', 0, par_w => 20);
      set_font;
      prn('00:00 1-го дня, следующего за датой оплаты страховой премии (первого страхового взноса)');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 0, par_w => 25);
      set_font;
      prn('23:59 даты окончания срока действия договора страхования');
      prn('(«Дожитие Застрахованного до окончания срока действия Договора страхования»)');
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn('НАЧАЛО: ', 0, par_w => 20);
      set_font;
      prn('00:00 91-го дня, следующего за датой оплаты страховой премии (первого страхового взноса)');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 0, par_w => 25);
      set_font;
      prn('23:59 даты окончания срока действия договора страхования');
      prn('(«Смерть Застрахованного по любой причине»)');
    
      set_font(par_style => gc_style_bold);
      prn('СРОК СТРАХОВАНИЯ');
      prn('НАЧАЛО: ', 0, par_w => 20);
      set_font;
      prn('00:00 4-го дня, следующего за датой оплаты страховой премии (первого страхового взноса) ');
      set_font(par_style => gc_style_bold);
      prn('ОКОНЧАНИЕ: ', 0, par_w => 25);
      set_font;
      prn('23:59 даты окончания первого страхового года');
      prn('(«Смерть Застрахованного, наступившая в результате несчастного случая», «Смерть Застрахованного, наступившая в результате дорожно-транспортного происшествия)');
    
      SELECT COUNT(*)
        INTO v_cnt_mbg
        FROM t_prod_line_option plo
            ,t_product_line pl
            ,v_prod_product_line ppl
            ,t_product_line_type plt
            ,(SELECT pc.t_prod_line_option_id
                    ,pc.ins_amount
                    ,pc.fee
                FROM p_cover  pc
                    ,as_asset aa
               WHERE aa.p_policy_id = v_policy_id
                 AND aa.as_asset_id = pc.as_asset_id) pc
       WHERE ppl.product_brief = v_pol_sum.product_brief
         AND ppl.t_product_line_id = plo.product_line_id
         AND ppl.t_product_line_id = pl.id
         AND plo.id = pc.t_prod_line_option_id
         AND plt.product_line_type_id = pl.product_line_type_id
         AND plt.brief = 'OPTIONAL';
      IF v_cnt_mbg > 0
      THEN
        set_font(par_style => gc_style_bold);
        prn('СРОК СТРАХОВАНИЯ');
        prn('НАЧАЛО: ', 0, par_w => 20);
        set_font;
        prn('00:00 1-го, дня, следующего за датой оплаты страховой премии (первого страхового взноса), включая Период ожидания, равный 180 (сто восемьдесят) календарным дням. Период ожидания не действует для второго и последующих пролонгируемых лет действия Дополнительной программы страхования.');
        set_font(par_style => gc_style_bold);
        prn('ОКОНЧАНИЕ: ', 0, par_w => 25);
        set_font;
        prn('23:59 даты окончания первого страхового года');
        prn('(«Медицина без границ плюс»)');
      END IF;
    
      set_font(par_style => gc_style_italic);
      prn('Если Страхователь за 30 (тридцать) календарных дней до дня окончания срока страхования по указанным дополнительным программам не направит письменное заявление Страховщику о намерении исключить какую-либо из указанных  программ или рисков из договора страхования или внести в них изменения, срок страхования по указанным дополнительным программам (страховым рискам) продлевается до даты наступления очередной страховой годовщины');
    END print_periods_custom;
  
    PROCEDURE print_programs_custom IS
      v_total_fee   NUMBER := 0;
      is_exists_mbg BOOLEAN := FALSE;
    BEGIN
      set_font;
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 4;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
    
      gv_datas(1) := 'Страховые риски';
      gv_datas(2) := 'Гарантированная страховая сумма';
      gv_datas(3) := 'Страховой взнос';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'RL';
      gv_borders(2) := 'R';
      gv_borders(3) := 'R';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,nvl(pc.fee, 0) AS fee
                        ,plo.brief
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id
                             AND pc.status_hist_id != pkg_cover.status_hist_id_del
                             AND aa.status_hist_id != pkg_asset.status_hist_id_del) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'RECOMMENDED'
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := rec.description;
        gv_datas(2) := NULL;
        gv_datas(3) := NULL;
        v_total_fee := v_total_fee + rec.fee;
        row_print2(par_h => 3);
      
        gv_styles(1) := NULL;
        gv_styles(2) := NULL;
        gv_styles(3) := NULL;
        gv_borders(1) := 'LR';
        gv_borders(2) := 'LR';
        gv_borders(3) := 'LR';
      
        gv_datas(1) := 'Смерть Застрахованного по любой причине;';
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        row_print2(par_h => 3);
        gv_datas(1) := 'Дожитие Застрахованного до окончания срока действия Договора страхования';
        gv_datas(2) := NULL;
        gv_datas(3) := NULL;
        row_print2(par_h => 3);
      END LOOP;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховая сумма';
      gv_datas(3) := 'Страховой взнос';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_datas(1) := 'Страховые риски:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'TRL';
      gv_borders(2) := 'TR';
      gv_borders(3) := 'TR';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_borders(1) := 'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,SUM(nvl(pc.fee, 0)) over() AS fee
                        ,row_number() over(ORDER BY pl.sort_order) AS rn
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id
                             AND pc.status_hist_id != pkg_cover.status_hist_id_del
                             AND aa.status_hist_id != pkg_asset.status_hist_id_del) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'MANDATORY'
                     AND nvl(pc.fee, 0) <> 0
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := rec.description;
        IF rec.rn = 2
        THEN
          v_total_fee := v_total_fee + rec.fee;
          gv_datas(2) := rec.ins_amount;
          gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        ELSE
          gv_datas(2) := NULL;
          gv_datas(3) := NULL;
        END IF;
      
        row_print2(par_h => 3);
      END LOOP;
    
      FOR rec IN (SELECT '-' || pl.public_description || decode(plo.brief, 'WOP_DD_SURGERY', '**') AS description
                        ,CASE
                           WHEN plo.brief = 'H_DMS' THEN
                            pkg_rep_utils.to_money_sep(1000000) || ' (евро)'
                           WHEN plo.brief = 'WOP_DD_SURGERY' THEN
                            '-величина страховой премии  по дополнительной программе / страхового взноса по дополнительной программе страхования'
                           ELSE
                            NULL
                         END ins_amount
                        ,row_number() over(ORDER BY pl.sort_order) AS rn
                        ,SUM(nvl(pc.fee, 0)) over() AS fee
                        ,plo.brief
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id
                             AND pc.status_hist_id != pkg_cover.status_hist_id_del
                             AND aa.status_hist_id != pkg_asset.status_hist_id_del) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'OPTIONAL'
                   ORDER BY decode(plo.brief, 'DMS_DD_SURGERY', 1, 'H_DMS', 2, 'WOP_DD_SURGERY', 3))
      LOOP
        IF rec.rn = 1
        THEN
          is_exists_mbg := TRUE;
        
          gv_styles(1) := 'B';
          gv_styles(2) := 'B';
          gv_styles(3) := 'B';
        
          gv_borders(1) := 'TRL';
          gv_borders(2) := 'TR';
          gv_borders(3) := 'TR';
        
          gv_datas(1) := 'Дополнительная программа «Медицина без границ плюс»*:';
          gv_datas(2) := NULL;
          gv_datas(3) := NULL;
          row_print2(par_h => 3);
          gv_styles(1) := NULL;
          gv_styles(2) := NULL;
          gv_styles(3) := NULL;
          gv_borders(2) := 'LR';
          gv_borders(3) := 'LR';
        END IF;
        IF rec.rn = 3
        THEN
          gv_borders(1) := 'TRL';
          gv_borders(2) := 'TR';
        END IF;
      
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        IF rec.rn = 2
        THEN
          v_total_fee := v_total_fee + rec.fee;
          gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        ELSE
          gv_datas(3) := NULL;
        END IF;
        row_print2(par_h => 3);
      END LOOP;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 5;
      gv_widths(2) := plpdf.getpagespace / 6;
    
      gv_borders(1) := '1';
      gv_borders(2) := '1';
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_datas(1) := 'Итого страховой взнос***: ';
      gv_datas(2) := pkg_rep_utils.to_money_sep(v_total_fee);
    
      row_print2(par_h => 3);
    
      IF is_exists_mbg
      THEN
        prn('*Примечание: Страховая сумма по  программе страхования "Обращение Застрахованного в Сервисную компанию/к Страховщику с последующей организацией лечения  в связи с диагностированием смертельно опасного заболевания и/или назначением проведения хирургического вмешательства" равна 1 000 000 евро в год, но не более 2 000 000 евро за весь срок действия договора страхования, включая все очередные сроки страхования или его пролонгации.');
        prn('Дополнительной программой страхования "Медицина без границ плюс" устанавливаются следующие лимиты в пределах страховой суммы в течение страхового года:');
        prn('- При оплате услуг на транспортировку Застрахованного и Сопровождающего его лица - в размере страховой суммы;');
        prn('- При оплате услуг на проживание Застрахованного и Сопровождающего его лица -  в размере страховой суммы;');
        prn('- При возмещении Застрахованному стоимости приобретенных им лекарственных препаратов в соответствии с условиями страхования - в размере 50 000 евро за весь срок действия Дополнительной программы страхования;');
        prn('- При осуществлении ежедневной выплаты при госпитализации - 100 евро за каждый день, максимум 60 дней, на одного Застрахованного по каждому страховому случаю.');
        prn('Оплата услуг по транспортировке и проживанию при превышении указанных лимитов осуществляется Страхователем / Застрахованным самостоятельно. ');
        prn('Страховая сумма по  программе страхования  «Освобождение от уплаты страховой премии / страховых взносов в результате первичного диагностирования смертельно опасного заболевания и/или назначения проведения хирургического вмешательства» равна величине страховой премии / страхового взноса по дополнительной программе страхования.');
        prn('В случае, если оплата стоимости медицинской и иной помощи, оказанной Застрахованному, осуществлена в валюте, отличной от Евро, то она конвертируется в Евро по курсу Европейского Центрального Банка на дату оплаты.');
        prn('** Данная программа предоставляет освобождение от обязанности по уплате страховой премии/ очередных неоплаченных страховых взносов по Дополнительной программе страхования');
      END IF;
    
    END print_programs_custom;
  
    PROCEDURE print_payment_terms IS
      v_others_payment_date VARCHAR2(500);
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w   => plpdf.getpagespace * 3 / 5
                     ,p_txt => 'ДАТА УПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ПЕРВОГО СТРАХОВОГО ВЗНОСА): '
                     ,p_ln  => 0);
      plpdf.printcell(p_w   => plpdf.getpagespace * 2 / 5
                     ,p_txt => to_char(v_pol_sum.fist_payment_date, 'dd.mm.yyyy')
                     ,p_ln  => 1);
      SELECT substr(MAX(pay_date), 3)
        INTO v_others_payment_date
        FROM (SELECT sys_connect_by_path(to_char(ADD_MONTHS(v_pol_sum.fist_payment_date
                                                           ,LEVEL * decode(v_pol_sum.payment_terms
                                                                          ,'Раз в полгода'
                                                                          ,6
                                                                          ,'Ежеквартально'
                                                                          ,3
                                                                          ,'Ежегодно'
                                                                          ,12))
                                                ,'dd.mm.yyyy')
                                        ,'; ') pay_date
                FROM dual
              CONNECT BY LEVEL <= (SELECT per.period_value
                                     FROM p_policy pp
                                         ,t_period per
                                    WHERE pp.policy_id = v_policy_id
                                      AND per.id = pp.period_id)
                        
                         * decode(v_pol_sum.payment_terms
                                          ,'Раз в полгода'
                                          ,2
                                          ,'Ежеквартально'
                                          ,4
                                          ,'Ежегодно'
                                          ,1) - 1);
    
      plpdf.printcell(p_w   => plpdf.getpagespace * 3 / 5
                     ,p_txt => 'ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ: '
                     ,p_ln  => 0);
      prn(v_others_payment_date);
    
      prn('*** Страховая премия (страховой взнос) уплачивается в рублях по курсу Центрального банка РФ, установленному для  иностранной валюты, предусмотренной договором страхования,  на дату уплаты (перечисления).');
    
    END print_payment_terms;
  
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
    v_signer       := get_signer('pkg_rep_plpdf.rep_dostoyanie');
  
    init(par_default_font_size => 8);
  
    print_barcode(par_policy_id => v_policy_id);
  
    print_draft(v_pol_sum.policy_status_desc);
  
    gc_default_line_height := 3;
  
    print_default_title('ДОГОВОР СТРАХОВАНИЯ ПО ПРОГРАММЕ «ДОСТОЯНИЕ» ' || v_pol_sum.pol_num
                       ,par_size => 12);
    print_default_title('(заключен на основании Полисных условий по программе  страхования «Достояние»)'
                       ,par_size => 12);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_default_insurer_info;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_insuree_info(par_contact_info => v_insuree_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    print_assured_info(par_contact_info => v_assured_info, par_version_num => gc_contact_info_ver2);
  
    -------------------------------------------------------------------------------------------------
    -- ВАЛЮТА ДОГОВОРА
    -------------------------------------------------------------------------------------------------
    print_currency(par_policy_summary => v_pol_sum);
  
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    -------------------------------------------------------------------------------------------------
    --ПЕРИОД СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_periods_custom;
  
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('СТРАХОВЫЕ РИСКИ, СТРАХОВЫЕ СУММЫ, СТРАХОВАЯ ПРЕМИЯ (ВЗНОС)');
    print_programs_custom;
  
    -------------------------------------------------------------------------------------------------
    --ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ (ВЗНОСОВ):
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПЕРИОДИЧНОСТЬ ОПЛАТЫ СТРАХОВОЙ ПРЕМИИ: '
                         ,0);
    plpdf.printcell(p_txt => v_pol_sum.payment_terms, p_h => -1, p_ln => 1);
    print_payment_terms;
  
    -------------------------------------------------------------------------------------------------
    --ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ТЕРРИТОРИЯ И ВРЕМЯ ДЕЙСТВИЯ СТРАХОВОЙ ЗАЩИТЫ:ВЕСЬ МИР, 24 ЧАСА');
  
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ ЗАСТРАХОВАННОГО');
    print_benificiary_table(v_policy_id, 3);
  
    print_draft(v_pol_sum.policy_status_desc);
    --plpdf.newpage;
  
    v_underwriting := get_underwriting_data(par_policy_id               => v_policy_id
                                           ,par_premium_raised_out      => v_premium_raised_out
                                           ,par_premium_delta_out       => v_premium_delta_out
                                           ,par_premium_raised_date_out => v_premium_raised_date_out
                                           ,par_addendum_note           => v_addendum_note);
  
    -------------------------------------------------------------------------------------------------
    --ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    IF NOT v_underwriting
    THEN
      print_default_chapter('ДЕКЛАРАЦИЯ СТРАХОВАТЕЛЯ/ЗАСТРАХОВАННОГО');
      print_declaration_custom;
    
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
    END IF;
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    IF NOT v_underwriting
    THEN
      print_additional_conds_custom;
    ELSE
      print_additional_conds_risk;
    END IF;
  
    print_sign_custom;
  
    print_cash_surr_custom;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_dostoyanie;

  -- Процедура формирования заявления по продукту Достояние
  -- 384116 Достояние_ГПБ
  -- Доброхотова И., январь, 2015  
  PROCEDURE rep_dostoyanie_notice
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    pkg_rep_plpdf_template.rep_dostoyanie_notice_p(par_content_type, par_file_name, par_data);
  END rep_dostoyanie_notice;

  PROCEDURE rep_best_doctors_is_full_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    rep_best_doctors_full(par_is_full_dec  => TRUE
                         ,par_is_orig_dec  => TRUE
                         ,par_content_type => par_content_type
                         ,par_file_name    => par_file_name
                         ,par_data         => par_data);
  END rep_best_doctors_is_full_dec;

  PROCEDURE rep_best_doctors_is_short_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    rep_best_doctors_full(par_is_full_dec  => FALSE
                         ,par_is_orig_dec  => TRUE
                         ,par_content_type => par_content_type
                         ,par_file_name    => par_file_name
                         ,par_data         => par_data);
  END rep_best_doctors_is_short_dec;

  PROCEDURE rep_best_doctors_is_short_dec2
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    rep_best_doctors_full(par_is_full_dec  => FALSE
                         ,par_is_orig_dec  => FALSE
                         ,par_content_type => par_content_type
                         ,par_file_name    => par_file_name
                         ,par_data         => par_data);
  END rep_best_doctors_is_short_dec2;

  /*
    396087 Григорьев Ю.
    Процедура формирования заявления на перевод денежных средств МБГ Ренкап 
  */

  PROCEDURE rep_best_doctors_payment_order
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_is_real_policy BOOLEAN;
    v_policy_id      p_policy.policy_id%TYPE;
    v_pol_sum        t_policy_summary;
    v_insuree_info   t_contact_summary;
    v_passport_ser   VARCHAR2(10);
    v_passport_num   VARCHAR2(10);
    v_passport_other VARCHAR2(4000);
    v_address_id     NUMBER;
    v_address        VARCHAR2(4000);
    vc_default_font_size CONSTANT NUMBER := 9;
  
    PROCEDURE init_insuree IS
    BEGIN
      v_passport_ser   := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                        ,pkg_contact_rep_utils.gc_mask_doc_series);
      v_passport_num   := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                        ,pkg_contact_rep_utils.gc_mask_doc_number);
      v_passport_other := pkg_contact_rep_utils.format_ident_doc_by_mask(pkg_contact_rep_utils.get_primary_doc_id(v_insuree_info.contact_id)
                                                                        ,'<#DOC_PLACE> дата выдачи:  <#DOC_DATE>');
      v_address_id     := pkg_contact_rep_utils.get_last_active_address_id(par_contact_id => v_insuree_info.contact_id);
    
      v_address := pkg_contact_rep_utils.get_address_by_mask(v_address_id
                                                            ,pkg_contact_rep_utils.gc_address_no_zip);
    END init_insuree;
  
    PROCEDURE print_header IS
      vc_header_font_size CONSTANT NUMBER := 8;
      vc_vertical_space   CONSTANT NUMBER := 10; -- Вертикальный отступ
    BEGIN
    
      plpdf.printcell(p_h => vc_vertical_space, p_ln => 1);
      set_font(par_size        => vc_header_font_size
              ,par_style       => pkg_rep_plpdf.gc_style_bold
              ,par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.gv_widths(1) := 120;
      pkg_rep_plpdf.gv_widths(2) := 80;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := 'B';
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := 'В КБ "Ренессанс Кредит" (ООО)';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.gv_widths(1) := 100;
      pkg_rep_plpdf.gv_widths(2) := 20;
      pkg_rep_plpdf.gv_widths(3) := 80;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'R';
      pkg_rep_plpdf.gv_aligns(3) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := 'От: ';
      pkg_rep_plpdf.gv_datas(3) := v_insuree_info.fio;
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.gv_widths(1) := 100;
      pkg_rep_plpdf.gv_widths(2) := 20;
      pkg_rep_plpdf.gv_widths(3) := 80;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'R';
      pkg_rep_plpdf.gv_aligns(3) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
      pkg_rep_plpdf.gv_borders(3) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := 'паспорт: ';
      pkg_rep_plpdf.gv_datas(3) := 'серия    ' || v_passport_ser || '   №    ' || v_passport_num;
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.gv_widths(1) := 100;
      pkg_rep_plpdf.gv_widths(2) := 20;
      pkg_rep_plpdf.gv_widths(3) := 80;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'R';
      pkg_rep_plpdf.gv_aligns(3) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
      pkg_rep_plpdf.gv_borders(3) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := 'выдан: ';
      pkg_rep_plpdf.gv_datas(3) := v_passport_other;
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.gv_widths(1) := 100;
      pkg_rep_plpdf.gv_widths(2) := 20;
      pkg_rep_plpdf.gv_widths(3) := 80;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'R';
      pkg_rep_plpdf.gv_aligns(3) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
      pkg_rep_plpdf.gv_borders(3) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := 'адрес регистрации: ';
      pkg_rep_plpdf.gv_datas(3) := v_address;
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
    END print_header;
  
    PROCEDURE print_title
    (
      par_text VARCHAR2
     ,par_size NUMBER DEFAULT 20
    ) IS
      vc_vertical_space CONSTANT NUMBER := 5; -- Вертикальный отступ
    BEGIN
    
      plpdf.printcell(p_h => vc_vertical_space, p_ln => 1);
      set_font(par_size        => par_size
              ,par_style       => gc_style_bold
              ,par_font_family => gc_arial_font_family);
      plpdf.printcell(p_txt => par_text, p_align => 'C', p_h => -1, p_ln => 1);
      set_font;
    
    END print_title;
  
    PROCEDURE print_declaration_letter IS
      vc_vertical_space CONSTANT NUMBER := 5; -- Вертикальный отступ
      v_insuree_check   CONSTANT VARCHAR2(50) := rpad('408178', 20); -- Счет клиента в КБ «Ренессанс Кредит» (ООО)
      v_bank_check      CONSTANT VARCHAR2(50) := '60322810300000100199'; -- Счет КБ «Ренессанс Кредит» (ООО)
      v_bik_bank        CONSTANT VARCHAR2(50) := '044599409'; -- БИК Банка получателя
      v_inn_bank        CONSTANT VARCHAR2(50) := '7744000126'; -- ИНН Банка получателя
      v_kor_check_bank  CONSTANT VARCHAR2(50) := '30101810900000000409'; -- Корреспондентский Счёт Банка получателя
    
      PROCEDURE print_numfield(par_msg VARCHAR2) IS
      BEGIN
        pkg_rep_plpdf.delete_row_print_cache;
      
        FOR i IN 1 .. length(par_msg)
        LOOP
          pkg_rep_plpdf.gv_widths(i) := 9;
          pkg_rep_plpdf.gv_aligns(i) := NULL;
          pkg_rep_plpdf.gv_styles(i) := 'B';
          pkg_rep_plpdf.gv_borders(i) := '1';
          pkg_rep_plpdf.gv_datas(i) := substr(par_msg, i, 1);
        END LOOP;
      
        pkg_rep_plpdf.row_print2;
        pkg_rep_plpdf.delete_row_print_cache;
      END;
    BEGIN
      plpdf.printcell(p_h => vc_vertical_space, p_ln => 1);
      set_font(par_size => 12, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      --ФИО
    
      pkg_rep_plpdf.gv_widths(1) := 10;
      pkg_rep_plpdf.gv_widths(2) := 180;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := 'B';
    
      pkg_rep_plpdf.gv_datas(1) := 'Я, ';
      pkg_rep_plpdf.gv_datas(2) := v_insuree_info.fio;
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      set_font(par_size => 8, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 10;
      pkg_rep_plpdf.gv_widths(2) := 180;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := 'I';
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := '(Фамилия, имя, отчество)';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      --прошу перечислить...
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 90;
      pkg_rep_plpdf.gv_widths(2) := 70;
      pkg_rep_plpdf.gv_widths(3) := 30;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'C';
      pkg_rep_plpdf.gv_aligns(3) := NULL;
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := 'B';
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := 'B';
      pkg_rep_plpdf.gv_borders(3) := 'B';
    
      pkg_rep_plpdf.gv_datas(1) := 'прошу перечислить денежные средства в размере ';
      pkg_rep_plpdf.gv_datas(2) := '10 000 (Десять тысяч) ';
      pkg_rep_plpdf.gv_datas(3) := 'рублей 00 коп.';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      -- c моего счета...
    
      set_font(par_size => 8, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 90;
      pkg_rep_plpdf.gv_widths(2) := 100;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := 'I';
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := '(Сумма цифрами и прописью)';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      plpdf.printcell(p_txt => 'с моего счета в КБ «Ренессанс Кредит» (ООО)'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
      -- Счет клиента в КБ «Ренессанс Кредит» (ООО)
      print_numfield(v_insuree_check);
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      --на счет...
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      plpdf.printcell(p_txt => 'на счет (счет зачисления)', p_h => -1, p_ln => 1);
    
      -- Счет КБ «Ренессанс Кредит» (ООО)
      print_numfield(v_bank_check);
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 175;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
      pkg_rep_plpdf.gv_styles(2) := 'B';
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := 'B';
    
      pkg_rep_plpdf.gv_datas(1) := '1. ';
      pkg_rep_plpdf.gv_datas(2) := 'Наименование Банка   КБ «Ренессанс Кредит» (ООО)';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      -- указывается...
      set_font(par_size => 7, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 175;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := '(указывается наименование Банка, в который Вы хотите перевести денежные средства, а также обязательно город и отделение банка (если есть)';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 175;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
      pkg_rep_plpdf.gv_styles(2) := 'B';
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := '2. ';
      pkg_rep_plpdf.gv_datas(2) := 'БИК Банка получателя';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      -- БИК Банка получателя
      print_numfield(v_bik_bank);
    
      -- указывается...
      set_font(par_size => 7, par_font_family => gc_arial_font_family);
    
      plpdf.printcell(p_txt => 'Указывается 9-значный банковский идентификационный код (БИК) банка, в который Вы хотите перевести денежные средства'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      -- ИНН Банка получателя
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 175;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
      pkg_rep_plpdf.gv_styles(2) := 'B';
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := '3. ';
      pkg_rep_plpdf.gv_datas(2) := 'ИНН Банка получателя';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      print_numfield(v_inn_bank);
    
      -- указывается...
      set_font(par_size => 7, par_font_family => gc_arial_font_family);
    
      plpdf.printcell(p_txt => 'Указывается 10-значный идентификационный номер налогоплательщика (ИНН) банка, в который Вы хотите перевести денежные средства'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      -- Корреспондентский Счёт банка получателя
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 175;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
      pkg_rep_plpdf.gv_styles(2) := 'B';
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := '4. ';
      pkg_rep_plpdf.gv_datas(2) := 'Корреспондентский Счёт банка получателя';
    
      pkg_rep_plpdf.row_print2;
    
      print_numfield(v_kor_check_bank);
    
      -- указывается...
      set_font(par_size => 7, par_font_family => gc_arial_font_family);
    
      plpdf.printcell(p_txt => 'Указывается 20-значный корреспондентский счёт банка, в который Вы хотите перевести денежные средства'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      -- Примечания
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 25;
      pkg_rep_plpdf.gv_widths(3) := 150;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'L';
      pkg_rep_plpdf.gv_aligns(3) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
      pkg_rep_plpdf.gv_styles(2) := 'B';
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
      pkg_rep_plpdf.gv_borders(3) := 'B';
    
      pkg_rep_plpdf.gv_datas(1) := '5. ';
      pkg_rep_plpdf.gv_datas(2) := 'Примечания';
      pkg_rep_plpdf.gv_datas(3) := NULL;
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      -- указывается...
      set_font(par_size => 7, par_font_family => gc_arial_font_family);
    
      plpdf.printcell(p_txt => 'Может быть указана любая дополнительная информация по переводу денежных средств'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      -- Назначение платежа
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family, par_style => gc_style_bold);
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 40;
      pkg_rep_plpdf.gv_widths(3) := 135;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'L';
      pkg_rep_plpdf.gv_aligns(3) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
      pkg_rep_plpdf.gv_styles(2) := 'B';
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
      pkg_rep_plpdf.gv_borders(3) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := '6. ';
      pkg_rep_plpdf.gv_datas(2) := 'Назначение платежа:';
      pkg_rep_plpdf.gv_datas(3) := 'Перевод средств в оплату Договора страхования ' ||
                                   v_pol_sum.pol_num || ' от ' || v_pol_sum.start_date || ' (НДС';
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      pkg_rep_plpdf.gv_widths(1) := 15;
      pkg_rep_plpdf.gv_widths(2) := 90;
      pkg_rep_plpdf.gv_widths(3) := 80;
    
      pkg_rep_plpdf.gv_aligns(1) := NULL;
      pkg_rep_plpdf.gv_aligns(2) := 'L';
      pkg_rep_plpdf.gv_aligns(3) := NULL;
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
      pkg_rep_plpdf.gv_styles(3) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
      pkg_rep_plpdf.gv_borders(3) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
      pkg_rep_plpdf.gv_datas(2) := 'не облагается). Комиссии за мой счет.';
      pkg_rep_plpdf.gv_datas(3) := NULL;
    
      pkg_rep_plpdf.row_print2;
    
      pkg_rep_plpdf.delete_row_print_cache;
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      set_font(par_size => 8, par_font_family => gc_arial_font_family);
    
      plpdf.printmultilinecell(p_txt      => 'Настоящим подтверждаю, что данные, указанные в заявлении, мною проверены и верны, и я несу ответственность за их точность. Выражаю свое понимание и согласие с тем, что Банк не несет ответственности за не поступление платежа, связанное с неверным указанием в заявлении платежных реквизитов'
                              ,p_h        => 3
                              ,p_clipping => 0
                              ,p_ln       => 1);
    
    END print_declaration_letter;
  
    PROCEDURE print_signs IS
    BEGIN
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 20;
      pkg_rep_plpdf.gv_widths(2) := 75;
      pkg_rep_plpdf.gv_widths(3) := 20;
      pkg_rep_plpdf.gv_widths(4) := 75;
    
      pkg_rep_plpdf.gv_aligns(1) := 'L';
      pkg_rep_plpdf.gv_aligns(2) := 'C';
      pkg_rep_plpdf.gv_aligns(3) := 'L';
      pkg_rep_plpdf.gv_aligns(4) := 'L';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
      pkg_rep_plpdf.gv_styles(2) := 'B';
      pkg_rep_plpdf.gv_styles(3) := 'B';
      pkg_rep_plpdf.gv_styles(4) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := 'B';
      pkg_rep_plpdf.gv_borders(3) := NULL;
      pkg_rep_plpdf.gv_borders(4) := 'B';
    
      pkg_rep_plpdf.gv_datas(1) := 'Дата ';
      pkg_rep_plpdf.gv_datas(2) := v_pol_sum.start_date;
      pkg_rep_plpdf.gv_datas(3) := 'Подпись ';
      pkg_rep_plpdf.gv_datas(4) := NULL;
    
      pkg_rep_plpdf.row_print2;
      pkg_rep_plpdf.delete_row_print_cache;
    
      plpdf.printcell(p_h => -1, p_ln => 1);
    
      -- Жирное подстрочие
      set_font(par_size => 60, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 190;
    
      pkg_rep_plpdf.gv_aligns(1) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := 'B';
    
      pkg_rep_plpdf.gv_borders(1) := 'B';
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
    
      pkg_rep_plpdf.row_print2;
      pkg_rep_plpdf.delete_row_print_cache;
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family, par_style => gc_style_bold);
      plpdf.printcell(p_txt => 'ОТМЕТКИ КРЕДИТНОГО ПРЕДСТАВИТЕЛЯ БАНКА:'
                     ,p_h   => -1
                     ,p_ln  => 1);
      plpdf.printcell(p_txt => 'Данные Заявителя и подпись проверены и верны:'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 190;
    
      pkg_rep_plpdf.gv_aligns(1) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := 'B';
    
      pkg_rep_plpdf.gv_datas(1) := NULL;
    
      pkg_rep_plpdf.row_print2;
      pkg_rep_plpdf.delete_row_print_cache;
    
      set_font(par_size => 10, par_font_family => gc_arial_font_family);
    
      pkg_rep_plpdf.gv_widths(1) := 90;
      pkg_rep_plpdf.gv_widths(2) := 90;
    
      pkg_rep_plpdf.gv_aligns(1) := 'C';
      pkg_rep_plpdf.gv_aligns(2) := 'C';
    
      pkg_rep_plpdf.gv_styles(1) := NULL;
      pkg_rep_plpdf.gv_styles(2) := NULL;
    
      pkg_rep_plpdf.gv_borders(1) := NULL;
      pkg_rep_plpdf.gv_borders(2) := NULL;
    
      pkg_rep_plpdf.gv_datas(1) := '(ФИО)';
      pkg_rep_plpdf.gv_datas(2) := '(Подпись)';
    
      pkg_rep_plpdf.row_print2;
      pkg_rep_plpdf.delete_row_print_cache;
    
      plpdf.printcell(p_h => -1, p_ln => 1);
      plpdf.printcell(p_txt => '«________________»_____________________20_______г.'
                     ,p_h   => -1
                     ,p_ln  => 1);
    
    END print_signs;
  
  BEGIN
  
    BEGIN
      v_is_real_policy := nvl(repcore.get_context('PRINT_EMPTY'), 0) = 0;
    EXCEPTION
      -- В случае,если context не задан, выдается -20000 ошибка.
      -- Клево было бы выдавать ex.no_data_found
      WHEN OTHERS THEN
        v_is_real_policy := TRUE;
    END;
  
    IF v_is_real_policy
    THEN
      v_policy_id    := to_number(repcore.get_context('POL_ID'));
      v_pol_sum      := get_policy_summary(v_policy_id);
      v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    END IF;
    -- Инициализация Страхователя
    init_insuree;
    -- Инициализация PL/PDF
    pkg_rep_plpdf.init(par_default_font_size => vc_default_font_size);
    -- Установка черного цвета шрифта  
    pkg_rep_plpdf.set_font;
    -- Обращение страхователя к банку
    print_header;
    -- Заголовок
    print_title('ЗАЯВЛЕНИЕ НА ПЕРЕВОД ДЕНЕЖНЫХ СРЕДСТВ', 12);
    -- Содержимое заявления
    print_declaration_letter;
    -- Подписи и пр.
    print_signs;
  
    -------------------------------------------------------------------------------------------------
    -- ФОРМИРОВАНИЕ PDF
    -------------------------------------------------------------------------------------------------
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'payment_order_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := pkg_rep_plpdf.gc_pdf_content_type;
  
  END rep_best_doctors_payment_order;

  /*
    Процедура формирования полиса по продукту Семейный депозит
    385995 Сем.депозит, новое бсо
    Доброхотова И., январь, 2015
  */
  PROCEDURE rep_famaly_dep
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
    v_policy_id    NUMBER;
    v_pol_sum      t_policy_summary;
    v_insuree_info t_contact_summary;
    v_assured_info t_contact_summary;
  
    v_cash_surr_table_cur typ_cur_cash_surr_table;
  
    PROCEDURE print_programs_custom IS
      v_total_fee NUMBER := 0;
      v_sum_adm   NUMBER;
    BEGIN
      set_font;
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 4;
      gv_widths(2) := plpdf.getpagespace / 6;
      gv_widths(3) := plpdf.getpagespace / 6;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Гарантированная страховая сумма, руб.';
      gv_datas(3) := 'Страховой взнос, руб.';
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'R'; --'1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_datas(1) := gv_chapter_num || '.1 ОСНОВНЫЕ СТРАХОВЫЕ РИСКИ:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'R'; --'RL';
      gv_borders(2) := 'R';
      gv_borders(3) := 'R';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_borders(1) := 'R'; --'LR';
      gv_borders(2) := 'LR';
      gv_borders(3) := 'LR';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,nvl(pc.fee, 0) AS fee
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'RECOMMENDED'
                     AND pl.visible_flag = 1
                   ORDER BY pl.sort_order)
      LOOP
        gv_datas(1) := 'СМЕРТЬ ЗАСТРАХОВАННОГО ПО ЛЮБОЙ ПРИЧИНЕ;';
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        v_total_fee := v_total_fee + rec.fee;
        row_print2(par_h => 3);
      
        gv_datas(1) := 'ДОЖИТИЕ ЗАСТРАХОВАННОГО ДО ДАТЫ ОКОНЧАНИЯ СРОКА ДЕЙСТВИЯ ДОГОВОРА';
        gv_datas(2) := NULL;
        gv_datas(3) := NULL;
        row_print2(par_h => 3);
      END LOOP;
    
      gv_datas(1) := NULL;
      gv_datas(2) := 'Страховая сумма, руб.';
      gv_datas(3) := NULL;
    
      gv_aligns(1) := 'C';
      gv_aligns(2) := 'C';
      gv_aligns(3) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'R'; --'1';
      gv_borders(2) := '1';
      gv_borders(3) := '1';
    
      row_print2(par_h => 3);
    
      gv_aligns(1) := 'L';
    
      gv_datas(1) := gv_chapter_num || '.2 ДОПОЛНИТЕЛЬНЫЕ СТРАХОВЫЕ РИСКИ:';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
      gv_styles(3) := 'B';
    
      gv_borders(1) := 'R'; --'TRL';
      gv_borders(2) := 'TR';
      gv_borders(3) := 'TR';
    
      row_print2(par_h => 3);
    
      gv_styles(1) := NULL;
      gv_styles(2) := NULL;
      gv_styles(3) := NULL;
      gv_borders(1) := 'R'; --'LR';
      gv_borders(2) := 'LRB';
      gv_borders(3) := 'LRB';
    
      FOR rec IN (SELECT nvl(pl.public_description, pl.description) AS description
                        ,pkg_rep_utils.to_money_sep(nvl(pc.ins_amount, 0)) ins_amount
                        ,nvl(pc.fee, 0) AS fee
                    FROM t_prod_line_option plo
                        ,t_product_line pl
                        ,v_prod_product_line ppl
                        ,t_product_line_type plt
                        ,(SELECT pc.t_prod_line_option_id
                                ,pc.ins_amount
                                ,pc.fee
                            FROM p_cover  pc
                                ,as_asset aa
                           WHERE aa.p_policy_id = v_policy_id
                             AND aa.as_asset_id = pc.as_asset_id) pc
                   WHERE ppl.product_brief = v_pol_sum.product_brief
                     AND ppl.t_product_line_id = plo.product_line_id
                     AND ppl.t_product_line_id = pl.id
                     AND plo.id = pc.t_prod_line_option_id(+)
                     AND plt.product_line_type_id = pl.product_line_type_id
                     AND plt.brief = 'OPTIONAL'
                     AND plo.brief NOT IN ('Adm_Cost_Life', 'Penalty')
                   ORDER BY pl.sort_order)
      LOOP
        v_total_fee := v_total_fee + rec.fee;
        gv_datas(1) := rec.description;
        gv_datas(2) := rec.ins_amount;
        gv_datas(3) := pkg_rep_utils.to_money_sep(rec.fee);
        row_print2(par_h => 3);
      END LOOP;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 6 * 5;
      gv_widths(2) := plpdf.getpagespace / 6;
    
      gv_borders(1) := 'R'; --'1';
      gv_borders(2) := '1';
    
      gv_aligns(1) := 'R';
      gv_aligns(2) := 'C';
    
      gv_styles(1) := 'B';
      gv_styles(2) := 'B';
    
      gv_datas(1) := 'СТРАХОВОЙ ВЗНОС (ПРЕМИЯ): (уплачивается ' || lower(v_pol_sum.payment_terms) || '):';
      gv_datas(2) := pkg_rep_utils.to_money_sep(v_total_fee);
      row_print2(par_h => 3);
    
      gv_datas(1) := 'АДМИНИСТРАТИВНЫЕ ИЗДЕРЖКИ (уплачивается раз в год):';
      SELECT SUM(pc.fee)
        INTO v_sum_adm
        FROM as_asset           a
            ,p_cover            pc
            ,t_prod_line_option plo
            ,t_product_line     pl
       WHERE a.p_policy_id = v_policy_id
         AND pc.as_asset_id = a.as_asset_id
         AND pc.t_prod_line_option_id = plo.id
         AND plo.product_line_id = pl.id
         AND plo.brief = 'Adm_Cost_Life'
         AND a.status_hist_id <> pkg_asset.status_hist_id_del
         AND pc.status_hist_id <> pkg_cover.status_hist_id_del;
    
      gv_datas(2) := pkg_rep_utils.to_money_sep(v_sum_adm);
      row_print2(par_h => 3);
    
      set_font(par_style => gc_style_italic);
      prn('Все банковские расходы, связанные с оплатой страховой премии, оплачиваются Страхователем.');
      set_font;
    END print_programs_custom;
  
    PROCEDURE print_periods_custom IS
    BEGIN
      set_font;
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace * 2 / 7;
      gv_widths(2) := plpdf.getpagespace / 7;
      gv_widths(3) := plpdf.getpagespace / 7;
      gv_widths(4) := plpdf.getpagespace / 7;
      gv_widths(5) := plpdf.getpagespace / 7;
      gv_widths(6) := plpdf.getpagespace / 7;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := NULL;
      gv_styles(3) := gc_style_bold;
      gv_styles(4) := NULL;
      gv_styles(5) := gc_style_bold;
      gv_styles(6) := NULL;
    
      gv_datas(1) := 'СРОК ДЕЙСТВИЯ ДОГОВОРА:';
      gv_datas(2) := v_pol_sum.policy_period_desc;
      gv_datas(3) := 'НАЧАЛО:';
      gv_datas(4) := to_char(v_pol_sum.start_date, 'hh24:mi dd.mm.yyyy');
      gv_datas(5) := 'ОКОНЧАНИЕ:';
      gv_datas(6) := to_char(v_pol_sum.end_date, 'hh24:mi dd.mm.yyyy');
      row_print2;
    
      gv_styles(1) := gc_style_regular;
      gv_datas(1) := '(основные страховые риски)';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      gv_datas(4) := NULL;
      gv_datas(5) := NULL;
      gv_datas(6) := NULL;
      row_print2;
    
      gv_datas(1) := 'СРОК ДЕЙСТВИЯ ДОГОВОРА:';
      gv_datas(2) := '1 год';
      gv_datas(3) := 'НАЧАЛО:';
      gv_datas(4) := to_char(v_pol_sum.start_date, 'hh24:mi dd.mm.yyyy');
      gv_datas(5) := 'ОКОНЧАНИЕ:';
      gv_datas(6) := '23:59 ' ||
                     to_char(ADD_MONTHS(trunc(v_pol_sum.start_date), 12) - 1, 'dd.mm.yyyy');
      row_print2;
    
      gv_styles(1) := gc_style_regular;
      gv_datas(1) := '(дополнительные страховые риски)';
      gv_datas(2) := NULL;
      gv_datas(3) := NULL;
      gv_datas(4) := NULL;
      gv_datas(5) := NULL;
      gv_datas(6) := NULL;
      row_print2;
    
      set_font(par_style => gc_style_italic);
      prn('Если Страхователь за 30 (тридцать) календарных дней до дня окончания срока страхования по указанным дополнительным программам не направит письменное заявление Страховщику о намерении исключить какую-либо из указанных  программ или рисков из договора страхования или внести в них изменения, срок страхования по указанным дополнительным программам (страховым рискам) продлевается до даты наступления очередной страховой годовщины.');
    
    END print_periods_custom;
  
    PROCEDURE print_payment_terms IS
      v_others_payment_date VARCHAR2(500);
    BEGIN
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w => plpdf.getpagespace / 2
                      --      plpdf.printcell(p_w   => plpdf.getpagespace * 3 / 5
                     ,p_txt => 'ДАТА УПЛАТЫ ПЕРВОГО СТРАХОВОГО ВЗНОСА: '
                     ,p_ln  => 0);
      plpdf.printcell( /*p_w   => plpdf.getpagespace / 2
p_txt => to_char(v_pol_sum.fist_payment_date
                                      ,'dd.mm.yyyy')
                     ,p_ln  => 1);
    
      /*      SELECT substr(MAX(pay_date), 3)
        INTO v_others_payment_date
        FROM (SELECT sys_connect_by_path(to_char(ADD_MONTHS(v_pol_sum.fist_payment_date, LEVEL * 12)
                                                ,'dd.mm.yyyy')
                                        ,'; ') pay_date
                FROM dual
              CONNECT BY LEVEL <= (SELECT per.period_value - 1
                                     FROM p_policy pp
                                         ,t_period per
                                    WHERE pp.policy_id = v_policy_id
                                      AND per.id = pp.period_id));
      
      plpdf.printcell(p_w   => plpdf.getpagespace / 2
                     ,p_txt => 'ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ: '
                     ,p_ln  => 0);
      plpdf.printcell(p_txt => v_others_payment_date, p_ln => 1);*/
      SELECT substr(MAX(pay_date), 3)
        INTO v_others_payment_date
        FROM (SELECT sys_connect_by_path(to_char(ADD_MONTHS(v_pol_sum.fist_payment_date
                                                           ,LEVEL * decode(v_pol_sum.payment_terms
                                                                          ,'Раз в полгода'
                                                                          ,6
                                                                          ,'Ежеквартально'
                                                                          ,3
                                                                          ,'Ежегодно'
                                                                          ,12))
                                                ,'dd.mm.yyyy')
                                        ,'; ') pay_date
                FROM dual
              CONNECT BY LEVEL <= (SELECT per.period_value
                                     FROM p_policy pp
                                         ,t_period per
                                    WHERE pp.policy_id = v_policy_id
                                      AND per.id = pp.period_id)
                        
                         * decode(v_pol_sum.payment_terms
                                          ,'Раз в полгода'
                                          ,2
                                          ,'Ежеквартально'
                                          ,4
                                          ,'Ежегодно'
                                          ,1) - 1);
    
      prn(par_w    => plpdf.getpagespace / 2 -- 3 * plpdf.getpagespace / 5
         ,par_text => 'ДАТА УПЛАТЫ ПОСЛЕДУЮЩИХ СТРАХОВЫХ ВЗНОСОВ: '
         ,par_ln   => 0);
      prn(par_text => v_others_payment_date, par_ln => 1);
    
      prn('В случае если Страхователем не оплачен очередной страховой взнос по договору страхования по истечении льготного периода, действие договора страхования прекращается.');
    
    END print_payment_terms;
  
    PROCEDURE print_additional_conds IS
      v_cnt NUMBER;
    BEGIN
      set_font;
      prn('8.1. Договор страхования заключен на основании Полисных условий страхования жизни «Семейный депозит» утвержденных приказом Генерального директора ООО «СК «Ренессанс Жизнь» № 227/ОД/14 от 12.12.2014г. (далее «Полисные условия»).');
      prn('8.2. Стороны признают равную юридическую силу собственноручной подписи и факсимиле подписи Страховщика (воспроизведенное механическим или иным способом с использованием клише) в Договоре, а также в приложениях и дополнительных соглашениях к нему.');
      prn('8.3. Территория страхования: весь мир.');
      prn('8.4. Время действия страховой защиты: 24 часа.');
      prn('8.5. Валюта договора страхования: Рубль РФ.');
      --      prn('8.6. При досрочном прекращении действия договора выплата предусмотренной соответствующей программой страхования гарантированной выкупной суммы производится согласно таблице гарантированных выкупных сумм (Приложение № 2).');
    
      delete_row_print_cache;
      gv_widths(1) := plpdf.getpagespace / 5;
      gv_widths(2) := plpdf.getpagespace * 4 / 5;
    
      gv_styles(1) := gc_style_italic;
      gv_styles(2) := gc_style_italic;
    
      gv_datas(1) := 'К полису прилагаются:';
      gv_datas(2) := '1. Полисные условия страхования жизни по программе «Семейный депозит» (Приложение № 1)';
      row_print2;
      gv_datas(1) := NULL;
      gv_datas(2) := '2. Таблица гарантированных выкупных сумм по основной программе (Приложение №2)';
      row_print2;
    
      SELECT COUNT(*)
        INTO v_cnt
        FROM dual
       WHERE EXISTS (SELECT *
                FROM bso        b
                    ,bso_series bs
               WHERE b.policy_id = v_policy_id
                 AND bs.bso_series_id = b.bso_series_id
                 AND bs.series_num = 199);
      IF v_cnt = 1
      THEN
        gv_datas(1) := NULL;
        gv_datas(2) := '3. Заявление на заключение договора № ' || to_char(v_pol_sum.pol_num);
        row_print2(par_h => 4);
      END IF;
    END print_additional_conds;
  
    PROCEDURE print_signes IS
      v_agent_num  ven_ag_contract_header.num%TYPE;
      v_agent_name contact.obj_name_orig%TYPE;
    BEGIN
      BEGIN
        SELECT ah.num          num
              ,c.obj_name_orig obj_name_orig
          INTO v_agent_num
              ,v_agent_name
          FROM ven_ag_contract_header ah
              ,contact                c
              ,t_sales_channel        sc
         WHERE ah.ag_contract_header_id =
               pkg_agn_control.get_current_policy_agent(v_pol_sum.policy_header_id)
           AND ah.agent_id = c.contact_id
           AND ah.t_sales_channel_id = sc.id;
      EXCEPTION
        WHEN no_data_found THEN
          NULL;
      END;
    
      set_font;
    
      delete_row_print_cache;
    
      gv_widths(1) := plpdf.getpagespace / 3; -- Array of widths
      gv_widths(2) := gv_widths(1);
    
      gv_aligns(1) := 'L';
      gv_aligns(2) := 'L';
    
      gv_datas(1) := upper('СТРАХОВАТЕЛЬ');
      gv_datas(2) := NULL;
    
      gv_styles(1) := gc_style_bold;
      gv_styles(2) := gc_style_bold;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      gv_datas(1) := '_____________________________________';
      gv_datas(2) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      plpdf.linebreak(p_h => gc_default_line_height + 1);
    
      gv_datas(1) := 'ФИО Консультанта';
      gv_datas(2) := v_agent_name;
      gv_styles(1) := gc_style_regular;
      gv_styles(2) := gc_style_regular;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Номер Консультанта';
      gv_datas(2) := v_agent_num;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
      gv_datas(1) := 'Москва, Дата выдачи полиса:' || to_char(v_pol_sum.sign_date, 'dd.mm.yyyy');
      gv_datas(2) := NULL;
      plpdf.row_print2(p_data    => gv_datas
                      ,p_border  => gv_borders
                      ,p_width   => gv_widths
                      ,p_align   => gv_aligns
                      ,p_style   => gv_styles
                      ,p_maxline => gv_maxlines);
    
    END print_signes;
  
    PROCEDURE print_cash_surr IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 2')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Гарантированная выкупная сумма рассчитывается как % от сформированного резерва по договору страхования на дату последнего оплаченного взноса или дату расторжения договора страхования, в зависимости от того, какая из дат является более ранней.'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date AS period_end
              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                 ,d.insurance_year_date
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr;
  
    PROCEDURE print_contact_info_custom
    (
      par_contact_info t_contact_summary
     ,par_height       NUMBER DEFAULT gc_default_line_height + 1
     ,par_clipping     NUMBER DEFAULT gc_default_no_clipping
    ) IS
      v_fio        VARCHAR2(4000);
      v_birth_date VARCHAR2(1000);
      v_passport   VARCHAR2(4000);
      /*    v_letters_address cn_address.name%TYPE;
          v_const_address   cn_address.name%TYPE;
          v_phone_number    VARCHAR2(4000);
          v_home_number     VARCHAR2(4000);
          v_mobile_number   VARCHAR2(4000);
        
          c_contact_exists CONSTANT BOOLEAN := par_contact_info.contact_id IS NOT NULL;
        
          v_rpad_length PLS_INTEGER;
          c_phone_length CONSTANT PLS_INTEGER := 29;
          v_inn cn_contact_ident.id_value%TYPE;
      */
    BEGIN
    
      v_fio        := par_contact_info.fio;
      v_birth_date := to_char(par_contact_info.date_of_birth, 'dd.mm.yyyy" г."');
      v_passport   := get_passport(par_contact_info.contact_id);
      /*      v_letters_address := pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_letters_address_id(par_contact_info.contact_id)
                                                                    ,pkg_contact_rep_utils.gc_address_name);
      v_const_address   := pkg_contact_rep_utils.get_address_by_mask(pkg_contact_rep_utils.get_last_active_address_id(par_contact_info.contact_id
                                                                                                                     ,'CONST')
                                                                    ,pkg_contact_rep_utils.gc_address_name);
      v_phone_number    := pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(par_contact_info.contact_id));
      v_home_number     := pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(par_contact_info.contact_id
                                                                                                                      ,'HOME'));
      v_mobile_number   := pkg_contact_rep_utils.get_phone_number_by_id(pkg_contact_rep_utils.get_last_active_phone_id(par_contact_info.contact_id
                                                                                                                      ,'MOBIL'));
      
      v_inn := pkg_contact_rep_utils.get_last_doc_by_type(par_contact_info.contact_id, 'INN');*/
    
      print_info_element(par_element_name  => 'Ф.И.О.:'
                        ,par_element_value => v_fio
                        ,par_height        => par_height
                        ,par_clipping      => par_clipping);
      print_info_element(par_element_name  => 'ДАТА РОЖДЕНИЯ:'
                        ,par_element_value => v_birth_date
                        ,par_height        => par_height
                        ,par_clipping      => par_clipping);
    
      /*    print_mark(par_question_text  => 'ПОЛ'
      ,par_mark_index     => CASE par_contact_info.gender
                               WHEN 'MALE' THEN
                                1
                               WHEN 'FEMALE' THEN
                                2
                               ELSE
                                NULL
                             END
      ,par_variant_texts  => tt_one_col('мужской', 'женский')
      ,par_relative_width => 0.45
      ,par_height         => par_height
      ,par_clipping       => par_clipping);*/
    
      print_info_element(par_element_name  => 'ДОКУМЕНТ, УДОСТОВЕРЯЮЩИЙ ЛИЧНОСТЬ:'
                        ,par_element_value => v_passport
                        ,par_height        => par_height
                        ,par_clipping      => par_clipping);
    
      /*    print_info_element(par_element_name  => 'АДРЕС ПОЧТОВЫЙ'
                        ,par_element_value => v_letters_address
                        ,par_height        => par_height
                        ,par_clipping      => par_clipping);
      print_info_element(par_element_name  => 'АДРЕС РЕГИСТРАЦИИ'
                        ,par_element_value => v_const_address
                        ,par_height        => par_height
                        ,par_clipping      => par_clipping);
      
      set_font(par_style => gc_style_bold);
      plpdf.printcell(p_w        => gv_default_elem_header_width * 0.8
                     ,p_txt      => upper('ТЕЛЕФОНЫ')
                     ,p_h        => par_height
                     ,p_ln       => 0
                     ,p_clipping => par_clipping);
      set_font;
      plpdf.printcell(p_txt      => 'Домашний:'
                     ,p_h        => par_height
                     ,p_clipping => par_clipping
                     ,p_ln       => 0
                     ,p_w        => plpdf.gettextwidth('Домашний:') + 2);
      
      plpdf.printcell(p_txt      => v_home_number
                     ,p_h        => par_height
                     ,p_clipping => par_clipping
                     ,p_ln       => 0
                     ,p_w        => plpdf.gettextwidth(rpad('0', c_phone_length, '0')) + 2);
      
      plpdf.printcell(p_txt      => 'Мобильный:'
                     ,p_h        => par_height
                     ,p_clipping => par_clipping
                     ,p_ln       => 0
                     ,p_w        => plpdf.gettextwidth('Мобильный:') + 2);
      
      plpdf.printcell(p_txt      => v_mobile_number
                     ,p_h        => par_height
                     ,p_clipping => par_clipping
                     ,p_ln       => 1
                     ,p_w        => plpdf.gettextwidth(rpad('0', c_phone_length, '0')));
      
      IF par_print_citizenship_inn
      THEN
        set_font(par_style => gc_style_bold);
        plpdf.printcell(p_w        => gv_default_elem_header_width * 0.8
                       ,p_txt      => upper('ГРАЖДАНСТВО:')
                       ,p_h        => par_height
                       ,p_ln       => 0
                       ,p_clipping => par_clipping);
        set_font;
      
        -- 40 - лдина самого длинного названия страны из справочника
        plpdf.printmultilinecell(p_w        => plpdf.gettextwidth(rpad('0', 40, '0'))
                                ,p_txt      => par_contact_info.country_birth_name
                                ,p_h        => par_height
                                ,p_ln       => 0
                                ,p_clipping => par_clipping);
      
        set_font(par_style => gc_style_bold);
        plpdf.printcell(p_w        => plpdf.gettextwidth(rpad('0', 10, '0'))
                       ,p_txt      => 'ИНН:'
                       ,p_h        => par_height
                       ,p_ln       => 0
                       ,p_clipping => par_clipping);
        set_font;
      
        plpdf.printcell(p_txt => v_inn, p_h => par_height, p_ln => 1, p_clipping => par_clipping);
      
      END IF;*/
    
    END print_contact_info_custom;
  
    PROCEDURE fill_cash_surr_table_custom(par_cursor typ_cur_cash_surr_table) IS
      v_width NUMBER := plpdf.getpagespace / 6;
      rec     typ_cach_surr_rec;
    
      PROCEDURE theader IS
        v_datas_header  plpdf_type.t_row_datas; -- Array of datas
        v_styles_header plpdf_type.t_row_styles; -- Array of styles
      BEGIN
        v_datas_header(1) := upper('ГОД ДЕЙСТВИЯ ДОГОВОРА');
        v_datas_header(2) := upper('НОМЕР ПЕРИОДА');
        v_datas_header(3) := upper('НАЧАЛО');
        v_datas_header(4) := upper('ОКОНЧАНИЕ');
        v_datas_header(5) := upper('% ОТ СТРАХОВОЙ СУММЫ');
        v_datas_header(6) := upper('ГАРАНТИРОВАННАЯ ВЫКУПНАЯ СУММА, РУБ.');
      
        v_styles_header(1) := gc_style_bold;
        v_styles_header(2) := gc_style_bold;
        v_styles_header(3) := gc_style_bold;
        v_styles_header(4) := gc_style_bold;
        v_styles_header(5) := gc_style_bold;
        v_styles_header(6) := gc_style_bold;
      
        plpdf.row_print2(p_data    => v_datas_header
                        ,p_border  => gv_borders
                        ,p_width   => gv_widths
                        ,p_align   => gv_aligns
                        ,p_style   => v_styles_header
                        ,p_maxline => gv_maxlines);
      END theader;
    BEGIN
    
      delete_row_print_cache;
    
      FOR i IN 1 .. 6
      LOOP
        gv_borders(i) := 1;
        gv_widths(i) := v_width;
        gv_aligns(i) := 'C';
      END LOOP;
    
      theader;
    
      LOOP
        FETCH par_cursor
          INTO rec;
        EXIT WHEN par_cursor%NOTFOUND;
      
        gv_datas(1) := rec.ins_year_formula;
        gv_datas(2) := rec.period_number;
        gv_datas(3) := to_char(rec.period_start, 'dd.mm.yyyy');
        gv_datas(4) := to_char(rec.period_end, 'dd.mm.yyyy');
        gv_datas(5) := to_char(rec.reserve_proc) || '%';
        gv_datas(6) := pkg_rep_utils.to_money_sep(rec.cash_surr_value);
      
        IF plpdf.checkpagebreak(plpdf.getrowheight(p_data    => gv_datas
                                                  ,p_width   => gv_widths
                                                  ,p_maxline => gv_maxlines))
        THEN
          theader;
        END IF;
      
        plpdf.row_print2(p_data     => gv_datas
                        ,p_border   => gv_borders
                        ,p_width    => gv_widths
                        ,p_align    => gv_aligns
                        ,p_style    => gv_styles
                        ,p_clipping => 0
                        ,p_h        => 4
                        ,p_maxline  => gv_maxlines);
      END LOOP;
    END fill_cash_surr_table_custom;
  
    PROCEDURE print_cash_surr_custom IS
      v_cash_surr_cur               typ_cur_cash_surr_table;
      v_main_program_lob_line_brief t_lob_line.brief%TYPE;
    BEGIN
      plpdf.newpage;
      print_draft(v_pol_sum.policy_status_desc);
      set_font(par_style => gc_style_bold, par_size => gv_default_font_size + 1);
    
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => upper('ПРИЛОЖЕНИЕ № 2')
                     ,p_h     => -1
                     ,p_ln    => 1);
    
      set_font(par_size => 9);
      plpdf.printcell(p_align => 'C'
                     ,p_txt   => 'Является составной и неотъемлемой частью Полиса  № ' ||
                                 v_pol_sum.pol_num
                     ,p_ln    => 1);
    
      plpdf.linebreak;
      set_font(par_style => gc_style_bold, par_size => 12);
      plpdf.printmultilinecell(p_align => 'C'
                              ,p_txt   => upper('ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ')
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      set_font(par_size => 10);
      plpdf.printmultilinecell(p_align => 'L'
                              ,p_txt   => 'Размеры гарантированных выкупных сумм определяются как процент от гарантированной страховой суммы по риску, предусмотренному п.3.1.2. Полисных условий, по Договору страхования в соответствии со следующим:'
                              ,p_h     => -1
                              ,p_ln    => 1);
    
      plpdf.linebreak;
    
      OPEN v_cash_surr_cur FOR
        SELECT d.start_cash_surr_date AS period_start
              ,d.end_cash_surr_date   AS period_end
               --              ,MONTHS_BETWEEN(d.insurance_year_date, ph.start_date) / 12 + 1 ins_year_formula
              ,d.insurance_year_number ins_year_formula
              ,SUM(d.value) AS cash_surr_value
              ,ROUND(d.ft * 100, 2) AS reserve_proc
              ,coalesce(greatest(SUM(d.reserve_value), 0)
                       ,ROUND(SUM(d.value) / nullif(d.ft, 0), 2)
                       ,0) reserve_value
              ,row_number() over(ORDER BY d.start_cash_surr_date) period_number
          FROM policy_cash_surr   p
              ,policy_cash_surr_d d
              ,p_pol_header       ph
         WHERE d.policy_cash_surr_id = p.policy_cash_surr_id
           AND p.policy_id = v_policy_id
           AND p.pol_header_id = ph.policy_header_id
         GROUP BY d.start_cash_surr_date
                 ,d.end_cash_surr_date
                  --,d.insurance_year_date
                 ,d.insurance_year_number
                 ,ph.start_date
                 ,d.ft
         ORDER BY d.start_cash_surr_date;
    
      fill_cash_surr_table_custom(v_cash_surr_cur);
    
      CLOSE v_cash_surr_cur;
    
    END print_cash_surr_custom;
  
  BEGIN
    v_policy_id    := to_number(repcore.get_context('POL_ID'));
    v_pol_sum      := get_policy_summary(v_policy_id);
    v_insuree_info := get_contact_summary(v_pol_sum.insuree_contact_id);
    v_assured_info := get_contact_summary(v_pol_sum.assured_array(1));
  
    init(par_default_font_size => 8);
    plpdf.nopalias(p_alias => '{nb}', p_cp_alias => '{cp}', p_format => '{cp}/{nb}');
    plpdf.setfooterprocname(p_proc_name => 'ins.pkg_rep_plpdf.footer_414', p_height => 27);
  
    print_draft(v_pol_sum.policy_status_desc);
  
    print_default_title('СЕМЕЙНЫЙ ДЕПОЗИТ');
    print_default_title('Полис страхования № ' || v_pol_sum.ids);
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВЩИК
    -------------------------------------------------------------------------------------------------
    print_default_insurer_info;
  
    -------------------------------------------------------------------------------------------------
    --СТРАХОВАТЕЛЬ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('СТРАХОВАТЕЛЬ');
    print_contact_info_custom(par_contact_info => v_insuree_info);
    prn('');
    -------------------------------------------------------------------------------------------------
    --ЗАСТРАХОВАННОЕ ЛИЦО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ЗАСТРАХОВАННОЕ ЛИЦО');
    print_contact_info_custom(par_contact_info => v_assured_info);
    prn('');
    -------------------------------------------------------------------------------------------------
    --ПРОГРАММЫ СТРАХОВАНИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ПРОГРАММЫ СТРАХОВАНИЯ (СТРАХОВЫЕ РИСКИ). СТРАХОВЫЕ СУММЫ. СТРАХОВЫЕ ВЗНОСЫ.');
    print_programs_custom;
    prn('');
    -------------------------------------------------------------------------------------------------
    --СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. 
    -------------------------------------------------------------------------------------------------
    print_default_chapter('СРОК ДЕЙСТВИЯ ДОГОВОРА СТРАХОВАНИЯ. ');
    print_periods_custom;
    prn('');
    -------------------------------------------------------------------------------------------------
    --УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ ПРЕМИИ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('УСЛОВИЯ И СРОКИ УПЛАТЫ СТРАХОВОЙ  ПРЕМИИ');
    print_payment_terms;
    prn('');
    -------------------------------------------------------------------------------------------------
    --ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ  СМЕРТИ ЗАСТРАХОВАННОГО
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ВЫГОДОПРИОБРЕТАТЕЛИ НА СЛУЧАЙ СМЕРТИ');
    print_benificiary_table(v_policy_id, 3);
  
    plpdf.newpage;
    print_draft(v_pol_sum.policy_status_desc);
    -------------------------------------------------------------------------------------------------
    --ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ
    -------------------------------------------------------------------------------------------------
    print_default_chapter('ДОПОЛНИТЕЛЬНЫЕ УСЛОВИЯ');
    print_additional_conds;
  
    print_signes;
  
    -------------------------------------------------------------------------------------------------
    --  ТАБЛИЦА ГАРАНТИРОВАННЫХ ВЫКУПНЫХ СУММ ПО ОСНОВНОЙ ПРОГРАММЕ
    -------------------------------------------------------------------------------------------------   
    print_cash_surr_custom;
  
    plpdf.senddoc(p_blob => par_data);
    par_file_name    := 'policy_' || v_pol_sum.pol_num || '.pdf';
    par_content_type := gc_pdf_content_type;
  
  END rep_famaly_dep;

  PROCEDURE rep_invest_lump_is_no_orig_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    rep_investor_lump_full(par_is_orig_dec  => FALSE
                          ,par_content_type => par_content_type
                          ,par_file_name    => par_file_name
                          ,par_data         => par_data);
  END rep_invest_lump_is_no_orig_dec;

  PROCEDURE rep_invest_lump_is_orig_dec
  (
    par_content_type OUT VARCHAR2
   ,par_file_name    OUT VARCHAR2
   ,par_data         OUT NOCOPY BLOB
  ) IS
  BEGIN
    rep_investor_lump_full(par_is_orig_dec  => TRUE
                          ,par_content_type => par_content_type
                          ,par_file_name    => par_file_name
                          ,par_data         => par_data);
  END rep_invest_lump_is_orig_dec;

END pkg_rep_plpdf;
/
